name: Release artifacts
on:
  workflow_dispatch:
  release:
    types: [published]

jobs:

  build-core-rust:
    continue-on-error: true
    runs-on: '${{ matrix.os }}'
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: 'libcorerust.dylib'
            zipname: 'arch-darwin-x86_64'
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: 'libcorerust.dylib'
            zipname: 'arch-darwin-aarch64'
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: 'libcorerust.so'
            zipname: 'arch-linux-x86_64'
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            zipname: 'arch-linux-aarch64'
            artifact: 'libcorerust.so'
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: 'corerust.dll'
            zipname: 'arch-windows-x86_64-msvc'
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact: 'corerust.dll'
            zipname: 'arch-windows-x86_64-gnu'
    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: '${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles(''**/Cargo.lock'') }}'
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: '${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles(''**/Cargo.lock'') }}'
      - uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install Rust Targets
        run: |
          rustup target install ${{ matrix.target }}
      - if: matrix.os == 'windows-latest'
        name: Build dependencies windows
        run: |
          rustup toolchain install stable-gnu
          rustup set default-host ${{ matrix.target }}
      - if: matrix.os == 'ubuntu-latest'
        name: Build dependencies ubuntu
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          # sudo apt install -y gcc-i686-linux-gnu g++-i686-linux-gnu
      - name: Build core-rust
        run: |
          cd core-rust
          cargo build --release --profile=release --target ${{ matrix.target }}
          echo "ls  ./target/${{ matrix.target }}/release"
          ls  ./target/${{ matrix.target }}/release/
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "${{ matrix.target == 'aarch64-unknown-linux-gnu' && '' || 'aarch64-linux-gnu-gcc' }}"
      - uses: actions/upload-artifact@master
        with:
          name: libcorerust-${{ matrix.target }}
          path: ./core-rust/target/${{ matrix.target }}/release/${{ matrix.artifact }}
          if-no-files-found: error

  publish-core-rust:
    if: github.event_name == 'release'
    needs: 
      - build-core-rust
    runs-on: 'ubuntu-latest'
    continue-on-error: true
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            artifact: 'libcorerust.dylib'
            zipname: 'arch-darwin-x86_64'
          - target: aarch64-apple-darwin
            artifact: 'libcorerust.dylib'
            zipname: 'arch-darwin-aarch64'
          - target: x86_64-unknown-linux-gnu
            artifact: 'libcorerust.so'
            zipname: 'arch-linux-x86_64'
          - target: aarch64-unknown-linux-gnu
            artifact: 'libcorerust.so'
            zipname: 'arch-linux-aarch64'
          - target: x86_64-pc-windows-msvc
            artifact: 'corerust.dll'
            zipname: 'arch-windows-x86_64-msvc'
          - target: x86_64-pc-windows-gnu
            artifact: 'corerust.dll'
            zipname: 'arch-windows-x86_64-gnu'
    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
      - uses: actions/download-artifact@v3
        with:
          name: libcorerust-${{ matrix.target }}
          path: libcorerust-${{ matrix.target }}
      - name: Build core-rust
        run: |
          ls -lah libcorerust-${{ matrix.target }}
          zip -j babylon-node-rust-${{ matrix.zipname }}-release-${{ github.event.release.tag_name }}.zip libcorerust-${{ matrix.target }}/${{ matrix.artifact }}
      - if: github.event_name == 'release'
        name: Get release
        id: get_release
        uses: bruceadams/get-release@74c3d60f5a28f358ccf241a00c9021ea16f0569f
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - if: github.event_name == 'release'
        id: get_version
        name: Get radixdlt version
        uses: ./.github/actions/get-version
        with:
          is_release: true
      - if: github.event_name == 'release'
        name: Upload distribution zip
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: babylon-node-rust-${{ matrix.zipname }}-release-${{ github.event.release.tag_name }}.zip
          asset_name: babylon-node-rust-${{ matrix.zipname }}-release-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip

  publish-distribution-zip:
    if: github.event_name == 'release'
    name: Build and Upload Application Binary
    runs-on: ubuntu-22.04
    environment: publish-artifacts
    steps:
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@516dbb0c760f39b4cdd750ae095f1688780f68f4
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
        with:
          ref: ${{ github.event.release.tag_name }}
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@3f07048e3d294f56e9b90ac5ea2c6f74e9ad0f98
        with:
          distribution: "zulu"
          java-version: "17"
      - name: Cache Gradle packages
        uses: actions/cache@6998d139ddd3e68c71e9e398d8e40b71a2f39812
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build radixdlt
        uses: ./.github/actions/gradle-task
        with:
          is_release: true
          gradle_command: clean build -x test
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@f589ce0779c7bef1faf175f7488c972eb47dc046
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - id: get_version
        name: Get radixdlt version
        uses: ./.github/actions/get-version
        with:
          is_release: true
      - name: List files
        run: ls -la ./core/build/distributions/
      - name: Upload distribution zip
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./core/build/distributions/core-${{ steps.get_version.outputs.radixdlt_version }}.zip
          asset_name: babylon-node-${{ steps.get_version.outputs.radixdlt_version }}.zip
          asset_content_type: application/zip
