name: Release

on:
  workflow_dispatch:
    inputs:
      release-tag:
          description: 'Tag of the release'
          required: true
          type: string
      release-name:
          description: 'Name of the release'
          required: true
          type: string
      prerelease:
          description: 'Prerelease?'
          type: boolean
          default: true
          required: false

jobs:
  cancel_running_workflows:
    name: Cancel running workflows
    runs-on: ubuntu-22.04
    steps:
      - name: cancel running workflows
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

  build_push_container_dockerhub:
    name: (DockerHub) Docker AMD
    uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
    with:
      environment: release
      runs_on: ubuntu-latest
      image_registry: "docker.io"
      image_organization: "radixdlt"
      image_name: "babylon-node"
      tag: ${{ inputs.release-tag }}
      flavor: |
        suffix=-amd64
      context: "."
      dockerfile: "./Dockerfile"
      platforms: "linux/amd64"
      enable_dockerhub: "true"
      provenance: "false"
    secrets:
      role_to_assume: ${{ secrets.DOCKERHUB_RELEASER_ROLE }}

  build_push_container_dockerhub_arm:
    name: (DockerHub) Docker ARM
    uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
    with:
      environment: release
      runs_on: babylon-node-arm
      image_registry: "docker.io"
      image_organization: "radixdlt"
      image_name: "babylon-node"
      tag: ${{ inputs.release-tag }}
      flavor: |
        suffix=-arm64
      context: "."
      dockerfile: "./Dockerfile"
      platforms: "linux/arm64"
      enable_dockerhub: "true"
      cache_tag_suffix: arm64
      provenance: "false"
      build-args: |
        WGET_VERSION=1.21.3-1+b1
    secrets:
      role_to_assume: ${{ secrets.DOCKERHUB_RELEASER_ROLE }}

  join_multiarch_image_dockerhub:
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    environment: release
    name: Join Multiarch Image Dockerhub
    runs-on: ubuntu-latest
    needs:
      - build_push_container_dockerhub
      - build_push_container_dockerhub_arm
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      ## Dockerhub
      # This is version v1.7.0
      # https://github.com/aws-actions/configure-aws-credentials/releases/tag/v1.7.0
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          role-to-assume: ${{ secrets.DOCKERHUB_RELEASER_ROLE }}
          aws-region: eu-west-2
      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            DOCKERHUB, github-actions/rdxworks/dockerhub-images/release-credentials
          parse-json-secrets: true
      # This is version v2.1.0
      # https://github.com/docker/login-action/releases/tag/v2.1.0
      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Install and Configure Buildx
        run: |
          wget https://github.com/docker/buildx/releases/download/v0.10.4/buildx-v0.10.4.linux-amd64
          echo "---- Configure Docker plugins ----"
          mkdir -p /home/runner/.docker/cli-plugins/
          mv buildx-v0.10.4.linux-amd64 /home/runner/.docker/cli-plugins/docker-buildx
          chmod +x /home/runner/.docker/cli-plugins/docker-buildx
          echo "---- Create build context ----"
          docker context create babylon-node
          docker buildx create babylon-node --use
      - name: Join multiarch images
        run: |
          docker buildx imagetools create -t docker.io/radixdlt/babylon-node:${{ inputs.release-tag }} \
            docker.io/radixdlt/babylon-node:${{ inputs.release-tag }}-arm64 \
            docker.io/radixdlt/babylon-node:${{ inputs.release-tag }}-amd64

  snyk_container_monitor:
    name: Snyk monitor container
    runs-on: ubuntu-latest
    needs:
      - build_push_container_dockerhub
      - build_push_container_dockerhub_arm
    permissions:
      id-token: write
      pull-requests: read
      contents: read
      deployments: write
    steps:
      - uses: radixdlt/public-iac-resuable-artifacts/snyk-container-monitor@main
        with:
          role_name: ${{ secrets.AWS_ROLE_NAME_SNYK_SECRET }}
          app_name: 'babylon-node'
          step_name: 'snyk-cntr-monitor-amd'
          dockerhub_secret_name: ${{ secrets.AWS_SECRET_NAME_DOCKERHUB }}
          snyk_secret_name: ${{ secrets.AWS_SECRET_NAME_SNYK }}
          parse_json: true
          snyk_org_id: ${{ secrets.SNYK_ORG_ID }}
          image: docker.io/radixdlt/babylon-node:${{ inputs.release-tag }}-amd64
          target_ref: ${{ github.ref_name }}

  snyk_monitor:
    name: Snyk monitor
    runs-on: ubuntu-latest
    needs:
      - build_push_container_dockerhub
    permissions:
      id-token: write
      pull-requests: read
      contents: read
      deployments: write
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: ${{ secrets.AWS_ROLE_NAME_SNYK_SECRET }}
          app_name: 'babylon-node'
          step_name: 'snyk-monitor'
          secret_prefix: 'SNYK'
          secret_name: ${{ secrets.AWS_SECRET_NAME_SNYK }}
          parse_json: true
      - name: Enable Snyk online monitoring to check for vulnerabilities
        uses: snyk/actions/gradle-jdk17@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
        with:
          args: --all-projects --org=${{ env.SNYK_NETWORK_ORG_ID }} --target-reference=${{ github.ref_name }}
          command: monitor

  build-core-rust:
    continue-on-error: true
    runs-on: '${{ matrix.os }}'
    timeout-minutes: 45
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: 'libcorerust.dylib'
            zipname: 'arch-darwin-x86_64'
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: 'libcorerust.dylib'
            zipname: 'arch-darwin-aarch64'
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: 'libcorerust.so'
            zipname: 'arch-linux-x86_64'
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            zipname: 'arch-linux-aarch64'
            artifact: 'libcorerust.so'
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: 'corerust.dll'
            zipname: 'arch-windows-x86_64-msvc'
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact: 'corerust.dll'
            zipname: 'arch-windows-x86_64-gnu'
    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: '${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles(''**/Cargo.lock'') }}'
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: '${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles(''**/Cargo.lock'') }}'
      - uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install Rust Targets
        run: |
          rustup target install ${{ matrix.target }}
      - if: matrix.os == 'windows-latest'
        name: Build dependencies windows
        run: |
          rustup toolchain install stable-gnu
          rustup set default-host ${{ matrix.target }}
      - if: matrix.os == 'ubuntu-latest'
        name: Build dependencies ubuntu
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          # sudo apt install -y gcc-i686-linux-gnu g++-i686-linux-gnu
      - name: Build core-rust
        run: |
          cd core-rust
          cargo build --release --profile=release --target ${{ matrix.target }}
          echo "ls  ./target/${{ matrix.target }}/release"
          ls  ./target/${{ matrix.target }}/release/
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "${{ matrix.target == 'aarch64-unknown-linux-gnu' && '' || 'aarch64-linux-gnu-gcc' }}"
      - uses: actions/upload-artifact@master
        with:
          name: libcorerust-${{ matrix.target }}
          path: ./core-rust/target/${{ matrix.target }}/release/${{ matrix.artifact }}
          if-no-files-found: error

  publish-core-rust:
    environment: release
    needs: 
      - build-core-rust
    runs-on: 'ubuntu-latest'
    continue-on-error: true
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            artifact: 'libcorerust.dylib'
            zipname: 'arch-darwin-x86_64'
          - target: aarch64-apple-darwin
            artifact: 'libcorerust.dylib'
            zipname: 'arch-darwin-aarch64'
          - target: x86_64-unknown-linux-gnu
            artifact: 'libcorerust.so'
            zipname: 'arch-linux-x86_64'
          - target: aarch64-unknown-linux-gnu
            artifact: 'libcorerust.so'
            zipname: 'arch-linux-aarch64'
          - target: x86_64-pc-windows-msvc
            artifact: 'corerust.dll'
            zipname: 'arch-windows-x86_64-msvc'
          - target: x86_64-pc-windows-gnu
            artifact: 'corerust.dll'
            zipname: 'arch-windows-x86_64-gnu'
    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
      - uses: actions/download-artifact@v3
        with:
          name: libcorerust-${{ matrix.target }}
          path: libcorerust-${{ matrix.target }}
      - name: Build core-rust
        run: |
          ls -lah libcorerust-${{ matrix.target }}
          zip -j babylon-node-rust-${{ matrix.zipname }}-release-${{ inputs.release-tag }}.zip libcorerust-${{ matrix.target }}/${{ matrix.artifact }}

      - name: Upload distribution zip
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@c9b46fe7aad9f02afd89b12450b780f52dacfb2d
        with:
          files: |
            babylon-node-rust-${{ matrix.zipname }}-release-${{ inputs.release-tag }}.zip
          tag_name: ${{ inputs.release-tag }}
          name: ${{ inputs.release-name }}
          prerelease: ${{ inputs.prerelease }}
          generate_release_notes: true
      
  publish-distribution-zip:
    name: Build and Upload Application Binary
    runs-on: ubuntu-22.04
    environment: release
    steps:
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@516dbb0c760f39b4cdd750ae095f1688780f68f4
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@3f07048e3d294f56e9b90ac5ea2c6f74e9ad0f98
        with:
          distribution: "zulu"
          java-version: "17"
      - name: Cache Gradle packages
        uses: actions/cache@6998d139ddd3e68c71e9e398d8e40b71a2f39812
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build radixdlt
        uses: ./.github/actions/gradle-task
        with:
          is_release: true
          gradle_command: clean build -x test
      - name: List files
        run: |
          ls -la ./core/build/distributions/
          mv ./core/build/distributions/core-${{ inputs.release-tag }}.zip babylon-node-${{ inputs.release-tag }}.zip
      - name: Upload distribution zip
        uses: softprops/action-gh-release@c9b46fe7aad9f02afd89b12450b780f52dacfb2d
        with:
          files: |
            babylon-node-${{ inputs.release-tag }}.zip
          tag_name: ${{ inputs.release-tag }}
          name: ${{ inputs.release-name }}
          prerelease: ${{ inputs.prerelease }}
          generate_release_notes: true

  snyk-sbom:
    environment: release
    name: SBOM
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: ${{ secrets.AWS_ROLE_NAME_SNYK_SECRET }}
          app_name: 'babylon-node'
          step_name: 'snyk-sbom'
          secret_prefix: 'SNYK'
          secret_name: ${{ secrets.AWS_SECRET_NAME_SNYK }}
          parse_json: true
      - name: Generate SBOM
        uses: snyk/actions/gradle-jdk17@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
        with:
          args: --all-projects --org=${{ env.SNYK_NETWORK_ORG_ID }} --format=cyclonedx1.4+json --json-file-output sbom.json
          command: sbom
      - name: Upload SBOM
        uses: softprops/action-gh-release@c9b46fe7aad9f02afd89b12450b780f52dacfb2d
        with:
          files: |
            sbom.json
          tag_name: ${{ inputs.release-tag }}
          name: ${{ inputs.release-name }}
          prerelease: ${{ inputs.prerelease }}
          generate_release_notes: true