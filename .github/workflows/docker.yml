name: Docker

on:
  pull_request:
  push:
    branches:
      - develop
      - main
      - release\/*

jobs:
  cancel_running_workflows:
    name: Cancel running workflows
    runs-on: ubuntu-22.04
    steps:
      - name: cancel running workflows
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

  build_deb:
    name: Build debian package
    runs-on: babylon-runner
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            docker.io/radixdlt/babylon-node
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          flavor: |
            latest=false
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-deb
          restore-keys: ${{ runner.os }}-gradle-deb
      - id: auth
        uses: google-github-actions/auth@a61909d048e0be579b6c15b27088d19668493851
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true
          token_format: access_token
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@d51b5346f85640ec2aa2fa057354d2b82c2fcbce'
      - name: 'Register gcloud as Docker credential helper'
        run: |
          gcloud auth configure-docker -q
      - name: Login to Artifact Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: europe-west2-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Restore cached image-cache
        id: cache-image-restore
        uses: actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8
        with:
          path: /tmp/outputs/cache/docker
          key: babylon-node-default-${{ hashFiles('./Dockerfile') }}
      - name: Install and Configure Buildx
        run: |
          wget https://github.com/docker/buildx/releases/download/v0.10.4/buildx-v0.10.4.linux-amd64
          echo "---- Configure Docker plugins ----"
          mkdir -p /home/runner/.docker/cli-plugins/
          mv buildx-v0.10.4.linux-amd64 /home/runner/.docker/cli-plugins/docker-buildx
          chmod +x /home/runner/.docker/cli-plugins/docker-buildx
          echo "---- Create build context ----"
          docker context create babylon-node
          docker buildx create babylon-node --use
      - name: Create deb package
        run: |
          sudo apt-get update && sudo apt-get install -y make
          cd core && make build-core
      - name: Upload generated debian package
        uses: actions/upload-artifact@v3.1.0
        with:
          name: deb4docker
          path: "${{ github.workspace }}/docker/*.deb"

  setup_tags:
    name: Setup Docker tags
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.setup_tags.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: setup_tags
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build_push_container_private:
    name: (PRIVATE) Docker AMD
    needs:
      - setup_tags
    uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
    with:
      runs_on: ubuntu-latest
      image_registry: "docker.io"
      image_organization: "radixdlt"
      image_name: "private-babylon-node"
      tag: ${{ needs.setup_tags.outputs.tag }}
      tags: |
        type=ref,event=branch
        type=ref,event=pr
        type=ref,event=tag
        type=semver,pattern={{version}}
        type=semver,pattern={{major}}.{{minor}}
        type=semver,pattern={{major}}
        type=sha
      context: "."
      dockerfile: "./Dockerfile"
      platforms: "linux/amd64"
      provenance: "false"
      scan_image: true
      snyk_target_ref: ${{ github.ref_name }}
    secrets:
      workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
      service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  # build_push_container_private_arm:
  #   name: (PRIVATE) Docker ARM
  #   uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
  #   with:
  #     runs_on: babylon-node-arm
  #     image_registry: "docker.io"
  #     image_organization: "radixdlt"
  #     image_name: "private-babylon-node"
  #     tags: |
  #       type=ref,event=branch
  #       type=ref,event=pr
  #       type=semver,pattern={{version}}
  #       type=semver,pattern={{major}}.{{minor}}
  #       type=semver,pattern={{major}}
  #       type=sha
  #     flavor: |
  #       suffix=-arm64
  #     context: "."
  #     dockerfile: "./Dockerfile"
  #     platforms: "linux/arm64"
  #     cache_tag_suffix: arm64
  #     provenance: "false"
  #     build-args: |
  #       WGET_VERSION=1.21.3-1+b1
  #   secrets:
  #     workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
  #     service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}


# TEMPORARILY REMOVE EPHEMERAL TESTS
# => Until we can change them to only run the "node" tests and not the transaction tests
# ephemeral-deploy-and-test:
#   name: Run ephemeral deploy and test
#   needs:
#     - build_deb
#     - build_push_container
#   runs-on: ubuntu-22.04
#   steps:
#     - name: Get docker image tag
#       run: |
#         #There can be multiple tag entries. Get the first and only take the tag (i.e. not the image repo and name)
#         TAGS="${{ needs.build_deb.outputs.tags }}"
#         DOCKER_TAG=$(echo $TAGS | awk 'NR==1{print $1}' | cut -d':' -f2)
#         echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
#         echo "BABYLON_NODE_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
#     - name: Deploy and test on ephemeral network
#       uses: toptal/jenkins-job-trigger-action@1.0.0
#       with:
#         jenkins_url: "${{ env.JENKINS_URL }}"
#         jenkins_user: ${{ env.JENKINS_USER }}
#         jenkins_token: ${{ env.JENKINS_TOKEN }}
#         job_name: "ephemeral-deployments/job/ephemeral-env-deploy-and-test"
#         job_params: |
#           {
#             "nodeDockerTag": "${{ env.DOCKER_TAG }}",
#             "babylonNodeBranch": "${{ env.BABYLON_NODE_BRANCH }}"
#           }
#         job_timeout: "3600"