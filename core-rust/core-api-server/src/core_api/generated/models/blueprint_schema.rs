/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct BlueprintSchema {
    #[serde(rename = "schema")]
    pub schema: Box<crate::core_api::generated::models::SborData>,
    /// The type index of the substates under the SELF module - in the context of the blueprint's SBOR schema. 
    #[serde(rename = "substates")]
    pub substates: Vec<crate::core_api::generated::models::LocalTypeIndex>,
    /// A map from the function name to the FunctionDefinition
    #[serde(rename = "function_definitions")]
    pub function_definitions: ::std::collections::HashMap<String, crate::core_api::generated::models::FunctionDefinition>,
}

impl BlueprintSchema {
    pub fn new(schema: crate::core_api::generated::models::SborData, substates: Vec<crate::core_api::generated::models::LocalTypeIndex>, function_definitions: ::std::collections::HashMap<String, crate::core_api::generated::models::FunctionDefinition>) -> BlueprintSchema {
        BlueprintSchema {
            schema: Box::new(schema),
            substates,
            function_definitions,
        }
    }
}


