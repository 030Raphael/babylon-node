/*
 * Babylon Core API - RCnet V2
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the first release candidate of the Radix Babylon network (\"RCnet-V1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// FeeSummary : Fees paid



#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct FeeSummary {
    /// The string-encoded decimal representing the XRD price of a single cost unit. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`. 
    #[serde(rename = "cost_unit_price")]
    pub cost_unit_price: String,
    /// An integer between `0` and `255`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.
    #[serde(rename = "tip_percentage")]
    pub tip_percentage: i32,
    /// An integer between `0` and `2^32 - 1`, representing the maximum amount of cost units available for the transaction execution.
    #[serde(rename = "cost_unit_limit")]
    pub cost_unit_limit: i64,
    /// An integer between `0` and `2^32 - 1`, representing the amount of cost units consumed by the transaction execution.
    #[serde(rename = "cost_units_consumed")]
    pub cost_units_consumed: i64,
    /// A breakdown of where the execution cost went. 
    #[serde(rename = "cost_unit_execution_breakdown")]
    pub cost_unit_execution_breakdown: ::std::collections::HashMap<String, i64>,
    /// The string-encoded decimal representing the total amount of XRD burned in the transaction as part of execution costs. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`. 
    #[serde(rename = "xrd_total_execution_cost")]
    pub xrd_total_execution_cost: String,
    /// The string-encoded decimal representing the total amount of XRD paid in royalties as part of the transaction. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`. 
    #[serde(rename = "xrd_total_royalty_cost")]
    pub xrd_total_royalty_cost: String,
    /// The string-encoded decimal representing the total amount of XRD tipped to validators in the transaction. A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(256 - 1) <= m < 2^(256 - 1)`. 
    #[serde(rename = "xrd_total_tipped")]
    pub xrd_total_tipped: String,
    /// A breakdown of which vaults were used to pay the fee. 
    #[serde(rename = "xrd_vault_payments")]
    pub xrd_vault_payments: Vec<crate::core_api::generated::models::VaultPayment>,
    /// A breakdown of where the royalties were paid to. 
    #[serde(rename = "xrd_royalty_receivers")]
    pub xrd_royalty_receivers: Vec<crate::core_api::generated::models::RoyaltyPayment>,
}

impl FeeSummary {
    /// Fees paid
    pub fn new(cost_unit_price: String, tip_percentage: i32, cost_unit_limit: i64, cost_units_consumed: i64, cost_unit_execution_breakdown: ::std::collections::HashMap<String, i64>, xrd_total_execution_cost: String, xrd_total_royalty_cost: String, xrd_total_tipped: String, xrd_vault_payments: Vec<crate::core_api::generated::models::VaultPayment>, xrd_royalty_receivers: Vec<crate::core_api::generated::models::RoyaltyPayment>) -> FeeSummary {
        FeeSummary {
            cost_unit_price,
            tip_percentage,
            cost_unit_limit,
            cost_units_consumed,
            cost_unit_execution_breakdown,
            xrd_total_execution_cost,
            xrd_total_royalty_cost,
            xrd_total_tipped,
            xrd_vault_payments,
            xrd_royalty_receivers,
        }
    }
}


