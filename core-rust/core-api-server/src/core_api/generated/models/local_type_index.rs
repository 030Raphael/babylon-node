/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct LocalTypeIndex {
    /// The location against which to resolve this type reference against a given schema. WellKnown indicates the index is a pointer to a well known scrypto type with that id. SchemaLocal indicates the index is a pointer into the given schema. 
    #[serde(rename = "kind")]
    pub kind: Kind,
    /// Either the well known identifier, of the schema-local index, depending on the kind. 
    #[serde(rename = "index")]
    pub index: i32,
}

impl LocalTypeIndex {
    pub fn new(kind: Kind, index: i32) -> LocalTypeIndex {
        LocalTypeIndex {
            kind,
            index,
        }
    }
}

/// The location against which to resolve this type reference against a given schema. WellKnown indicates the index is a pointer to a well known scrypto type with that id. SchemaLocal indicates the index is a pointer into the given schema. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, serde::Serialize, serde::Deserialize)]
pub enum Kind {
    #[serde(rename = "WellKnown")]
    WellKnown,
    #[serde(rename = "SchemaLocal")]
    SchemaLocal,
}

impl Default for Kind {
    fn default() -> Kind {
        Self::WellKnown
    }
}

