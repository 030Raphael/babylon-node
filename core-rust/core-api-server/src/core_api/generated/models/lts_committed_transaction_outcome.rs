/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct LtsCommittedTransactionOutcome {
    /// An integer between `1` and `10^13`, giving the resultant state version after the transaction has been committed
    #[serde(rename = "state_version")]
    pub state_version: i64,
    /// The hex-encoded transaction accumulator hash. This hash captures the order of all transactions on ledger. This hash is `ACC_{N+1} = Blake2b-256(CONCAT(ACC_N, LEDGER_HASH_{N}))`, starting with `ACC_0 = 000..000` the pre-genesis accumulator. 
    #[serde(rename = "accumulator_hash")]
    pub accumulator_hash: String,
    #[serde(rename = "status")]
    pub status: crate::core_api::generated::models::LtsCommittedTransactionStatus,
    /// A list containing all account fungible balance updates
    #[serde(rename = "fungible_entity_balance_changes")]
    pub fungible_entity_balance_changes: Vec<crate::core_api::generated::models::LtsEntityFungibleBalanceChanges>,
}

impl LtsCommittedTransactionOutcome {
    pub fn new(state_version: i64, accumulator_hash: String, status: crate::core_api::generated::models::LtsCommittedTransactionStatus, fungible_entity_balance_changes: Vec<crate::core_api::generated::models::LtsEntityFungibleBalanceChanges>) -> LtsCommittedTransactionOutcome {
        LtsCommittedTransactionOutcome {
            state_version,
            accumulator_hash,
            status,
            fungible_entity_balance_changes,
        }
    }
}


