/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// LtsStreamAccountTransactionsBasicOutcomesRequest : A request to retrieve a sublist of committed transactions from the ledger. 



#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct LtsStreamAccountTransactionsBasicOutcomesRequest {
    /// The logical name of the network
    #[serde(rename = "network")]
    pub network: String,
    /// The Bech32m-encoded human readable version of the account's address
    #[serde(rename = "account_address")]
    pub account_address: String,
    /// An integer between `1` and `10^13`, giving the first (resultant) state version to be returned
    #[serde(rename = "from_state_version")]
    pub from_state_version: i64,
    /// The maximum number of transactions that will be returned.
    #[serde(rename = "limit")]
    pub limit: i32,
}

impl LtsStreamAccountTransactionsBasicOutcomesRequest {
    /// A request to retrieve a sublist of committed transactions from the ledger. 
    pub fn new(network: String, account_address: String, from_state_version: i64, limit: i32) -> LtsStreamAccountTransactionsBasicOutcomesRequest {
        LtsStreamAccountTransactionsBasicOutcomesRequest {
            network,
            account_address,
            from_state_version,
            limit,
        }
    }
}


