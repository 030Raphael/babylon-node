/*
 * Babylon Core API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct ParsedNotarizedTransaction {
    #[serde(rename = "notarized_transaction", skip_serializing_if = "Option::is_none")]
    pub notarized_transaction: Option<Box<crate::core_api::generated::models::NotarizedTransaction>>,
    #[serde(rename = "identifiers")]
    pub identifiers: Box<crate::core_api::generated::models::ParsedNotarizedTransactionAllOfIdentifiers>,
    /// If the transaction is known to not be valid, this gives a reason. Different levels of validation are performed, dependent on the validation mode. Note that, even if validation mode is Static or Full, the transaction may still be rejected or fail due to issues at runtime (eg if the loan cannot be repaid). 
    #[serde(rename = "validation_error", skip_serializing_if = "Option::is_none")]
    pub validation_error: Option<String>,
    /// If the transaction is known to not be valid, for a static/permanent reason (eg not a valid format, or max epoch is before the current epoch). 
    #[serde(rename = "validation_error_is_permanent", skip_serializing_if = "Option::is_none")]
    pub validation_error_is_permanent: Option<bool>,
}

impl ParsedNotarizedTransaction {
    pub fn new(identifiers: crate::core_api::generated::models::ParsedNotarizedTransactionAllOfIdentifiers) -> ParsedNotarizedTransaction {
        ParsedNotarizedTransaction {
            notarized_transaction: None,
            identifiers: Box::new(identifiers),
            validation_error: None,
            validation_error_is_permanent: None,
        }
    }
}


