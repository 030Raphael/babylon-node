/*
 * Babylon Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct TransactionStatusResponse {
    #[serde(rename = "intent_status")]
    pub intent_status: crate::core_api::generated::models::TransactionIntentStatus,
    /// An explanation as to why the intent status is resolved as it is. 
    #[serde(rename = "status_description")]
    pub status_description: String,
    /// An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be permanently rejected. Only present if the intent status is InMempool or Unknown and we know about a payload. 
    #[serde(rename = "invalid_from_epoch", skip_serializing_if = "Option::is_none")]
    pub invalid_from_epoch: Option<i64>,
    #[serde(rename = "known_payloads")]
    pub known_payloads: Vec<crate::core_api::generated::models::TransactionPayloadStatus>,
}

impl TransactionStatusResponse {
    pub fn new(intent_status: crate::core_api::generated::models::TransactionIntentStatus, status_description: String, known_payloads: Vec<crate::core_api::generated::models::TransactionPayloadStatus>) -> TransactionStatusResponse {
        TransactionStatusResponse {
            intent_status,
            status_description,
            invalid_from_epoch: None,
            known_payloads,
        }
    }
}


