/*
 * Radix Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct TransactionValidationConfig {
    #[serde(rename = "max_signer_signatures_per_intent")]
    pub max_signer_signatures_per_intent: String,
    #[serde(rename = "max_references_per_intent")]
    pub max_references_per_intent: String,
    /// Only applies to V1 transactions
    #[serde(rename = "min_tip_percentage")]
    pub min_tip_percentage: i32,
    /// Only applies to V1 transactions
    #[serde(rename = "max_tip_percentage")]
    pub max_tip_percentage: i32,
    #[serde(rename = "max_epoch_range")]
    pub max_epoch_range: String,
    #[serde(rename = "max_instructions")]
    pub max_instructions: String,
    #[serde(rename = "message_validation")]
    pub message_validation: Box<crate::core_api::generated::models::MessageValidationConfig>,
    #[serde(rename = "v1_transactions_allow_notary_to_duplicate_signer")]
    pub v1_transactions_allow_notary_to_duplicate_signer: bool,
    #[serde(rename = "preparation_settings")]
    pub preparation_settings: Box<crate::core_api::generated::models::PreparationSettings>,
    #[serde(rename = "manifest_validation")]
    pub manifest_validation: crate::core_api::generated::models::ManifestValidationRuleset,
    #[serde(rename = "v2_transactions_allowed")]
    pub v2_transactions_allowed: bool,
    #[serde(rename = "min_tip_basis_points")]
    pub min_tip_basis_points: i64,
    #[serde(rename = "max_tip_basis_points")]
    pub max_tip_basis_points: i64,
    #[serde(rename = "max_subintent_depth")]
    pub max_subintent_depth: String,
    #[serde(rename = "max_total_signature_validations")]
    pub max_total_signature_validations: String,
    #[serde(rename = "max_total_references")]
    pub max_total_references: String,
}

impl TransactionValidationConfig {
    pub fn new(max_signer_signatures_per_intent: String, max_references_per_intent: String, min_tip_percentage: i32, max_tip_percentage: i32, max_epoch_range: String, max_instructions: String, message_validation: crate::core_api::generated::models::MessageValidationConfig, v1_transactions_allow_notary_to_duplicate_signer: bool, preparation_settings: crate::core_api::generated::models::PreparationSettings, manifest_validation: crate::core_api::generated::models::ManifestValidationRuleset, v2_transactions_allowed: bool, min_tip_basis_points: i64, max_tip_basis_points: i64, max_subintent_depth: String, max_total_signature_validations: String, max_total_references: String) -> TransactionValidationConfig {
        TransactionValidationConfig {
            max_signer_signatures_per_intent,
            max_references_per_intent,
            min_tip_percentage,
            max_tip_percentage,
            max_epoch_range,
            max_instructions,
            message_validation: Box::new(message_validation),
            v1_transactions_allow_notary_to_duplicate_signer,
            preparation_settings: Box::new(preparation_settings),
            manifest_validation,
            v2_transactions_allowed,
            min_tip_basis_points,
            max_tip_basis_points,
            max_subintent_depth,
            max_total_signature_validations,
            max_total_references,
        }
    }
}


