/*
 * Engine State API - Babylon (Anemone)
 *
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct LedgerHashes {
    /// The hex-encoded root hash of the state tree. This captures the current state of the state on the ledger. 
    #[serde(rename = "state_tree_hash")]
    pub state_tree_hash: String,
    /// The hex-encoded root hash of the transaction tree. This captures the ledger transactions committed to the ledger. 
    #[serde(rename = "transaction_tree_hash")]
    pub transaction_tree_hash: String,
    /// The hex-encoded root hash of the receipt tree. This captures the consensus-agreed output of each transaction on the ledger. 
    #[serde(rename = "receipt_tree_hash")]
    pub receipt_tree_hash: String,
}

impl LedgerHashes {
    pub fn new(state_tree_hash: String, transaction_tree_hash: String, receipt_tree_hash: String) -> LedgerHashes {
        LedgerHashes {
            state_tree_hash,
            transaction_tree_hash,
            receipt_tree_hash,
        }
    }
}


