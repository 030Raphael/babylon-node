openapi: 3.1.0

info:
  # Should be the release version, and the release display name
  version: 'v0.0.1'
  title: 'Engine State API'
  license:
    name: The Radix License, Version 1.0
    url: https://www.radixfoundation.org/licenses/license-v1
  x-logo:
    url: https://docs-babylon.radixdlt.com/main/_images/radix-logo-banner.png
    href: https://docs.radixdlt.com
  description: |
    This API provides a complete view of the current ledger state, operating at a relatively low
    level (i.e. returning Entities' data and type information in a generic way, without interpreting
    specifics of different native or custom components).
    
    It mirrors how the Radix Engine views the ledger state in its "System" layer, and thus can be
    useful for Scrypto developers, who need to inspect how the Engine models and stores their
    application's state, or how an interface / authentication scheme of another component looks
    like.

servers:
  - url: 'localhost:3337/engine-state'
tags:
  - name: Entities
    x-displayName: Entities
    description: Endpoints dealing with all Entities.
  - name: Objects
    x-displayName: Objects
    description: Endpoints dealing with Objects.
  - name: KvStores
    x-displayName: Key-Value Stores
    description: Endpoints dealing with Key-Value Stores.
  - name: Types
    x-displayName: Blueprints / Schemas
    description: Endpoints dealing with Blueprints and Schemas.

paths:
  "/entity/iterator":
    post:
      summary: List Entities
      description: Lists addresses of all entities, in an iterator-like paged fashion
      tags:
        - Entities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityIteratorRequest"
      responses:
        '200':
          description: A page of entity addresses.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityIteratorResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/blueprint/info":
    post:
      summary: Get Blueprint Info
      description: Returns all externally-relevant information about a particular blueprint.
      tags:
        - Types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlueprintInfoRequest"
      responses:
        '200':
          description: Information about the requested blueprint.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintInfoResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/entity/info":
    post:
      summary: Get Entity Info
      description: |
        Resolves basic information about an entity: its type, attached modules, fields/collections
        and blueprint.
      tags:
        - Entities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityInfoRequest"
      responses:
        '200':
          description: Meta-information about the requested entity's state.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityInfoResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/object/field":
    post:
      summary: Get Object Field
      description: |
        Reads the current value of an object's field, given an entity address, a module (`Main` by
        default) and either a field index or its human-readable name (if applicable).
      tags:
        - Objects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectFieldRequest"
      responses:
        '200':
          description: Current object field value
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectFieldResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/object/collection/iterator":
    post:
      summary: List Object Collection
      description: Lists keys of all entries from a particular object's collection, in an iterator-like paged fashion
      tags:
        - Objects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectCollectionIteratorRequest"
      responses:
        '200':
          description: A page of entry keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectCollectionIteratorResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/object/collection/entry":
    post:
      summary: Get Object Collection Entry
      description: |
        Reads the current value of a specific entry from an Object's Collection.
      tags:
        - Objects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObjectCollectionEntryRequest"
      responses:
        '200':
          description: Current value of the entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObjectCollectionEntryResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/kv-store/iterator":
    post:
      summary: List Key-Value Store
      description: Lists keys of all entries from a particular Key-Value Store, in an iterator-like paged fashion
      tags:
        - KvStores
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyValueStoreIteratorRequest"
      responses:
        '200':
          description: A page of map keys.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyValueStoreIteratorResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/kv-store/entry":
    post:
      summary: Get Key-Value Store Entry
      description: |
        Reads the current value of a specific entry from a Key-Value Store.
      tags:
        - KvStores
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyValueStoreEntryRequest"
      responses:
        '200':
          description: Current value of the entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyValueStoreEntryResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/entity/schema/entry":
    post:
      summary: Get Schema
      description: |
        Reads the contents of a specific schema associated with an entity.
      tags:
        - Types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntitySchemaEntryRequest"
      responses:
        '200':
          description: Schema contents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntitySchemaEntryResponse"
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

#############################################################################################
components:
  schemas:

###########################################################
# RESPONSE CONTROL                                        #
###########################################################
    SborFormatOptions:
      type: object
      description: Requested SBOR formats to include in the response.
      properties:
        raw:
          description: Whether to return the raw hex-encoded bytes (default false).
          type: boolean
        programmatic_json:
          description: Whether to return the Programmatic JSON (default true).
          type: boolean
    ContinuationToken:
      type: string
      description: |
        An opaque string conveying the information on where the next page of results starts.
        It is returned in every paged listing response (except for the last page), and it can be
        passed in every paged listing request (in order to begin listing from where the previous
        response ended).
    MaxPageSize:
      type: integer
      format: int32
      minimum: 1
      maximum: 1000
      description: |
        A maximum number of items to be included in the paged listing response.
        By default, each paged listing endpoint imposes its own limit on the number of returned
        items (which may even be driven dynamically by system load, etc). This client-provided
        maximum page size simply adds a further constraint (i.e. can only lower down the number
        of returned items).

###########################################################
# SHARED MODELS                                           #
###########################################################
    Decimal:
      type: string
      description: |
        A string-encoded fixed-precision decimal to 18 decimal places.
        A decimal is formed of some signed integer `m` of attos (`10^(-18)`) units, where `-2^(192 - 1) <= m < 2^(192 - 1)`.
    LedgerStateSummary:
      type: object
      required:
        - state_version
        - header_summary
      properties:
        state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The version at which the state was read.
        header_summary:
          $ref: "#/components/schemas/LedgerHeaderSummary"
          description: The excerpt from the ledger header committed at the `state_version`.
    LedgerHeaderSummary:
      type: object
      required:
        - epoch_round
        - ledger_hashes
        - proposer_timestamp
      properties:
        epoch_round:
          $ref: "#/components/schemas/EpochRound"
        ledger_hashes:
          $ref: "#/components/schemas/LedgerHashes"
        proposer_timestamp:
          $ref: '#/components/schemas/Instant'
    EpochRound:
      type: object
      required:
        - epoch
        - round
      properties:
        epoch:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: |
            An integer between `0` and `10^10`, marking the epoch.
            Only present if the rejection is temporary due to a header specifying a "from epoch" in the future.
        round:
          type: integer
          format: int64
          minimum: 0
          maximum: 10000000000
          description: An integer between `0` and `10^10`, marking the current round in an epoch
    LedgerHashes:
      type: object
      required:
        - state_tree_hash
        - transaction_tree_hash
        - receipt_tree_hash
      properties:
        state_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the state tree. This captures the current state of the state on the ledger.
        transaction_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the transaction tree. This captures the ledger transactions committed to the ledger.
        receipt_tree_hash:
          type: string
          minLength: 64
          maxLength: 64
          description: |
            The hex-encoded root hash of the receipt tree. This captures the consensus-agreed output of each transaction on the ledger.
    Instant:
      type: object
      required:
        - unix_timestamp_ms
        - date_time
      properties:
        unix_timestamp_ms:
          type: integer
          format: int64
          minimum: 0
          maximum: 100000000000000
          description: An integer between `0` and `10^14`, marking the unix timestamp, in milliseconds.
        date_time:
          type: string
          description: |
            The RFC 3339 / ISO 8601 string representation of the timestamp. Will always use "Z" denoting UTC and include milliseconds.
            EG: `2023-01-26T18:30:09.453Z`.
    StateVersion:
      type: integer
      format: int64
      minimum: 1
      maximum: 100000000000000
    SystemType:
      type: string
      enum:
        - Object
        - KeyValueStore
      description: |
        Determines whether an entity is an object or a key-value store.
        This categorization is introduced only for convenience / API discoverability (e.g. some
        endpoints are suited for working only with objects). In fact, the `SystemType` can also be
        derived from `EntityType`.
    EntityAddress:
      type: string
      description: A Bech32m-encoded, human readable rendering of an arbitrary Entity's address.
    PackageAddress:
      type: string
      description: A Bech32m-encoded, human readable rendering of a Package address.
    GlobalAddress:
      type: string
      description: A Bech32m-encoded, human readable rendering of any global Entity's address.
    ResourceAddress:
      type: string
      description: A Bech32m-encoded human readable version of a Resource address.
    SchemaHash:
      type: string
      minLength: 64
      maxLength: 64
      description: A hex-encoded Schema hash, capturing the identity of an SBOR schema.
    AttachedModuleId:
      type: string
      enum:
        - Metadata
        - Royalty
        - RoleAssignment
    EntityType:
      type: string
      enum:
        - GlobalPackage
        - GlobalConsensusManager
        - GlobalValidator
        - GlobalGenericComponent
        - GlobalAccount
        - GlobalIdentity
        - GlobalAccessController
        - GlobalVirtualSecp256k1Account
        - GlobalVirtualSecp256k1Identity
        - GlobalVirtualEd25519Account
        - GlobalVirtualEd25519Identity
        - GlobalFungibleResource
        - InternalFungibleVault
        - GlobalNonFungibleResource
        - InternalNonFungibleVault
        - InternalGenericComponent
        - InternalKeyValueStore
        - GlobalOneResourcePool
        - GlobalTwoResourcePool
        - GlobalMultiResourcePool
        - GlobalTransactionTracker
    GenericTypeParameterType:
      type: string
      enum:
        - Any
    GenericTypeParameter:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/GenericTypeParameterType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match GenericTypeParameterType
          Any: '#/components/schemas/AnyGenericTypeParameter'
    AnyGenericTypeParameter:
      allOf:
        - $ref: "#/components/schemas/GenericTypeParameter"
        - type: object
###########################################################
# ERROR SURFACING                                         #
###########################################################
    ErrorResponse:
      type: object
      required:
        - message
        - trace_id
      properties:
        message:
          description: A human-readable error message.
          type: string
        trace_id:
          description: A GUID to be used when reporting errors, to allow correlation with the server's error logs.
          type: string
        details:
          description: |
            Application-level error details.
            Will not be present for HTTP-level errors (e.g. HTTP 404).
          $ref: "#/components/schemas/ErrorDetails"
    ErrorType:
      type: string
      enum:
        - RequestedItemNotFound
        - RequestedItemInvalid
    ErrorDetails:
      type: object
      discriminator:
        propertyName: error_type
        mapping:
          # NOTE: These need to match ErrorResponseType
          RequestedItemNotFound: "#/components/schemas/RequestedItemNotFoundDetails"
          RequestedItemInvalid: "#/components/schemas/RequestedItemInvalidDetails"
      required:
        - error_type
      properties:
        error_type:
          $ref: "#/components/schemas/ErrorType"
    RequestedItemNotFoundDetails:
      allOf:
        - $ref: "#/components/schemas/ErrorDetails"
        - type: object
          required:
            - item_type
          properties:
            item_type:
              $ref: "#/components/schemas/RequestedItemType"
    RequestedItemInvalidDetails:
      allOf:
        - $ref: "#/components/schemas/ErrorDetails"
        - type: object
          required:
            - item_type
          properties:
            item_type:
              $ref: "#/components/schemas/RequestedItemType"
    RequestedItemType:
      type: string
      enum:
        - Blueprint
        - Schema
        - Entity
        - Module
        - Field
        - Collection
        - EntryKey

#########################################################
# REQUEST: /entity/iterator                             #
#########################################################
    EntityIteratorRequest:
      type: object
      properties:
        max_page_size:
          $ref: "#/components/schemas/MaxPageSize"
        continuation_token:
          $ref: "#/components/schemas/ContinuationToken"
    EntityIteratorResponse:
      type: object
      required:
        - at_ledger_state
        - page
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        page:
          type: array
          items:
            $ref: "#/components/schemas/ListedEntityItem"
          description: A page of entities. If this page is the last one, the `continuation_token` will be not be included.
        continuation_token:
          $ref: "#/components/schemas/ContinuationToken"
    ListedEntityItem:
      type: object
      required:
        - entity_address
        - system_type
        - entity_type
        - is_global
        - created_at_state_version
      properties:
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
        system_type:
          $ref: "#/components/schemas/SystemType"
        entity_type:
          $ref: "#/components/schemas/EntityType"
        is_global:
          type: boolean
          description: Whether the entity is a top-level root, or a child of some other entity.
        created_at_state_version:
          $ref: "#/components/schemas/StateVersion"
          description: The state version identifying the transaction which created this entity.
        blueprint:
          $ref: "#/components/schemas/UnversionedBlueprintReference"
          description: |
            The blueprint used to instantiate this entity (disregarding the blueprint's exact version).
            In practice, it can only be present when `system_type: Object`.
    UnversionedBlueprintReference:
      type: object
      required:
        - package_address
        - blueprint_name
      properties:
        package_address:
          $ref: '#/components/schemas/PackageAddress'
        blueprint_name:
          type: string
#########################################################
# REQUEST: /entity/info                                 #
#########################################################
    EntityInfoRequest:
      type: object
      required:
        - entity_address
      properties:
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
    EntityInfoResponse:
      type: object
      required:
        - at_ledger_state
        - info
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        info:
          $ref: "#/components/schemas/EntityInfo"
    EntityAncestryInfo:
      type: object
      description: |
        Information about the ancestor entities - i.e. the immediate parent, and the root entity.
        Only present when the subject entity is not a root entity itself.
      required:
        - parent_entity_address
        - root_entity_address
      properties:
        parent_entity_address:
          $ref: "#/components/schemas/EntityAddress"
        root_entity_address:
          $ref: "#/components/schemas/GlobalAddress"
    EntityInfo:
      type: object
      required:
        - system_type
      properties:
        system_type:
          $ref: "#/components/schemas/SystemType"
        ancestry:
          $ref: "#/components/schemas/EntityAncestryInfo"
      discriminator:
        propertyName: system_type
        mapping:
          # NOTE: These need to match SystemType
          Object: '#/components/schemas/ObjectEntityInfo'
          KeyValueStore: '#/components/schemas/KeyValueStoreEntityInfo'
    ObjectEntityInfo:
      allOf:
        - $ref: "#/components/schemas/EntityInfo"
        - type: object
          description: Information available when the entity is an Object.
          required:
            - entity_type
            - is_global
            - is_instantiated
            - main_module_state
            - attached_modules
            - blueprint_reference
            - instance_info
          properties:
            entity_type:
              $ref: "#/components/schemas/EntityType"
            is_global:
              type: boolean
              description: Whether the object is a top-level root, or a child of some other entity.
            is_instantiated:
              type: boolean
              description: Whether the object's state is already physically persisted on ledger.
            main_module_state:
              $ref: "#/components/schemas/ObjectModuleStateInfo"
            attached_modules:
              description: |
                Information about the other modules attached to the object (possibly empty, even
                when `is_global`).
              type: array
              items:
                type: object
                required:
                  - attached_module_id
                  - state
                properties:
                  attached_module_id:
                    $ref: "#/components/schemas/AttachedModuleId"
                  state:
                    $ref: "#/components/schemas/ObjectModuleStateInfo"
            blueprint_reference:
              $ref: '#/components/schemas/BlueprintReference'
            instance_info:
              $ref: '#/components/schemas/ObjectInstanceInfo'
    KeyValueStoreEntityInfo:
      allOf:
        - $ref: "#/components/schemas/EntityInfo"
        - type: object
          description: Information available when the entity is a Key-Value Store.
          required:
            - key_type_reference
            - value_type_reference
          properties:
            key_type_reference:
              $ref: "#/components/schemas/ResolvedTypeReference"
            value_type_reference:
              $ref: "#/components/schemas/ResolvedTypeReference"
    ObjectModuleStateInfo:
      description: |
        Information about the state held by a particular module of the object.
      type: object
      required:
        - fields
        - collections
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/ObjectFieldInfo"
        collections:
          type: array
          items:
            $ref: "#/components/schemas/ObjectCollectionInfo"
    ObjectFieldInfo:
      type: object
      required:
        - index
        - type_reference
      properties:
        index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: |
            Field's index - please note that it will not necessarily be equal to an index of this
            item within `ObjectModuleStateInfo.fields` (since e.g. not all conditional fields
            defined by the blueprint must be present for the object).
        name:
          $ref: "#/components/schemas/DerivedName"
        type_reference:
          $ref: "#/components/schemas/ResolvedTypeReference"
    ObjectCollectionInfo:
      type: object
      required:
        - index
        - kind
        - key_type_reference
        - value_type_reference
      properties:
        index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: |
            Collection's index - please note that it will not necessarily be equal to an index of
            this item within `ObjectModuleStateInfo.collections`.
        kind:
          $ref: "#/components/schemas/ObjectCollectionKind"
        name:
          $ref: "#/components/schemas/DerivedName"
        key_type_reference:
          $ref: "#/components/schemas/ResolvedTypeReference"
        value_type_reference:
          $ref: "#/components/schemas/ResolvedTypeReference"
    ObjectCollectionKind:
      description: One of supported kinds of collections within an Object.
      type: string
      enum:
        - KeyValueStore
        - Index
        - SortedIndex
    ResolvedTypeReferenceType:
      type: string
      enum:
        - WellKnown
        - SchemaDefined
    ResolvedTypeReference:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/ResolvedTypeReferenceType"
        name:
          $ref: "#/components/schemas/DerivedName"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ResolvedTypeReferenceType
          WellKnown: '#/components/schemas/WellKnownTypeReference'
          SchemaDefined: '#/components/schemas/SchemaDefinedTypeReference'
    WellKnownTypeReference:
      description: Reference to a well-known Scrypto type.
      allOf:
        - $ref: "#/components/schemas/ResolvedTypeReference"
        - type: object
          required:
            - index
          properties:
            index:
              type: integer
              format: int64
              minimum: 0
              maximum: 4294967295
              description: An effective ID of the well-known type.
    SchemaDefinedTypeReference:
      description: Reference to a fully-resolved type within a specific schema.
      allOf:
        - $ref: "#/components/schemas/ResolvedTypeReference"
        - type: object
          required:
            - schema_reference
            - index
          properties:
            schema_reference:
              $ref: "#/components/schemas/SchemaReference"
            index:
              type: integer
              format: int64
              minimum: 0
              maximum: 4294967295
              description: The type's index within the referenced schema.
    SchemaReference:
      description: A reference to a schema within the Schema partition of a specific entity.
      type: object
      required:
        - entity_address
        - schema_hash
      properties:
        entity_address:
          $ref: '#/components/schemas/EntityAddress'
        schema_hash:
          $ref: '#/components/schemas/SchemaHash'
    DerivedName:
      type: string
      description: |
        A human-readable name, derived on a best-effort basis from the type info/blueprint/schema.
        May be missing either because the subject deliberately has no defined name (e.g. in case of
        an unnamed tuple) or because the name resolution was not successful (e.g. when certain
        naming conventions are not observed within the relevant definitions).
    BlueprintReference:
      type: object
      required:
        - package_address
        - blueprint_name
        - blueprint_version
      properties:
        package_address:
          $ref: '#/components/schemas/PackageAddress'
        blueprint_name:
          type: string
        blueprint_version:
          type: string
          description: A string of format `Major.Minor.Patch` (all parts being `u32`).
    ObjectInstanceInfo:
      type: object
      description: |
        Object's metadata details defined on a per-instance basis (i.e. not in blueprint).
        Please note that even uninstantiated objects do have instance info (i.e. a default one).
      required:
        - enabled_features
        - substituted_generic_types
      properties:
        outer_object_address:
          $ref: '#/components/schemas/GlobalAddress'
        enabled_features:
          type: array
          description: Names of the features enabled for this instance.
          items:
            type: string
        substituted_generic_types:
          type: array
          description: The actual types used for generics defined by the blueprint.
          items:
            $ref: "#/components/schemas/ResolvedTypeReference"
#########################################################
# REQUEST: /blueprint/info                              #
#########################################################
    BlueprintInfoRequest:
      type: object
      required:
        - package_address
        - blueprint_name
      properties:
        package_address:
          $ref: "#/components/schemas/PackageAddress"
        blueprint_name:
          type: string
        blueprint_version:
          type: string
          description: |
            A string of format `Major.Minor.Patch` (all parts being `u32`). Defaults to `1.0.0`.
    BlueprintInfoResponse:
      type: object
      required:
        - at_ledger_state
        - info
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        info:
          $ref: "#/components/schemas/DetailedBlueprintInfo"
    DetailedBlueprintInfo:
      type: object
      required:
        - is_transient
        - generic_type_parameters
        - available_features
        - fields
        - collections
        - functions
        - methods
        - roles
        - events
        - named_types
      properties:
        outer_blueprint_name:
          type: string
          description: |
            A name of the outer blueprint within the same package.
            Only present if this one is an inner blueprint.
        is_transient:
          type: boolean
          description: If true, an instantiation of this blueprint cannot be persisted (e.g. buckets and proofs are transient).
        generic_type_parameters:
          description: |
            Generic type parameters which need to be substituted by an object (when instantiating this blueprint).
            See `ObjectInstanceInfo.substituted_generic_types`.
          type: array
          items:
            $ref: '#/components/schemas/GenericTypeParameter'
        available_features:
          description: |
            Names of the features that can be enabled for an object (when instantiating this blueprint).
            See `ObjectInstanceInfo.enabled_features`.
          type: array
          items:
            type: string
        fields:
          description: Fields defined by this blueprint.
          type: array
          items:
            $ref: '#/components/schemas/BlueprintFieldInfo'
        collections:
          description: Collections defined by this blueprint.
          type: array
          items:
            $ref: '#/components/schemas/BlueprintCollectionInfo'
        functions:
          description: Functions defined by this blueprint.
          type: array
          items:
            $ref: '#/components/schemas/BlueprintFunctionInfo'
        methods:
          description: Methods defined by this blueprint.
          type: array
          items:
            $ref: '#/components/schemas/BlueprintMethodInfo'
        roles:
          $ref: '#/components/schemas/BlueprintRolesDefinition'
        events:
          description: Events defined by this blueprint.
          type: array
          items:
            $ref: '#/components/schemas/BlueprintEventInfo'
        named_types:
          description: Named types defined by this blueprint.
          type: array
          items:
            $ref: '#/components/schemas/BlueprintNamedTypeInfo'
    BlueprintNamedTypeInfo:
      type: object
      required:
        - name
        - type_reference
      properties:
        name:
          type: string
        type_reference:
          $ref: "#/components/schemas/ResolvedTypeReference"
    BlueprintEventInfo:
      type: object
      required:
        - name
        - type_reference
      properties:
        name:
          type: string
        type_reference:
          $ref: "#/components/schemas/BlueprintResolvedTypeReference"
    BlueprintFunctionInfo:
      type: object
      required:
        - name
        - input_type_reference
        - output_type_reference
        - authorization
      properties:
        name:
          type: string
        input_type_reference:
          $ref: "#/components/schemas/BlueprintResolvedTypeReference"
        output_type_reference:
          $ref: "#/components/schemas/BlueprintResolvedTypeReference"
        authorization:
          $ref: "#/components/schemas/BlueprintFunctionAuthorization"
    BlueprintFunctionAuthorizationType:
      type: string
      enum:
        - Public
        - ByAccessRule
        - RootOnly
    BlueprintFunctionAuthorization:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/BlueprintFunctionAuthorizationType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match BlueprintFunctionAuthorizationType options
          Public: '#/components/schemas/PublicBlueprintFunctionAuthorization'
          ByAccessRule: '#/components/schemas/ByAccessRuleBlueprintFunctionAuthorization'
          RootOnly: '#/components/schemas/RootOnlyBlueprintFunctionAuthorization'
    ByAccessRuleBlueprintFunctionAuthorization:
      allOf:
        - $ref: "#/components/schemas/BlueprintFunctionAuthorization"
        - type: object
          required:
            - rule
          properties:
            rule:
              $ref: "#/components/schemas/AccessRule"
    PublicBlueprintFunctionAuthorization:
      allOf:
        - $ref: "#/components/schemas/BlueprintFunctionAuthorization"
        - type: object
          description: All callers have access.
    RootOnlyBlueprintFunctionAuthorization:
      allOf:
        - $ref: "#/components/schemas/BlueprintFunctionAuthorization"
        - type: object
          description: Only the root call frame has access.
    AccessRuleType:
      type: string
      enum:
        - Protected
        - AllowAll
        - DenyAll
    AccessRule:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/AccessRuleType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match AccessRuleType options above
          Protected: '#/components/schemas/ProtectedAccessRule'
          AllowAll: '#/components/schemas/AllowAllAccessRule'
          DenyAll: '#/components/schemas/DenyAllAccessRule'
    ProtectedAccessRule:
      allOf:
        - $ref: '#/components/schemas/AccessRule'
        - type: object
          required:
            - access_rule
          properties:
            access_rule:
              $ref: '#/components/schemas/AccessRuleNode'
    AllowAllAccessRule:
      allOf:
        - $ref: '#/components/schemas/AccessRule'
        - type: object
    DenyAllAccessRule:
      allOf:
        - $ref: '#/components/schemas/AccessRule'
        - type: object
    AccessRuleNodeType:
      type: string
      enum:
        - ProofRule
        - AnyOf
        - AllOf
    AccessRuleNode:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/AccessRuleNodeType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match AccessRuleNodeType options above
          ProofRule: '#/components/schemas/ProofAccessRuleNode'
          AnyOf: '#/components/schemas/AnyOfAccessRuleNode'
          AllOf: '#/components/schemas/AllOfAccessRuleNode'
    ProofAccessRuleNode:
      allOf:
        - $ref: '#/components/schemas/AccessRuleNode'
        - type: object
          required:
            - proof_rule
          properties:
            proof_rule:
              $ref: '#/components/schemas/ProofRule'
    AnyOfAccessRuleNode:
      allOf:
        - $ref: '#/components/schemas/AccessRuleNode'
        - type: object
          required:
            - access_rules
          properties:
            access_rules:
              type: array
              items:
                $ref: '#/components/schemas/AccessRuleNode'
    AllOfAccessRuleNode:
      allOf:
        - $ref: '#/components/schemas/AccessRuleNode'
        - type: object
          required:
            - access_rules
          properties:
            access_rules:
              type: array
              items:
                $ref: '#/components/schemas/AccessRuleNode'
    ProofRuleType:
      type: string
      enum:
        - Require
        - AmountOf
        - AllOf
        - AnyOf
        - CountOf
    ProofRule:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ProofRuleType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match ProofRuleType options above
          Require: '#/components/schemas/RequireProofRule'
          AmountOf: '#/components/schemas/AmountOfProofRule'
          AllOf: '#/components/schemas/AllOfProofRule'
          AnyOf: '#/components/schemas/AnyOfProofRule'
          CountOf: '#/components/schemas/CountOfProofRule'
    RequireProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - requirement
          properties:
            requirement:
              $ref: '#/components/schemas/Requirement'
    AmountOfProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - amount
            - resource
          properties:
            amount:
              type: string
            resource:
              $ref: '#/components/schemas/ResourceAddress'
    AllOfProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - list
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
    AnyOfProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - list
          properties:
            list:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
    CountOfProofRule:
      allOf:
        - $ref: '#/components/schemas/ProofRule'
        - type: object
          required:
            - count
            - list
          properties:
            count:
              type: integer
            list:
              type: array
              items:
                $ref: '#/components/schemas/Requirement'
    Requirement:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/RequirementType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match RequirementType options below
          Resource: '#/components/schemas/ResourceRequirement'
          NonFungible: '#/components/schemas/NonFungibleRequirement'
    RequirementType:
      type: string
      enum:
        - Resource
        - NonFungible
    ResourceRequirement:
      allOf:
        - $ref: '#/components/schemas/Requirement'
        - type: object
          required:
            - resource
          properties:
            resource:
              $ref: '#/components/schemas/ResourceAddress'
    NonFungibleRequirement:
      allOf:
        - $ref: '#/components/schemas/Requirement'
        - type: object
          required:
            - non_fungible
          properties:
            non_fungible:
              $ref: '#/components/schemas/NonFungibleGlobalId'
    NonFungibleGlobalId:
      type: object
      required:
        - resource_address
        - local_id
      properties:
        resource_address:
          $ref: "#/components/schemas/ResourceAddress"
        local_id:
          $ref: "#/components/schemas/NonFungibleLocalId"
    NonFungibleLocalId:
      type: string
      description: |
        A simple string representation of a non-fungible local ID, with a type-dependent formatting:
        * For string ids, this is `<the-string-id>`
        * For integer ids, this is `#the-integer-id#`
        * For bytes ids, this is `[the-lower-case-hex-representation]`
        * For RUID ids, this is `{...-...-...-...}` where `...` are each 16 hex characters.
    BlueprintMethodInfo:
      type: object
      required:
        - name
        - receiver
        - input_type_reference
        - output_type_reference
        - authorization
      properties:
        name:
          type: string
        receiver:
          $ref: "#/components/schemas/BlueprintMethodReceiverInfo"
        input_type_reference:
          $ref: "#/components/schemas/BlueprintResolvedTypeReference"
        output_type_reference:
          $ref: "#/components/schemas/BlueprintResolvedTypeReference"
        authorization:
          $ref: "#/components/schemas/BlueprintMethodAuthorization"
    BlueprintMethodReceiverInfo:
      type: object
      required:
        - receiver_type
        - reference_types
      properties:
        receiver_type:
          $ref: "#/components/schemas/MethodReceiverType"
        reference_types:
          type: array
          items:
            $ref: "#/components/schemas/MethodReceiverReferenceType"
    MethodReceiverType:
      type: string
      enum:
        - SelfRef
        - SelfRefMut
    MethodReceiverReferenceType:
      type: string
      enum:
        - Normal
        - DirectAccess
    BlueprintMethodAuthorizationType:
      type: string
      enum:
        - Public
        - ByRoles
        - OuterObjectOnly
        - OwnPackageOnly
    BlueprintMethodAuthorization:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/BlueprintMethodAuthorizationType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match BlueprintMethodAuthorizationType options
          Public: '#/components/schemas/PublicBlueprintMethodAuthorization'
          ByRoles: '#/components/schemas/ByRolesBlueprintMethodAuthorization'
          OuterObjectOnly: '#/components/schemas/OuterObjectOnlyBlueprintMethodAuthorization'
          OwnPackageOnly: '#/components/schemas/OwnPackageOnlyBlueprintMethodAuthorization'
    ByRolesBlueprintMethodAuthorization:
      allOf:
        - $ref: "#/components/schemas/BlueprintMethodAuthorization"
        - type: object
          description: Only the listed roles have access.
          required:
            - role_keys
          properties:
            role_keys:
              type: array
              items:
                type: string
    PublicBlueprintMethodAuthorization:
      allOf:
        - $ref: "#/components/schemas/BlueprintMethodAuthorization"
        - type: object
          description: All callers have access.
    OuterObjectOnlyBlueprintMethodAuthorization:
      allOf:
        - $ref: "#/components/schemas/BlueprintMethodAuthorization"
        - type: object
          description: Only outer objects have access.
    OwnPackageOnlyBlueprintMethodAuthorization:
      allOf:
        - $ref: "#/components/schemas/BlueprintMethodAuthorization"
        - type: object
          description: Only the package this method is a part of has access.
    BlueprintRolesDefinitionType:
      type: string
      enum:
        - Local
        - Outer
    BlueprintRolesDefinition:
      type: object
      description: Blueprint's definition of authorization roles.
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/BlueprintRolesDefinitionType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match BlueprintRolesDefinitionType options
          Local: '#/components/schemas/LocalBlueprintRolesDefinition'
          Outer: '#/components/schemas/OuterBlueprintRolesDefinition'
    LocalBlueprintRolesDefinition:
      allOf:
        - $ref: "#/components/schemas/BlueprintRolesDefinition"
        - type: object
          description: Roles are specified by the blueprint.
          required:
            - definitions
          properties:
            definitions:
              type: array
              items:
                $ref: "#/components/schemas/BlueprintRoleInfo"
    OuterBlueprintRolesDefinition:
      allOf:
        - $ref: "#/components/schemas/BlueprintRolesDefinition"
        - type: object
          description: |
            Roles are specified in the outer blueprint and defined in the instantiated outer object.
    BlueprintRoleInfo:
      type: object
      required:
        - key
        - updater_role_keys
      properties:
        key:
          type: string
          description: Identifier of a role.
        updater_role_keys:
          type: array
          items:
            type: string
            description: Identifiers of roles authorized to update this role.
    BlueprintCollectionInfo:
      type: object
      required:
        - index
        - kind
        - key_type_reference
        - value_type_reference
      properties:
        index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        name:
          $ref: "#/components/schemas/DerivedName"
        kind:
          $ref: "#/components/schemas/ObjectCollectionKind"
        key_type_reference:
          $ref: "#/components/schemas/BlueprintResolvedTypeReference"
        value_type_reference:
          $ref: "#/components/schemas/BlueprintResolvedTypeReference"
    BlueprintFieldInfo:
      type: object
      required:
        - index
        - type_reference
      properties:
        index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
        name:
          $ref: "#/components/schemas/DerivedName"
        type_reference:
          $ref: "#/components/schemas/BlueprintResolvedTypeReference"
        condition:
          $ref: "#/components/schemas/BlueprintFieldCondition"
        transience:
          $ref: "#/components/schemas/BlueprintFieldTransience"
    BlueprintFieldTransience:
      type: object
      description: Properties related to the field's transience. Only present if the field is transient.
      required:
        - default_value
      properties:
        default_value:
          $ref: '#/components/schemas/BlueprintFieldTransienceDefaultValue'
    BlueprintFieldTransienceDefaultValue:
      type: object
      required:
        - programmatic_json
      properties:
        programmatic_json:
          type: object
    BlueprintFieldConditionType:
      type: string
      enum:
        - IfOwnFeature
        - IfOuterObjectFeature
    BlueprintFieldCondition:
      type: object
      description: |
        A condition under which the field will actually be present on an object (when instantiating this blueprint).
        If not specified, the field is always present (unconditionally).
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/BlueprintFieldConditionType'
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match BlueprintFieldConditionType options
          IfOwnFeature: '#/components/schemas/IfOwnFeatureFieldCondition'
          IfOuterObjectFeature: '#/components/schemas/IfOuterObjectFeatureFieldCondition'
    IfOwnFeatureFieldCondition:
      allOf:
        - $ref: "#/components/schemas/BlueprintFieldCondition"
        - type: object
          required:
            - feature_name
          properties:
            feature_name:
              type: string
    IfOuterObjectFeatureFieldCondition:
      allOf:
        - $ref: "#/components/schemas/BlueprintFieldCondition"
        - type: object
          required:
            - feature_name
          properties:
            feature_name:
              type: string
    BlueprintResolvedTypeReferenceType:
      type: string
      enum:
        - Static
        - Generic
    BlueprintResolvedTypeReference:
      type: object
      description: |
        A type, as declared by a blueprint - which means that it may either be a static, fully-resolved
        type reference, or one of the blueprint's generic type parameters.
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/BlueprintResolvedTypeReferenceType"
      discriminator:
        propertyName: type
        mapping:
          # NOTE: These need to match BlueprintResolvedTypeReferenceType
          Static: '#/components/schemas/BlueprintStaticTypeReference'
          Generic: '#/components/schemas/BlueprintGenericTypeReference'
    BlueprintStaticTypeReference:
      allOf:
        - $ref: "#/components/schemas/BlueprintResolvedTypeReference"
        - type: object
          required:
            - static_type_reference
          properties:
            static_type_reference:
              $ref: "#/components/schemas/ResolvedTypeReference"
    BlueprintGenericTypeReference:
      allOf:
        - $ref: "#/components/schemas/BlueprintResolvedTypeReference"
        - type: object
          required:
            - generic_type_parameter_index
          properties:
            generic_type_parameter_index:
              type: integer
              format: int32
              minimum: 0
              maximum: 255
              description: An index within `DetailedBlueprintInfo.generic_type_parameters`.
#########################################################
# REQUEST: /object/field                                #
#########################################################
    ObjectFieldRequest:
      type: object
      required:
        - entity_address
        # additionally, either `field_name` or `field_index` is required, but hard to make it work with code generator
      properties:
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
        attached_module_id:
          description: |
            Attached Module ID; should only be specified when reading a field of some attached module.
            Should be skipped to read the Object's own field.
          $ref: "#/components/schemas/AttachedModuleId"
        field_name:
          type: string
          description: |
            Name of the field to read. Either this or `field_index` is required.
            Note: getting a field by name is only a convenience feature, meant for manual, ad-hoc
            requests (i.e. allowing a human to use the human-readable `DerivedName` when available).
            In general, a field's primary identifier is its index, and any production-grade
            integration should use it.
        field_index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: Index of the field to read. Either this or `field_name` is required.
    ObjectFieldResponse:
      type: object
      required:
        - at_ledger_state
        - content
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        content:
          type: object
          description: The requested field's value.
          required:
            - programmatic_json
          properties:
            programmatic_json:
              type: object
#########################################################
# REQUEST: /object/collection/iterator                  #
#########################################################
    ObjectCollectionIteratorRequest:
      type: object
      required:
        - entity_address
        # additionally, either `collection_name` or `collection_index` is required, but hard to make it work with code generator
      properties:
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
        attached_module_id:
          description: |
            Attached Module ID; should only be specified when reading a collection of some attached module.
            Should be skipped to read the Object's own collection.
          $ref: "#/components/schemas/AttachedModuleId"
        collection_name:
          type: string
          description: |
            Name of the collection to read. Either this or `collection_index` is required.
            Note: getting a collection by name is only a convenience feature, meant for manual,
            ad-hoc requests (i.e. allowing a human to use the human-readable `DerivedName` when
            available).
            In general, a collection's primary identifier is its index, and any production-grade
            integration should use it.
        collection_index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: Index of the collection to read. Either this or `collection_name` is required.
        max_page_size:
          $ref: "#/components/schemas/MaxPageSize"
        continuation_token:
          $ref: "#/components/schemas/ContinuationToken"
    ObjectCollectionIteratorResponse:
      type: object
      required:
        - at_ledger_state
        - page
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        page:
          type: array
          items:
            $ref: "#/components/schemas/CollectionEntryKey"
          description: A page of entry keys. If this page is the last one, the `continuation_token` will be not be included.
        continuation_token:
          $ref: "#/components/schemas/ContinuationToken"
    CollectionEntryKey:
      type: object
      required:
        - kind
      properties:
        kind:
          $ref: "#/components/schemas/ObjectCollectionKind"
      discriminator:
        propertyName: kind
        mapping:
          # NOTE: These need to match ObjectCollectionKind
          KeyValueStore: '#/components/schemas/KeyValueStoreEntryKey'
          Index: '#/components/schemas/IndexEntryKey'
          SortedIndex: '#/components/schemas/SortedIndexEntryKey'
    KeyValueStoreEntryKey:
      description: Key within an Object's Key-Value Store collection.
      allOf:
        - $ref: "#/components/schemas/CollectionEntryKey"
        - type: object
          required:
            - programmatic_json
          properties:
            programmatic_json:
              type: object
    IndexEntryKey:
      description: Key within an Object's Index collection.
      allOf:
        - $ref: "#/components/schemas/CollectionEntryKey"
        - type: object
          required:
            - programmatic_json
          properties:
            programmatic_json:
              type: object
    SortedIndexEntryKey:
      description: Key within an Object's Sorted Index collection.
      allOf:
        - $ref: "#/components/schemas/CollectionEntryKey"
        - type: object
          required:
            - sort_prefix_hex
            - programmatic_json
          properties:
            sort_prefix_hex:
              type: string
              description: The hex-encoded bytes of the sorted part of the key.
            programmatic_json:
              type: object
#########################################################
# REQUEST: /object/collection/entry                     #
#########################################################
    ObjectCollectionEntryRequest:
      type: object
      required:
        - entity_address
        # additionally, either `collection_name` or `collection_index` is required, but hard to make it work with code generator
        - key
      properties:
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
        attached_module_id:
          description: |
            Attached Module ID; should only be specified when reading a collection of some attached module.
            Should be skipped to read the Object's own collection.
          $ref: "#/components/schemas/AttachedModuleId"
        collection_name:
          type: string
          description: |
            Name of the collection to read. Either this or `collection_index` is required.
            Note: getting a collection by name is only a convenience feature, meant for manual,
            ad-hoc requests (i.e. allowing a human to use the human-readable `DerivedName` when
            available).
            In general, a collection's primary identifier is its index, and any production-grade
            integration should use it.
        collection_index:
          type: integer
          format: int32
          minimum: 0
          maximum: 255
          description: Index of the collection to read. Either this or `collection_name` is required.
        key:
          $ref: "#/components/schemas/CollectionEntryKey"
          description: The key to look up the entry by.
    ObjectCollectionEntryResponse:
      type: object
      required:
        - at_ledger_state
        - content
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        content:
          type: object
          description: The requested Object Collection entry's value.
          required:
            - programmatic_json
          properties:
            programmatic_json:
              type: object
#########################################################
# REQUEST: /kv-store/iterator                           #
#########################################################
    KeyValueStoreIteratorRequest:
      type: object
      required:
        - entity_address
      properties:
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
        max_page_size:
          $ref: "#/components/schemas/MaxPageSize"
        continuation_token:
          $ref: "#/components/schemas/ContinuationToken"
    KeyValueStoreIteratorResponse:
      type: object
      required:
        - at_ledger_state
        - page
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        page:
          type: array
          items:
            $ref: "#/components/schemas/KeyValueStoreMapKey"
          description: A page of map keys. If this page is the last one, the `continuation_token` will be not be included.
        continuation_token:
          $ref: "#/components/schemas/ContinuationToken"
    KeyValueStoreMapKey:
      type: object
      required:
        - programmatic_json
      properties:
        programmatic_json:
          type: object
#########################################################
# REQUEST: /kv-store/entry                              #
#########################################################
    KeyValueStoreEntryRequest:
      type: object
      required:
        - entity_address
        - key
      properties:
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
        key:
          $ref: "#/components/schemas/KeyValueStoreMapKey"
          description: The key to look up the entry by.
    KeyValueStoreEntryResponse:
      type: object
      required:
        - at_ledger_state
        - content
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        content:
          type: object
          description: The requested Key-Value Store entry's value.
          required:
            - programmatic_json
          properties:
            programmatic_json:
              type: object
#########################################################
# REQUEST: /entity/schema/entry                         #
#########################################################
    EntitySchemaEntryRequest:
      type: object
      required:
        - entity_address
        - schema_hash
      properties:
        entity_address:
          $ref: "#/components/schemas/EntityAddress"
        schema_hash:
          $ref: '#/components/schemas/SchemaHash'
    EntitySchemaEntryResponse:
      type: object
      required:
        - at_ledger_state
        - content
      properties:
        at_ledger_state:
          $ref: "#/components/schemas/LedgerStateSummary"
          description: A summarized state of the ledger at which the query was performed.
        content:
          type: object
          description: The requested schema's value.
          required:
            - programmatic_json
          properties:
            programmatic_json:
              type: object
