/*
 * Engine State API
 *
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EntityAncestryInfo : Information about the ancestor entities - i.e. the immediate parent, and the root entity. Only present when the subject entity is not a root entity itself. 



#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct EntityAncestryInfo {
    /// A Bech32m-encoded, human readable rendering of an arbitrary Entity's address.
    #[serde(rename = "parent_entity_address")]
    pub parent_entity_address: String,
    /// A Bech32m-encoded, human readable rendering of any global Entity's address.
    #[serde(rename = "root_entity_address")]
    pub root_entity_address: String,
}

impl EntityAncestryInfo {
    /// Information about the ancestor entities - i.e. the immediate parent, and the root entity. Only present when the subject entity is not a root entity itself. 
    pub fn new(parent_entity_address: String, root_entity_address: String) -> EntityAncestryInfo {
        EntityAncestryInfo {
            parent_entity_address,
            root_entity_address,
        }
    }
}


