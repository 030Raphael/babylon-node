/*
 * Engine State API
 *
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, serde::Serialize, serde::Deserialize)]
pub struct ObjectCollectionEntryRequest {
    /// A Bech32m-encoded, human readable rendering of an arbitrary Entity's address.
    #[serde(rename = "entity_address")]
    pub entity_address: String,
    #[serde(rename = "attached_module_id", skip_serializing_if = "Option::is_none")]
    pub attached_module_id: Option<crate::engine_state_api::generated::models::AttachedModuleId>,
    /// Name of the collection to read. Either this or `collection_index` is required. Note: getting a collection by name is only a convenience feature, meant for manual, ad-hoc requests (i.e. allowing a human to use the human-readable `DerivedName` when available). In general, a collection's primary identifier is its index, and any production-grade integration should use it. 
    #[serde(rename = "collection_name", skip_serializing_if = "Option::is_none")]
    pub collection_name: Option<String>,
    /// Index of the collection to read. Either this or `collection_name` is required.
    #[serde(rename = "collection_index", skip_serializing_if = "Option::is_none")]
    pub collection_index: Option<i32>,
    #[serde(rename = "key")]
    pub key: Option<crate::engine_state_api::generated::models::CollectionEntryKey>, // Using Option permits Default trait; Will always be Some in normal use
}

impl ObjectCollectionEntryRequest {
    pub fn new(entity_address: String, key: crate::engine_state_api::generated::models::CollectionEntryKey) -> ObjectCollectionEntryRequest {
        ObjectCollectionEntryRequest {
            entity_address,
            attached_module_id: None,
            collection_name: None,
            collection_index: None,
            key: Option::Some(key),
        }
    }
}


