/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.CoreErrorDetails;
import com.radixdlt.api.core.generated.models.InternalServerError;
import com.radixdlt.api.core.generated.models.InvalidHexError;
import com.radixdlt.api.core.generated.models.InvalidJsonError;
import com.radixdlt.api.core.generated.models.InvalidTransactionError;
import com.radixdlt.api.core.generated.models.MempoolFullError;
import com.radixdlt.api.core.generated.models.NetworkIdentifier;
import com.radixdlt.api.core.generated.models.NetworkNotSupportedError;
import com.radixdlt.api.core.generated.models.NetworkNotSupportedErrorAllOf;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.radixdlt.api.common.JSON;
/**
 * NetworkNotSupportedError
 */
@JsonPropertyOrder({
  NetworkNotSupportedError.JSON_PROPERTY_SUPPORTED_NETWORKS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = InternalServerError.class, name = "InternalServerError"),
  @JsonSubTypes.Type(value = InvalidHexError.class, name = "InvalidHexError"),
  @JsonSubTypes.Type(value = InvalidJsonError.class, name = "InvalidJsonError"),
  @JsonSubTypes.Type(value = InvalidTransactionError.class, name = "InvalidTransactionError"),
  @JsonSubTypes.Type(value = MempoolFullError.class, name = "MempoolFullError"),
  @JsonSubTypes.Type(value = NetworkNotSupportedError.class, name = "NetworkNotSupportedError"),
})

public class NetworkNotSupportedError extends CoreErrorDetails {
  public static final String JSON_PROPERTY_SUPPORTED_NETWORKS = "supported_networks";
  private List<NetworkIdentifier> supportedNetworks = new ArrayList<>();


  public NetworkNotSupportedError supportedNetworks(List<NetworkIdentifier> supportedNetworks) {
    this.supportedNetworks = supportedNetworks;
    return this;
  }

  public NetworkNotSupportedError addSupportedNetworksItem(NetworkIdentifier supportedNetworksItem) {
    this.supportedNetworks.add(supportedNetworksItem);
    return this;
  }

   /**
   * Get supportedNetworks
   * @return supportedNetworks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUPPORTED_NETWORKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<NetworkIdentifier> getSupportedNetworks() {
    return supportedNetworks;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_NETWORKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSupportedNetworks(List<NetworkIdentifier> supportedNetworks) {
    this.supportedNetworks = supportedNetworks;
  }


  /**
   * Return true if this NetworkNotSupportedError object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkNotSupportedError networkNotSupportedError = (NetworkNotSupportedError) o;
    return Objects.equals(this.supportedNetworks, networkNotSupportedError.supportedNetworks) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(supportedNetworks, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkNotSupportedError {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    supportedNetworks: ").append(toIndentedString(supportedNetworks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("InternalServerError", InternalServerError.class);
  mappings.put("InvalidHexError", InvalidHexError.class);
  mappings.put("InvalidJsonError", InvalidJsonError.class);
  mappings.put("InvalidTransactionError", InvalidTransactionError.class);
  mappings.put("MempoolFullError", MempoolFullError.class);
  mappings.put("NetworkNotSupportedError", NetworkNotSupportedError.class);
  mappings.put("NetworkNotSupportedError", NetworkNotSupportedError.class);
  JSON.registerDiscriminator(NetworkNotSupportedError.class, "type", mappings);
}
}

