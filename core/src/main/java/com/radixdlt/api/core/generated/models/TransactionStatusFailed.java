/*
 * Babylon Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.InvalidTransactionErrorAllOf;
import com.radixdlt.api.core.generated.models.TransactionStatus;
import com.radixdlt.api.core.generated.models.TransactionStatusFailed;
import com.radixdlt.api.core.generated.models.TransactionStatusRejected;
import com.radixdlt.api.core.generated.models.TransactionStatusSucceeded;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.radixdlt.api.common.JSON;
/**
 * TransactionStatusFailed
 */
@JsonPropertyOrder({
  TransactionStatusFailed.JSON_PROPERTY_MESSAGE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = TransactionStatusFailed.class, name = "TransactionStatusFailed"),
  @JsonSubTypes.Type(value = TransactionStatusRejected.class, name = "TransactionStatusRejected"),
  @JsonSubTypes.Type(value = TransactionStatusSucceeded.class, name = "TransactionStatusSucceeded"),
})

public class TransactionStatusFailed extends TransactionStatus {
  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;


  public TransactionStatusFailed message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(String message) {
    this.message = message;
  }


  /**
   * Return true if this TransactionStatusFailed object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionStatusFailed transactionStatusFailed = (TransactionStatusFailed) o;
    return Objects.equals(this.message, transactionStatusFailed.message) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionStatusFailed {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("TransactionStatusFailed", TransactionStatusFailed.class);
  mappings.put("TransactionStatusRejected", TransactionStatusRejected.class);
  mappings.put("TransactionStatusSucceeded", TransactionStatusSucceeded.class);
  mappings.put("TransactionStatusFailed", TransactionStatusFailed.class);
  JSON.registerDiscriminator(TransactionStatusFailed.class, "type", mappings);
}
}

