/*
 * Browse API
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.radixdlt.api.browse.generated.api;

import com.radixdlt.api.browse.generated.client.ApiClient;
import com.radixdlt.api.browse.generated.client.ApiException;
import com.radixdlt.api.browse.generated.client.ApiResponse;
import com.radixdlt.api.browse.generated.client.Pair;

import com.radixdlt.api.browse.generated.models.BrowseEntityInfoRequest;
import com.radixdlt.api.browse.generated.models.BrowseEntityInfoResponse;
import com.radixdlt.api.browse.generated.models.BrowseEntityIteratorRequest;
import com.radixdlt.api.browse.generated.models.BrowseEntityIteratorResponse;
import com.radixdlt.api.browse.generated.models.ErrorResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EntitiesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public EntitiesApi() {
    this(new ApiClient());
  }

  public EntitiesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get Entity Info
   * Resolves basic information about an entity: its type, attached modules, fields/collections and blueprint. 
   * @param browseEntityInfoRequest  (required)
   * @return BrowseEntityInfoResponse
   * @throws ApiException if fails to make API call
   */
  public BrowseEntityInfoResponse entityInfoPost(BrowseEntityInfoRequest browseEntityInfoRequest) throws ApiException {
    ApiResponse<BrowseEntityInfoResponse> localVarResponse = entityInfoPostWithHttpInfo(browseEntityInfoRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Entity Info
   * Resolves basic information about an entity: its type, attached modules, fields/collections and blueprint. 
   * @param browseEntityInfoRequest  (required)
   * @return ApiResponse&lt;BrowseEntityInfoResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrowseEntityInfoResponse> entityInfoPostWithHttpInfo(BrowseEntityInfoRequest browseEntityInfoRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = entityInfoPostRequestBuilder(browseEntityInfoRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("entityInfoPost", localVarResponse);
        }
        return new ApiResponse<BrowseEntityInfoResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrowseEntityInfoResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder entityInfoPostRequestBuilder(BrowseEntityInfoRequest browseEntityInfoRequest) throws ApiException {
    // verify the required parameter 'browseEntityInfoRequest' is set
    if (browseEntityInfoRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'browseEntityInfoRequest' when calling entityInfoPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(browseEntityInfoRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Entities
   * Lists addresses of all entities, in an iterator-like paged fashion
   * @param browseEntityIteratorRequest  (required)
   * @return BrowseEntityIteratorResponse
   * @throws ApiException if fails to make API call
   */
  public BrowseEntityIteratorResponse entityIteratorPost(BrowseEntityIteratorRequest browseEntityIteratorRequest) throws ApiException {
    ApiResponse<BrowseEntityIteratorResponse> localVarResponse = entityIteratorPostWithHttpInfo(browseEntityIteratorRequest);
    return localVarResponse.getData();
  }

  /**
   * List Entities
   * Lists addresses of all entities, in an iterator-like paged fashion
   * @param browseEntityIteratorRequest  (required)
   * @return ApiResponse&lt;BrowseEntityIteratorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrowseEntityIteratorResponse> entityIteratorPostWithHttpInfo(BrowseEntityIteratorRequest browseEntityIteratorRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = entityIteratorPostRequestBuilder(browseEntityIteratorRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("entityIteratorPost", localVarResponse);
        }
        return new ApiResponse<BrowseEntityIteratorResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrowseEntityIteratorResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder entityIteratorPostRequestBuilder(BrowseEntityIteratorRequest browseEntityIteratorRequest) throws ApiException {
    // verify the required parameter 'browseEntityIteratorRequest' is set
    if (browseEntityIteratorRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'browseEntityIteratorRequest' when calling entityIteratorPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/iterator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(browseEntityIteratorRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
