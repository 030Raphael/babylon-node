/*
 * Browse API
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.radixdlt.api.browse.generated.api;

import com.radixdlt.api.browse.generated.client.ApiClient;
import com.radixdlt.api.browse.generated.client.ApiException;
import com.radixdlt.api.browse.generated.client.ApiResponse;
import com.radixdlt.api.browse.generated.client.Pair;

import com.radixdlt.api.browse.generated.models.BrowseKeyValueStoreEntryRequest;
import com.radixdlt.api.browse.generated.models.BrowseKeyValueStoreEntryResponse;
import com.radixdlt.api.browse.generated.models.BrowseKeyValueStoreIteratorRequest;
import com.radixdlt.api.browse.generated.models.BrowseKeyValueStoreIteratorResponse;
import com.radixdlt.api.browse.generated.models.ErrorResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KvStoresApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public KvStoresApi() {
    this(new ApiClient());
  }

  public KvStoresApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get Key-Value Store Entry
   * Reads the current value of a specific entry from a Key-Value Store. 
   * @param browseKeyValueStoreEntryRequest  (required)
   * @return BrowseKeyValueStoreEntryResponse
   * @throws ApiException if fails to make API call
   */
  public BrowseKeyValueStoreEntryResponse kvStoreEntryPost(BrowseKeyValueStoreEntryRequest browseKeyValueStoreEntryRequest) throws ApiException {
    ApiResponse<BrowseKeyValueStoreEntryResponse> localVarResponse = kvStoreEntryPostWithHttpInfo(browseKeyValueStoreEntryRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Key-Value Store Entry
   * Reads the current value of a specific entry from a Key-Value Store. 
   * @param browseKeyValueStoreEntryRequest  (required)
   * @return ApiResponse&lt;BrowseKeyValueStoreEntryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrowseKeyValueStoreEntryResponse> kvStoreEntryPostWithHttpInfo(BrowseKeyValueStoreEntryRequest browseKeyValueStoreEntryRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = kvStoreEntryPostRequestBuilder(browseKeyValueStoreEntryRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("kvStoreEntryPost", localVarResponse);
        }
        return new ApiResponse<BrowseKeyValueStoreEntryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrowseKeyValueStoreEntryResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder kvStoreEntryPostRequestBuilder(BrowseKeyValueStoreEntryRequest browseKeyValueStoreEntryRequest) throws ApiException {
    // verify the required parameter 'browseKeyValueStoreEntryRequest' is set
    if (browseKeyValueStoreEntryRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'browseKeyValueStoreEntryRequest' when calling kvStoreEntryPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/kv-store/entry";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(browseKeyValueStoreEntryRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Key-Value Store
   * Lists keys of all entries from a particular Key-Value Store, in an iterator-like paged fashion
   * @param browseKeyValueStoreIteratorRequest  (required)
   * @return BrowseKeyValueStoreIteratorResponse
   * @throws ApiException if fails to make API call
   */
  public BrowseKeyValueStoreIteratorResponse kvStoreIteratorPost(BrowseKeyValueStoreIteratorRequest browseKeyValueStoreIteratorRequest) throws ApiException {
    ApiResponse<BrowseKeyValueStoreIteratorResponse> localVarResponse = kvStoreIteratorPostWithHttpInfo(browseKeyValueStoreIteratorRequest);
    return localVarResponse.getData();
  }

  /**
   * List Key-Value Store
   * Lists keys of all entries from a particular Key-Value Store, in an iterator-like paged fashion
   * @param browseKeyValueStoreIteratorRequest  (required)
   * @return ApiResponse&lt;BrowseKeyValueStoreIteratorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrowseKeyValueStoreIteratorResponse> kvStoreIteratorPostWithHttpInfo(BrowseKeyValueStoreIteratorRequest browseKeyValueStoreIteratorRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = kvStoreIteratorPostRequestBuilder(browseKeyValueStoreIteratorRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("kvStoreIteratorPost", localVarResponse);
        }
        return new ApiResponse<BrowseKeyValueStoreIteratorResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrowseKeyValueStoreIteratorResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder kvStoreIteratorPostRequestBuilder(BrowseKeyValueStoreIteratorRequest browseKeyValueStoreIteratorRequest) throws ApiException {
    // verify the required parameter 'browseKeyValueStoreIteratorRequest' is set
    if (browseKeyValueStoreIteratorRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'browseKeyValueStoreIteratorRequest' when calling kvStoreIteratorPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/kv-store/iterator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(browseKeyValueStoreIteratorRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
