/*
 * Browse API
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.radixdlt.api.browse.generated.api;

import com.radixdlt.api.browse.generated.client.ApiClient;
import com.radixdlt.api.browse.generated.client.ApiException;
import com.radixdlt.api.browse.generated.client.ApiResponse;
import com.radixdlt.api.browse.generated.client.Pair;

import com.radixdlt.api.browse.generated.models.BrowseObjectCollectionEntryRequest;
import com.radixdlt.api.browse.generated.models.BrowseObjectCollectionEntryResponse;
import com.radixdlt.api.browse.generated.models.BrowseObjectCollectionIteratorRequest;
import com.radixdlt.api.browse.generated.models.BrowseObjectCollectionIteratorResponse;
import com.radixdlt.api.browse.generated.models.BrowseObjectFieldRequest;
import com.radixdlt.api.browse.generated.models.BrowseObjectFieldResponse;
import com.radixdlt.api.browse.generated.models.ErrorResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ObjectsApi() {
    this(new ApiClient());
  }

  public ObjectsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get Object Collection Entry
   * Reads the current value of a specific entry from an Object&#39;s Collection. 
   * @param browseObjectCollectionEntryRequest  (required)
   * @return BrowseObjectCollectionEntryResponse
   * @throws ApiException if fails to make API call
   */
  public BrowseObjectCollectionEntryResponse objectCollectionEntryPost(BrowseObjectCollectionEntryRequest browseObjectCollectionEntryRequest) throws ApiException {
    ApiResponse<BrowseObjectCollectionEntryResponse> localVarResponse = objectCollectionEntryPostWithHttpInfo(browseObjectCollectionEntryRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Object Collection Entry
   * Reads the current value of a specific entry from an Object&#39;s Collection. 
   * @param browseObjectCollectionEntryRequest  (required)
   * @return ApiResponse&lt;BrowseObjectCollectionEntryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrowseObjectCollectionEntryResponse> objectCollectionEntryPostWithHttpInfo(BrowseObjectCollectionEntryRequest browseObjectCollectionEntryRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = objectCollectionEntryPostRequestBuilder(browseObjectCollectionEntryRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("objectCollectionEntryPost", localVarResponse);
        }
        return new ApiResponse<BrowseObjectCollectionEntryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrowseObjectCollectionEntryResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder objectCollectionEntryPostRequestBuilder(BrowseObjectCollectionEntryRequest browseObjectCollectionEntryRequest) throws ApiException {
    // verify the required parameter 'browseObjectCollectionEntryRequest' is set
    if (browseObjectCollectionEntryRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'browseObjectCollectionEntryRequest' when calling objectCollectionEntryPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/object/collection/entry";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(browseObjectCollectionEntryRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Object Collection
   * Lists keys of all entries from a particular object&#39;s collection, in an iterator-like paged fashion
   * @param browseObjectCollectionIteratorRequest  (required)
   * @return BrowseObjectCollectionIteratorResponse
   * @throws ApiException if fails to make API call
   */
  public BrowseObjectCollectionIteratorResponse objectCollectionIteratorPost(BrowseObjectCollectionIteratorRequest browseObjectCollectionIteratorRequest) throws ApiException {
    ApiResponse<BrowseObjectCollectionIteratorResponse> localVarResponse = objectCollectionIteratorPostWithHttpInfo(browseObjectCollectionIteratorRequest);
    return localVarResponse.getData();
  }

  /**
   * List Object Collection
   * Lists keys of all entries from a particular object&#39;s collection, in an iterator-like paged fashion
   * @param browseObjectCollectionIteratorRequest  (required)
   * @return ApiResponse&lt;BrowseObjectCollectionIteratorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrowseObjectCollectionIteratorResponse> objectCollectionIteratorPostWithHttpInfo(BrowseObjectCollectionIteratorRequest browseObjectCollectionIteratorRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = objectCollectionIteratorPostRequestBuilder(browseObjectCollectionIteratorRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("objectCollectionIteratorPost", localVarResponse);
        }
        return new ApiResponse<BrowseObjectCollectionIteratorResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrowseObjectCollectionIteratorResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder objectCollectionIteratorPostRequestBuilder(BrowseObjectCollectionIteratorRequest browseObjectCollectionIteratorRequest) throws ApiException {
    // verify the required parameter 'browseObjectCollectionIteratorRequest' is set
    if (browseObjectCollectionIteratorRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'browseObjectCollectionIteratorRequest' when calling objectCollectionIteratorPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/object/collection/iterator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(browseObjectCollectionIteratorRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Object Field
   * Reads the current value of an object&#39;s field, given an entity address, a module (&#x60;Main&#x60; by default) and either a field index or its human-readable name (if applicable). 
   * @param browseObjectFieldRequest  (required)
   * @return BrowseObjectFieldResponse
   * @throws ApiException if fails to make API call
   */
  public BrowseObjectFieldResponse objectFieldPost(BrowseObjectFieldRequest browseObjectFieldRequest) throws ApiException {
    ApiResponse<BrowseObjectFieldResponse> localVarResponse = objectFieldPostWithHttpInfo(browseObjectFieldRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Object Field
   * Reads the current value of an object&#39;s field, given an entity address, a module (&#x60;Main&#x60; by default) and either a field index or its human-readable name (if applicable). 
   * @param browseObjectFieldRequest  (required)
   * @return ApiResponse&lt;BrowseObjectFieldResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrowseObjectFieldResponse> objectFieldPostWithHttpInfo(BrowseObjectFieldRequest browseObjectFieldRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = objectFieldPostRequestBuilder(browseObjectFieldRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("objectFieldPost", localVarResponse);
        }
        return new ApiResponse<BrowseObjectFieldResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrowseObjectFieldResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder objectFieldPostRequestBuilder(BrowseObjectFieldRequest browseObjectFieldRequest) throws ApiException {
    // verify the required parameter 'browseObjectFieldRequest' is set
    if (browseObjectFieldRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'browseObjectFieldRequest' when calling objectFieldPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/object/field";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(browseObjectFieldRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
