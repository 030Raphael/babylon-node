/*
 * Browse API
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.radixdlt.api.browse.generated.api;

import com.radixdlt.api.browse.generated.client.ApiClient;
import com.radixdlt.api.browse.generated.client.ApiException;
import com.radixdlt.api.browse.generated.client.ApiResponse;
import com.radixdlt.api.browse.generated.client.Pair;

import com.radixdlt.api.browse.generated.models.BrowseBlueprintInfoRequest;
import com.radixdlt.api.browse.generated.models.BrowseBlueprintInfoResponse;
import com.radixdlt.api.browse.generated.models.BrowseEntitySchemaEntryRequest;
import com.radixdlt.api.browse.generated.models.BrowseEntitySchemaEntryResponse;
import com.radixdlt.api.browse.generated.models.ErrorResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TypesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public TypesApi() {
    this(new ApiClient());
  }

  public TypesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get Blueprint Info
   * Returns all externally-relevant information about a particular blueprint.
   * @param browseBlueprintInfoRequest  (required)
   * @return BrowseBlueprintInfoResponse
   * @throws ApiException if fails to make API call
   */
  public BrowseBlueprintInfoResponse blueprintInfoPost(BrowseBlueprintInfoRequest browseBlueprintInfoRequest) throws ApiException {
    ApiResponse<BrowseBlueprintInfoResponse> localVarResponse = blueprintInfoPostWithHttpInfo(browseBlueprintInfoRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Blueprint Info
   * Returns all externally-relevant information about a particular blueprint.
   * @param browseBlueprintInfoRequest  (required)
   * @return ApiResponse&lt;BrowseBlueprintInfoResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrowseBlueprintInfoResponse> blueprintInfoPostWithHttpInfo(BrowseBlueprintInfoRequest browseBlueprintInfoRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = blueprintInfoPostRequestBuilder(browseBlueprintInfoRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("blueprintInfoPost", localVarResponse);
        }
        return new ApiResponse<BrowseBlueprintInfoResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrowseBlueprintInfoResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder blueprintInfoPostRequestBuilder(BrowseBlueprintInfoRequest browseBlueprintInfoRequest) throws ApiException {
    // verify the required parameter 'browseBlueprintInfoRequest' is set
    if (browseBlueprintInfoRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'browseBlueprintInfoRequest' when calling blueprintInfoPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/blueprint/info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(browseBlueprintInfoRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Schema
   * Reads the contents of a specific schema associated with an entity. 
   * @param browseEntitySchemaEntryRequest  (required)
   * @return BrowseEntitySchemaEntryResponse
   * @throws ApiException if fails to make API call
   */
  public BrowseEntitySchemaEntryResponse entitySchemaEntryPost(BrowseEntitySchemaEntryRequest browseEntitySchemaEntryRequest) throws ApiException {
    ApiResponse<BrowseEntitySchemaEntryResponse> localVarResponse = entitySchemaEntryPostWithHttpInfo(browseEntitySchemaEntryRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Schema
   * Reads the contents of a specific schema associated with an entity. 
   * @param browseEntitySchemaEntryRequest  (required)
   * @return ApiResponse&lt;BrowseEntitySchemaEntryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BrowseEntitySchemaEntryResponse> entitySchemaEntryPostWithHttpInfo(BrowseEntitySchemaEntryRequest browseEntitySchemaEntryRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = entitySchemaEntryPostRequestBuilder(browseEntitySchemaEntryRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("entitySchemaEntryPost", localVarResponse);
        }
        return new ApiResponse<BrowseEntitySchemaEntryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BrowseEntitySchemaEntryResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder entitySchemaEntryPostRequestBuilder(BrowseEntitySchemaEntryRequest browseEntitySchemaEntryRequest) throws ApiException {
    // verify the required parameter 'browseEntitySchemaEntryRequest' is set
    if (browseEntitySchemaEntryRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'browseEntitySchemaEntryRequest' when calling entitySchemaEntryPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/entity/schema/entry";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(browseEntitySchemaEntryRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
