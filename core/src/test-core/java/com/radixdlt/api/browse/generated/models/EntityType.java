/*
 * Browse API
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.browse.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Gets or Sets EntityType
 */
public enum EntityType {
  
  GLOBALPACKAGE("GlobalPackage"),
  
  GLOBALCONSENSUSMANAGER("GlobalConsensusManager"),
  
  GLOBALVALIDATOR("GlobalValidator"),
  
  GLOBALGENERICCOMPONENT("GlobalGenericComponent"),
  
  GLOBALACCOUNT("GlobalAccount"),
  
  GLOBALIDENTITY("GlobalIdentity"),
  
  GLOBALACCESSCONTROLLER("GlobalAccessController"),
  
  GLOBALVIRTUALSECP256K1ACCOUNT("GlobalVirtualSecp256k1Account"),
  
  GLOBALVIRTUALSECP256K1IDENTITY("GlobalVirtualSecp256k1Identity"),
  
  GLOBALVIRTUALED25519ACCOUNT("GlobalVirtualEd25519Account"),
  
  GLOBALVIRTUALED25519IDENTITY("GlobalVirtualEd25519Identity"),
  
  GLOBALFUNGIBLERESOURCE("GlobalFungibleResource"),
  
  INTERNALFUNGIBLEVAULT("InternalFungibleVault"),
  
  GLOBALNONFUNGIBLERESOURCE("GlobalNonFungibleResource"),
  
  INTERNALNONFUNGIBLEVAULT("InternalNonFungibleVault"),
  
  INTERNALGENERICCOMPONENT("InternalGenericComponent"),
  
  INTERNALKEYVALUESTORE("InternalKeyValueStore"),
  
  GLOBALONERESOURCEPOOL("GlobalOneResourcePool"),
  
  GLOBALTWORESOURCEPOOL("GlobalTwoResourcePool"),
  
  GLOBALMULTIRESOURCEPOOL("GlobalMultiResourcePool"),
  
  GLOBALTRANSACTIONTRACKER("GlobalTransactionTracker");

  private String value;

  EntityType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static EntityType fromValue(String value) {
    for (EntityType b : EntityType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

