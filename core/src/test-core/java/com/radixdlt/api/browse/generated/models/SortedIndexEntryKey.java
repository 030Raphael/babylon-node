/*
 * Browse API
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.browse.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.browse.generated.models.CollectionEntryKey;
import com.radixdlt.api.browse.generated.models.IndexEntryKey;
import com.radixdlt.api.browse.generated.models.KeyValueStoreEntryKey;
import com.radixdlt.api.browse.generated.models.ObjectCollectionKind;
import com.radixdlt.api.browse.generated.models.SortedIndexEntryKey;
import com.radixdlt.api.browse.generated.models.SortedIndexEntryKeyAllOf;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.radixdlt.api.browse.generated.client.JSON;
/**
 * Key within an Object&#39;s Sorted Index collection.
 */
@ApiModel(description = "Key within an Object's Sorted Index collection.")
@JsonPropertyOrder({
  SortedIndexEntryKey.JSON_PROPERTY_SORT_PREFIX_HEX,
  SortedIndexEntryKey.JSON_PROPERTY_PROGRAMMATIC_JSON
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "kind", // ignore manually set kind, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the kind to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = IndexEntryKey.class, name = "Index"),
  @JsonSubTypes.Type(value = KeyValueStoreEntryKey.class, name = "KeyValueStore"),
  @JsonSubTypes.Type(value = SortedIndexEntryKey.class, name = "SortedIndex"),
})

public class SortedIndexEntryKey extends CollectionEntryKey {
  public static final String JSON_PROPERTY_SORT_PREFIX_HEX = "sort_prefix_hex";
  private String sortPrefixHex;

  public static final String JSON_PROPERTY_PROGRAMMATIC_JSON = "programmatic_json";
  private Object programmaticJson;

  public SortedIndexEntryKey() { 
  }

  public SortedIndexEntryKey sortPrefixHex(String sortPrefixHex) {
    this.sortPrefixHex = sortPrefixHex;
    return this;
  }

   /**
   * The hex-encoded bytes of the sorted part of the key.
   * @return sortPrefixHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded bytes of the sorted part of the key.")
  @JsonProperty(JSON_PROPERTY_SORT_PREFIX_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSortPrefixHex() {
    return sortPrefixHex;
  }


  @JsonProperty(JSON_PROPERTY_SORT_PREFIX_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSortPrefixHex(String sortPrefixHex) {
    this.sortPrefixHex = sortPrefixHex;
  }


  public SortedIndexEntryKey programmaticJson(Object programmaticJson) {
    this.programmaticJson = programmaticJson;
    return this;
  }

   /**
   * Get programmaticJson
   * @return programmaticJson
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PROGRAMMATIC_JSON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getProgrammaticJson() {
    return programmaticJson;
  }


  @JsonProperty(JSON_PROPERTY_PROGRAMMATIC_JSON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProgrammaticJson(Object programmaticJson) {
    this.programmaticJson = programmaticJson;
  }


  /**
   * Return true if this SortedIndexEntryKey object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SortedIndexEntryKey sortedIndexEntryKey = (SortedIndexEntryKey) o;
    return Objects.equals(this.sortPrefixHex, sortedIndexEntryKey.sortPrefixHex) &&
        Objects.equals(this.programmaticJson, sortedIndexEntryKey.programmaticJson) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sortPrefixHex, programmaticJson, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SortedIndexEntryKey {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    sortPrefixHex: ").append(toIndentedString(sortPrefixHex)).append("\n");
    sb.append("    programmaticJson: ").append(toIndentedString(programmaticJson)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("Index", IndexEntryKey.class);
  mappings.put("KeyValueStore", KeyValueStoreEntryKey.class);
  mappings.put("SortedIndex", SortedIndexEntryKey.class);
  mappings.put("SortedIndexEntryKey", SortedIndexEntryKey.class);
  JSON.registerDiscriminator(SortedIndexEntryKey.class, "kind", mappings);
}
}

