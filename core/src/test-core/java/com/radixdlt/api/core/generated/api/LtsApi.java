/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.radixdlt.api.core.generated.api;

import com.radixdlt.api.core.generated.client.ApiClient;
import com.radixdlt.api.core.generated.client.ApiException;
import com.radixdlt.api.core.generated.client.ApiResponse;
import com.radixdlt.api.core.generated.client.Pair;

import com.radixdlt.api.core.generated.models.BasicErrorResponse;
import com.radixdlt.api.core.generated.models.LtsStateAccountAllResourceBalancesRequest;
import com.radixdlt.api.core.generated.models.LtsStateAccountAllResourceBalancesResponse;
import com.radixdlt.api.core.generated.models.LtsStateAccountResourceBalanceRequest;
import com.radixdlt.api.core.generated.models.LtsStateAccountResourceBalanceResponse;
import com.radixdlt.api.core.generated.models.LtsStreamEntityTransactionsBasicOutcomesRequest;
import com.radixdlt.api.core.generated.models.LtsStreamEntityTransactionsBasicOutcomesResponse;
import com.radixdlt.api.core.generated.models.LtsStreamTransactionsBasicOutcomesRequest;
import com.radixdlt.api.core.generated.models.LtsStreamTransactionsBasicOutcomesResponse;
import com.radixdlt.api.core.generated.models.LtsTransactionConstructionRequest;
import com.radixdlt.api.core.generated.models.LtsTransactionConstructionResponse;
import com.radixdlt.api.core.generated.models.LtsTransactionStatusRequest;
import com.radixdlt.api.core.generated.models.LtsTransactionStatusResponse;
import com.radixdlt.api.core.generated.models.LtsTransactionSubmitRequest;
import com.radixdlt.api.core.generated.models.LtsTransactionSubmitResponse;
import com.radixdlt.api.core.generated.models.TransactionSubmitErrorResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LtsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public LtsApi() {
    this(new ApiClient());
  }

  public LtsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get All Resources Balances
   * Returns balances for all resources associated with an account
   * @param ltsStateAccountAllResourceBalancesRequest  (required)
   * @return LtsStateAccountAllResourceBalancesResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStateAccountAllResourceBalancesResponse ltsStateAccountAllResourceBalancesPost(LtsStateAccountAllResourceBalancesRequest ltsStateAccountAllResourceBalancesRequest) throws ApiException {
    ApiResponse<LtsStateAccountAllResourceBalancesResponse> localVarResponse = ltsStateAccountAllResourceBalancesPostWithHttpInfo(ltsStateAccountAllResourceBalancesRequest);
    return localVarResponse.getData();
  }

  /**
   * Get All Resources Balances
   * Returns balances for all resources associated with an account
   * @param ltsStateAccountAllResourceBalancesRequest  (required)
   * @return ApiResponse&lt;LtsStateAccountAllResourceBalancesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LtsStateAccountAllResourceBalancesResponse> ltsStateAccountAllResourceBalancesPostWithHttpInfo(LtsStateAccountAllResourceBalancesRequest ltsStateAccountAllResourceBalancesRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ltsStateAccountAllResourceBalancesPostRequestBuilder(ltsStateAccountAllResourceBalancesRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ltsStateAccountAllResourceBalancesPost", localVarResponse);
        }
        return new ApiResponse<LtsStateAccountAllResourceBalancesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LtsStateAccountAllResourceBalancesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ltsStateAccountAllResourceBalancesPostRequestBuilder(LtsStateAccountAllResourceBalancesRequest ltsStateAccountAllResourceBalancesRequest) throws ApiException {
    // verify the required parameter 'ltsStateAccountAllResourceBalancesRequest' is set
    if (ltsStateAccountAllResourceBalancesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsStateAccountAllResourceBalancesRequest' when calling ltsStateAccountAllResourceBalancesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/lts/state/account-all-resource-balances";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(ltsStateAccountAllResourceBalancesRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Resource Balance
   * Returns balance of the resource for an account
   * @param ltsStateAccountResourceBalanceRequest  (required)
   * @return LtsStateAccountResourceBalanceResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStateAccountResourceBalanceResponse ltsStateAccountResourceBalancePost(LtsStateAccountResourceBalanceRequest ltsStateAccountResourceBalanceRequest) throws ApiException {
    ApiResponse<LtsStateAccountResourceBalanceResponse> localVarResponse = ltsStateAccountResourceBalancePostWithHttpInfo(ltsStateAccountResourceBalanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Resource Balance
   * Returns balance of the resource for an account
   * @param ltsStateAccountResourceBalanceRequest  (required)
   * @return ApiResponse&lt;LtsStateAccountResourceBalanceResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LtsStateAccountResourceBalanceResponse> ltsStateAccountResourceBalancePostWithHttpInfo(LtsStateAccountResourceBalanceRequest ltsStateAccountResourceBalanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ltsStateAccountResourceBalancePostRequestBuilder(ltsStateAccountResourceBalanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ltsStateAccountResourceBalancePost", localVarResponse);
        }
        return new ApiResponse<LtsStateAccountResourceBalanceResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LtsStateAccountResourceBalanceResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ltsStateAccountResourceBalancePostRequestBuilder(LtsStateAccountResourceBalanceRequest ltsStateAccountResourceBalanceRequest) throws ApiException {
    // verify the required parameter 'ltsStateAccountResourceBalanceRequest' is set
    if (ltsStateAccountResourceBalanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsStateAccountResourceBalanceRequest' when calling ltsStateAccountResourceBalancePost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/lts/state/account-resource-balance";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(ltsStateAccountResourceBalanceRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Entity Transactions Basic Outcomes
   * TODO 
   * @param ltsStreamEntityTransactionsBasicOutcomesRequest  (required)
   * @return LtsStreamEntityTransactionsBasicOutcomesResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStreamEntityTransactionsBasicOutcomesResponse ltsStreamEntityTransactionsBasicOutcomesPost(LtsStreamEntityTransactionsBasicOutcomesRequest ltsStreamEntityTransactionsBasicOutcomesRequest) throws ApiException {
    ApiResponse<LtsStreamEntityTransactionsBasicOutcomesResponse> localVarResponse = ltsStreamEntityTransactionsBasicOutcomesPostWithHttpInfo(ltsStreamEntityTransactionsBasicOutcomesRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Entity Transactions Basic Outcomes
   * TODO 
   * @param ltsStreamEntityTransactionsBasicOutcomesRequest  (required)
   * @return ApiResponse&lt;LtsStreamEntityTransactionsBasicOutcomesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LtsStreamEntityTransactionsBasicOutcomesResponse> ltsStreamEntityTransactionsBasicOutcomesPostWithHttpInfo(LtsStreamEntityTransactionsBasicOutcomesRequest ltsStreamEntityTransactionsBasicOutcomesRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ltsStreamEntityTransactionsBasicOutcomesPostRequestBuilder(ltsStreamEntityTransactionsBasicOutcomesRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ltsStreamEntityTransactionsBasicOutcomesPost", localVarResponse);
        }
        return new ApiResponse<LtsStreamEntityTransactionsBasicOutcomesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LtsStreamEntityTransactionsBasicOutcomesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ltsStreamEntityTransactionsBasicOutcomesPostRequestBuilder(LtsStreamEntityTransactionsBasicOutcomesRequest ltsStreamEntityTransactionsBasicOutcomesRequest) throws ApiException {
    // verify the required parameter 'ltsStreamEntityTransactionsBasicOutcomesRequest' is set
    if (ltsStreamEntityTransactionsBasicOutcomesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsStreamEntityTransactionsBasicOutcomesRequest' when calling ltsStreamEntityTransactionsBasicOutcomesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/lts/stream/entity-transactions-basic-outcomes";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(ltsStreamEntityTransactionsBasicOutcomesRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Transactions Basic Outcomes
   * TODO 
   * @param ltsStreamTransactionsBasicOutcomesRequest  (required)
   * @return LtsStreamTransactionsBasicOutcomesResponse
   * @throws ApiException if fails to make API call
   */
  public LtsStreamTransactionsBasicOutcomesResponse ltsStreamTransactionsBasicOutcomesPost(LtsStreamTransactionsBasicOutcomesRequest ltsStreamTransactionsBasicOutcomesRequest) throws ApiException {
    ApiResponse<LtsStreamTransactionsBasicOutcomesResponse> localVarResponse = ltsStreamTransactionsBasicOutcomesPostWithHttpInfo(ltsStreamTransactionsBasicOutcomesRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Transactions Basic Outcomes
   * TODO 
   * @param ltsStreamTransactionsBasicOutcomesRequest  (required)
   * @return ApiResponse&lt;LtsStreamTransactionsBasicOutcomesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LtsStreamTransactionsBasicOutcomesResponse> ltsStreamTransactionsBasicOutcomesPostWithHttpInfo(LtsStreamTransactionsBasicOutcomesRequest ltsStreamTransactionsBasicOutcomesRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ltsStreamTransactionsBasicOutcomesPostRequestBuilder(ltsStreamTransactionsBasicOutcomesRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ltsStreamTransactionsBasicOutcomesPost", localVarResponse);
        }
        return new ApiResponse<LtsStreamTransactionsBasicOutcomesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LtsStreamTransactionsBasicOutcomesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ltsStreamTransactionsBasicOutcomesPostRequestBuilder(LtsStreamTransactionsBasicOutcomesRequest ltsStreamTransactionsBasicOutcomesRequest) throws ApiException {
    // verify the required parameter 'ltsStreamTransactionsBasicOutcomesRequest' is set
    if (ltsStreamTransactionsBasicOutcomesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsStreamTransactionsBasicOutcomesRequest' when calling ltsStreamTransactionsBasicOutcomesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/lts/stream/transactions-basic-outcomes";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(ltsStreamTransactionsBasicOutcomesRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Transaction Construction
   * Returns information necessary to build a transaction
   * @param ltsTransactionConstructionRequest  (required)
   * @return LtsTransactionConstructionResponse
   * @throws ApiException if fails to make API call
   */
  public LtsTransactionConstructionResponse ltsTransactionConstructionPost(LtsTransactionConstructionRequest ltsTransactionConstructionRequest) throws ApiException {
    ApiResponse<LtsTransactionConstructionResponse> localVarResponse = ltsTransactionConstructionPostWithHttpInfo(ltsTransactionConstructionRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Transaction Construction
   * Returns information necessary to build a transaction
   * @param ltsTransactionConstructionRequest  (required)
   * @return ApiResponse&lt;LtsTransactionConstructionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LtsTransactionConstructionResponse> ltsTransactionConstructionPostWithHttpInfo(LtsTransactionConstructionRequest ltsTransactionConstructionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ltsTransactionConstructionPostRequestBuilder(ltsTransactionConstructionRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ltsTransactionConstructionPost", localVarResponse);
        }
        return new ApiResponse<LtsTransactionConstructionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LtsTransactionConstructionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ltsTransactionConstructionPostRequestBuilder(LtsTransactionConstructionRequest ltsTransactionConstructionRequest) throws ApiException {
    // verify the required parameter 'ltsTransactionConstructionRequest' is set
    if (ltsTransactionConstructionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsTransactionConstructionRequest' when calling ltsTransactionConstructionPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/lts/transaction/construction";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(ltsTransactionConstructionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Transaction Status
   * Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
   * @param ltsTransactionStatusRequest  (required)
   * @return LtsTransactionStatusResponse
   * @throws ApiException if fails to make API call
   */
  public LtsTransactionStatusResponse ltsTransactionStatusPost(LtsTransactionStatusRequest ltsTransactionStatusRequest) throws ApiException {
    ApiResponse<LtsTransactionStatusResponse> localVarResponse = ltsTransactionStatusPostWithHttpInfo(ltsTransactionStatusRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Transaction Status
   * Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
   * @param ltsTransactionStatusRequest  (required)
   * @return ApiResponse&lt;LtsTransactionStatusResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LtsTransactionStatusResponse> ltsTransactionStatusPostWithHttpInfo(LtsTransactionStatusRequest ltsTransactionStatusRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ltsTransactionStatusPostRequestBuilder(ltsTransactionStatusRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ltsTransactionStatusPost", localVarResponse);
        }
        return new ApiResponse<LtsTransactionStatusResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LtsTransactionStatusResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ltsTransactionStatusPostRequestBuilder(LtsTransactionStatusRequest ltsTransactionStatusRequest) throws ApiException {
    // verify the required parameter 'ltsTransactionStatusRequest' is set
    if (ltsTransactionStatusRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsTransactionStatusRequest' when calling ltsTransactionStatusPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/lts/transaction/status";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(ltsTransactionStatusRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Transaction Submit
   * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
   * @param ltsTransactionSubmitRequest  (required)
   * @return LtsTransactionSubmitResponse
   * @throws ApiException if fails to make API call
   */
  public LtsTransactionSubmitResponse ltsTransactionSubmitPost(LtsTransactionSubmitRequest ltsTransactionSubmitRequest) throws ApiException {
    ApiResponse<LtsTransactionSubmitResponse> localVarResponse = ltsTransactionSubmitPostWithHttpInfo(ltsTransactionSubmitRequest);
    return localVarResponse.getData();
  }

  /**
   * Transaction Submit
   * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
   * @param ltsTransactionSubmitRequest  (required)
   * @return ApiResponse&lt;LtsTransactionSubmitResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LtsTransactionSubmitResponse> ltsTransactionSubmitPostWithHttpInfo(LtsTransactionSubmitRequest ltsTransactionSubmitRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = ltsTransactionSubmitPostRequestBuilder(ltsTransactionSubmitRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("ltsTransactionSubmitPost", localVarResponse);
        }
        return new ApiResponse<LtsTransactionSubmitResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LtsTransactionSubmitResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder ltsTransactionSubmitPostRequestBuilder(LtsTransactionSubmitRequest ltsTransactionSubmitRequest) throws ApiException {
    // verify the required parameter 'ltsTransactionSubmitRequest' is set
    if (ltsTransactionSubmitRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'ltsTransactionSubmitRequest' when calling ltsTransactionSubmitPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/lts/transaction/submit";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(ltsTransactionSubmitRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
