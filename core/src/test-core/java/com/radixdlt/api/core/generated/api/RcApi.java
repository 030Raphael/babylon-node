/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.radixdlt.api.core.generated.api;

import com.radixdlt.api.core.generated.client.ApiClient;
import com.radixdlt.api.core.generated.client.ApiException;
import com.radixdlt.api.core.generated.client.ApiResponse;
import com.radixdlt.api.core.generated.client.Pair;

import com.radixdlt.api.core.generated.models.BasicErrorResponse;
import com.radixdlt.api.core.generated.models.RCStateAccountAllResourceBalancesRequest;
import com.radixdlt.api.core.generated.models.RCStateAccountAllResourceBalancesResponse;
import com.radixdlt.api.core.generated.models.RCStateAccountResourceBalanceRequest;
import com.radixdlt.api.core.generated.models.RCStateAccountResourceBalanceResponse;
import com.radixdlt.api.core.generated.models.RCStreamEntityTransactionsBasicOutcomesRequest;
import com.radixdlt.api.core.generated.models.RCStreamEntityTransactionsBasicOutcomesResponse;
import com.radixdlt.api.core.generated.models.RCStreamTransactionsBasicOutcomesRequest;
import com.radixdlt.api.core.generated.models.RCStreamTransactionsBasicOutcomesResponse;
import com.radixdlt.api.core.generated.models.RCTransactionConstructionRequest;
import com.radixdlt.api.core.generated.models.RCTransactionConstructionResponse;
import com.radixdlt.api.core.generated.models.RCTransactionStatusRequest;
import com.radixdlt.api.core.generated.models.RCTransactionStatusResponse;
import com.radixdlt.api.core.generated.models.RCTransactionSubmitRequest;
import com.radixdlt.api.core.generated.models.RCTransactionSubmitResponse;
import com.radixdlt.api.core.generated.models.TransactionSubmitErrorResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RcApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RcApi() {
    this(new ApiClient());
  }

  public RcApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get All Resources Balances
   * Returns balances for all resources associated with an account
   * @param rcStateAccountAllResourceBalancesRequest  (required)
   * @return RCStateAccountAllResourceBalancesResponse
   * @throws ApiException if fails to make API call
   */
  public RCStateAccountAllResourceBalancesResponse rcStateAccountAllResourceBalancesPost(RCStateAccountAllResourceBalancesRequest rcStateAccountAllResourceBalancesRequest) throws ApiException {
    ApiResponse<RCStateAccountAllResourceBalancesResponse> localVarResponse = rcStateAccountAllResourceBalancesPostWithHttpInfo(rcStateAccountAllResourceBalancesRequest);
    return localVarResponse.getData();
  }

  /**
   * Get All Resources Balances
   * Returns balances for all resources associated with an account
   * @param rcStateAccountAllResourceBalancesRequest  (required)
   * @return ApiResponse&lt;RCStateAccountAllResourceBalancesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RCStateAccountAllResourceBalancesResponse> rcStateAccountAllResourceBalancesPostWithHttpInfo(RCStateAccountAllResourceBalancesRequest rcStateAccountAllResourceBalancesRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rcStateAccountAllResourceBalancesPostRequestBuilder(rcStateAccountAllResourceBalancesRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rcStateAccountAllResourceBalancesPost", localVarResponse);
        }
        return new ApiResponse<RCStateAccountAllResourceBalancesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RCStateAccountAllResourceBalancesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rcStateAccountAllResourceBalancesPostRequestBuilder(RCStateAccountAllResourceBalancesRequest rcStateAccountAllResourceBalancesRequest) throws ApiException {
    // verify the required parameter 'rcStateAccountAllResourceBalancesRequest' is set
    if (rcStateAccountAllResourceBalancesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'rcStateAccountAllResourceBalancesRequest' when calling rcStateAccountAllResourceBalancesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rc/state/account-all-resource-balances";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(rcStateAccountAllResourceBalancesRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Resource Balance
   * Returns balance of the resource for an account
   * @param rcStateAccountResourceBalanceRequest  (required)
   * @return RCStateAccountResourceBalanceResponse
   * @throws ApiException if fails to make API call
   */
  public RCStateAccountResourceBalanceResponse rcStateAccountResourceBalancePost(RCStateAccountResourceBalanceRequest rcStateAccountResourceBalanceRequest) throws ApiException {
    ApiResponse<RCStateAccountResourceBalanceResponse> localVarResponse = rcStateAccountResourceBalancePostWithHttpInfo(rcStateAccountResourceBalanceRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Resource Balance
   * Returns balance of the resource for an account
   * @param rcStateAccountResourceBalanceRequest  (required)
   * @return ApiResponse&lt;RCStateAccountResourceBalanceResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RCStateAccountResourceBalanceResponse> rcStateAccountResourceBalancePostWithHttpInfo(RCStateAccountResourceBalanceRequest rcStateAccountResourceBalanceRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rcStateAccountResourceBalancePostRequestBuilder(rcStateAccountResourceBalanceRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rcStateAccountResourceBalancePost", localVarResponse);
        }
        return new ApiResponse<RCStateAccountResourceBalanceResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RCStateAccountResourceBalanceResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rcStateAccountResourceBalancePostRequestBuilder(RCStateAccountResourceBalanceRequest rcStateAccountResourceBalanceRequest) throws ApiException {
    // verify the required parameter 'rcStateAccountResourceBalanceRequest' is set
    if (rcStateAccountResourceBalanceRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'rcStateAccountResourceBalanceRequest' when calling rcStateAccountResourceBalancePost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rc/state/account-resource-balance";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(rcStateAccountResourceBalanceRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Entity Transactions Basic Outcomes
   * TODO 
   * @param rcStreamEntityTransactionsBasicOutcomesRequest  (required)
   * @return RCStreamEntityTransactionsBasicOutcomesResponse
   * @throws ApiException if fails to make API call
   */
  public RCStreamEntityTransactionsBasicOutcomesResponse rcStreamEntityTransactionsBasicOutcomesPost(RCStreamEntityTransactionsBasicOutcomesRequest rcStreamEntityTransactionsBasicOutcomesRequest) throws ApiException {
    ApiResponse<RCStreamEntityTransactionsBasicOutcomesResponse> localVarResponse = rcStreamEntityTransactionsBasicOutcomesPostWithHttpInfo(rcStreamEntityTransactionsBasicOutcomesRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Entity Transactions Basic Outcomes
   * TODO 
   * @param rcStreamEntityTransactionsBasicOutcomesRequest  (required)
   * @return ApiResponse&lt;RCStreamEntityTransactionsBasicOutcomesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RCStreamEntityTransactionsBasicOutcomesResponse> rcStreamEntityTransactionsBasicOutcomesPostWithHttpInfo(RCStreamEntityTransactionsBasicOutcomesRequest rcStreamEntityTransactionsBasicOutcomesRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rcStreamEntityTransactionsBasicOutcomesPostRequestBuilder(rcStreamEntityTransactionsBasicOutcomesRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rcStreamEntityTransactionsBasicOutcomesPost", localVarResponse);
        }
        return new ApiResponse<RCStreamEntityTransactionsBasicOutcomesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RCStreamEntityTransactionsBasicOutcomesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rcStreamEntityTransactionsBasicOutcomesPostRequestBuilder(RCStreamEntityTransactionsBasicOutcomesRequest rcStreamEntityTransactionsBasicOutcomesRequest) throws ApiException {
    // verify the required parameter 'rcStreamEntityTransactionsBasicOutcomesRequest' is set
    if (rcStreamEntityTransactionsBasicOutcomesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'rcStreamEntityTransactionsBasicOutcomesRequest' when calling rcStreamEntityTransactionsBasicOutcomesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rc/stream/entity-transactions-basic-outcomes";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(rcStreamEntityTransactionsBasicOutcomesRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Transactions Basic Outcomes
   * TODO 
   * @param rcStreamTransactionsBasicOutcomesRequest  (required)
   * @return RCStreamTransactionsBasicOutcomesResponse
   * @throws ApiException if fails to make API call
   */
  public RCStreamTransactionsBasicOutcomesResponse rcStreamTransactionsBasicOutcomesPost(RCStreamTransactionsBasicOutcomesRequest rcStreamTransactionsBasicOutcomesRequest) throws ApiException {
    ApiResponse<RCStreamTransactionsBasicOutcomesResponse> localVarResponse = rcStreamTransactionsBasicOutcomesPostWithHttpInfo(rcStreamTransactionsBasicOutcomesRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Transactions Basic Outcomes
   * TODO 
   * @param rcStreamTransactionsBasicOutcomesRequest  (required)
   * @return ApiResponse&lt;RCStreamTransactionsBasicOutcomesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RCStreamTransactionsBasicOutcomesResponse> rcStreamTransactionsBasicOutcomesPostWithHttpInfo(RCStreamTransactionsBasicOutcomesRequest rcStreamTransactionsBasicOutcomesRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rcStreamTransactionsBasicOutcomesPostRequestBuilder(rcStreamTransactionsBasicOutcomesRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rcStreamTransactionsBasicOutcomesPost", localVarResponse);
        }
        return new ApiResponse<RCStreamTransactionsBasicOutcomesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RCStreamTransactionsBasicOutcomesResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rcStreamTransactionsBasicOutcomesPostRequestBuilder(RCStreamTransactionsBasicOutcomesRequest rcStreamTransactionsBasicOutcomesRequest) throws ApiException {
    // verify the required parameter 'rcStreamTransactionsBasicOutcomesRequest' is set
    if (rcStreamTransactionsBasicOutcomesRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'rcStreamTransactionsBasicOutcomesRequest' when calling rcStreamTransactionsBasicOutcomesPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rc/stream/transactions-basic-outcomes";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(rcStreamTransactionsBasicOutcomesRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Transaction Construction
   * Returns information necessary to build a transaction
   * @param rcTransactionConstructionRequest  (required)
   * @return RCTransactionConstructionResponse
   * @throws ApiException if fails to make API call
   */
  public RCTransactionConstructionResponse rcTransactionConstructionPost(RCTransactionConstructionRequest rcTransactionConstructionRequest) throws ApiException {
    ApiResponse<RCTransactionConstructionResponse> localVarResponse = rcTransactionConstructionPostWithHttpInfo(rcTransactionConstructionRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Transaction Construction
   * Returns information necessary to build a transaction
   * @param rcTransactionConstructionRequest  (required)
   * @return ApiResponse&lt;RCTransactionConstructionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RCTransactionConstructionResponse> rcTransactionConstructionPostWithHttpInfo(RCTransactionConstructionRequest rcTransactionConstructionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rcTransactionConstructionPostRequestBuilder(rcTransactionConstructionRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rcTransactionConstructionPost", localVarResponse);
        }
        return new ApiResponse<RCTransactionConstructionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RCTransactionConstructionResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rcTransactionConstructionPostRequestBuilder(RCTransactionConstructionRequest rcTransactionConstructionRequest) throws ApiException {
    // verify the required parameter 'rcTransactionConstructionRequest' is set
    if (rcTransactionConstructionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'rcTransactionConstructionRequest' when calling rcTransactionConstructionPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rc/transaction/construction";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(rcTransactionConstructionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get Transaction Status
   * Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
   * @param rcTransactionStatusRequest  (required)
   * @return RCTransactionStatusResponse
   * @throws ApiException if fails to make API call
   */
  public RCTransactionStatusResponse rcTransactionStatusPost(RCTransactionStatusRequest rcTransactionStatusRequest) throws ApiException {
    ApiResponse<RCTransactionStatusResponse> localVarResponse = rcTransactionStatusPostWithHttpInfo(rcTransactionStatusRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Transaction Status
   * Shares the node&#39;s knowledge of any payloads associated with the given intent hash. Generally there will be a single payload for a given intent, but it&#39;s theoretically possible there may be multiple. This knowledge is summarised into a status for the intent. This summarised status in the response is likely sufficient for most clients. 
   * @param rcTransactionStatusRequest  (required)
   * @return ApiResponse&lt;RCTransactionStatusResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RCTransactionStatusResponse> rcTransactionStatusPostWithHttpInfo(RCTransactionStatusRequest rcTransactionStatusRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rcTransactionStatusPostRequestBuilder(rcTransactionStatusRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rcTransactionStatusPost", localVarResponse);
        }
        return new ApiResponse<RCTransactionStatusResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RCTransactionStatusResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rcTransactionStatusPostRequestBuilder(RCTransactionStatusRequest rcTransactionStatusRequest) throws ApiException {
    // verify the required parameter 'rcTransactionStatusRequest' is set
    if (rcTransactionStatusRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'rcTransactionStatusRequest' when calling rcTransactionStatusPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rc/transaction/status";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(rcTransactionStatusRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Transaction Submit
   * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
   * @param rcTransactionSubmitRequest  (required)
   * @return RCTransactionSubmitResponse
   * @throws ApiException if fails to make API call
   */
  public RCTransactionSubmitResponse rcTransactionSubmitPost(RCTransactionSubmitRequest rcTransactionSubmitRequest) throws ApiException {
    ApiResponse<RCTransactionSubmitResponse> localVarResponse = rcTransactionSubmitPostWithHttpInfo(rcTransactionSubmitRequest);
    return localVarResponse.getData();
  }

  /**
   * Transaction Submit
   * Submits a notarized transaction to the network. Returns whether the transaction submission was already included in the node&#39;s mempool. 
   * @param rcTransactionSubmitRequest  (required)
   * @return ApiResponse&lt;RCTransactionSubmitResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RCTransactionSubmitResponse> rcTransactionSubmitPostWithHttpInfo(RCTransactionSubmitRequest rcTransactionSubmitRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = rcTransactionSubmitPostRequestBuilder(rcTransactionSubmitRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("rcTransactionSubmitPost", localVarResponse);
        }
        return new ApiResponse<RCTransactionSubmitResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RCTransactionSubmitResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder rcTransactionSubmitPostRequestBuilder(RCTransactionSubmitRequest rcTransactionSubmitRequest) throws ApiException {
    // verify the required parameter 'rcTransactionSubmitRequest' is set
    if (rcTransactionSubmitRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'rcTransactionSubmitRequest' when calling rcTransactionSubmitPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/rc/transaction/submit";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(rcTransactionSubmitRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
