/*
 * Radix Core API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.BlueprintFieldCondition;
import com.radixdlt.api.core.generated.models.BlueprintFieldTransience;
import com.radixdlt.api.core.generated.models.BlueprintResolvedTypeReference;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BlueprintFieldInfo
 */
@JsonPropertyOrder({
  BlueprintFieldInfo.JSON_PROPERTY_INDEX,
  BlueprintFieldInfo.JSON_PROPERTY_NAME,
  BlueprintFieldInfo.JSON_PROPERTY_TYPE_REFERENCE,
  BlueprintFieldInfo.JSON_PROPERTY_CONDITION,
  BlueprintFieldInfo.JSON_PROPERTY_TRANSIENCE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BlueprintFieldInfo {
  public static final String JSON_PROPERTY_INDEX = "index";
  private Integer index;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TYPE_REFERENCE = "type_reference";
  private BlueprintResolvedTypeReference typeReference;

  public static final String JSON_PROPERTY_CONDITION = "condition";
  private BlueprintFieldCondition condition;

  public static final String JSON_PROPERTY_TRANSIENCE = "transience";
  private BlueprintFieldTransience transience;

  public BlueprintFieldInfo() { 
  }

  public BlueprintFieldInfo index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Get index
   * minimum: 0
   * maximum: 255
   * @return index
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndex(Integer index) {
    this.index = index;
  }


  public BlueprintFieldInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A human-readable name, derived on a best-effort basis from the type info/blueprint/schema. May be missing either because the subject deliberately has no defined name (e.g. in case of an unnamed tuple) or because the name resolution was not successful (e.g. when certain naming conventions are not observed within the relevant definitions). 
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A human-readable name, derived on a best-effort basis from the type info/blueprint/schema. May be missing either because the subject deliberately has no defined name (e.g. in case of an unnamed tuple) or because the name resolution was not successful (e.g. when certain naming conventions are not observed within the relevant definitions). ")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public BlueprintFieldInfo typeReference(BlueprintResolvedTypeReference typeReference) {
    this.typeReference = typeReference;
    return this;
  }

   /**
   * Get typeReference
   * @return typeReference
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TYPE_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BlueprintResolvedTypeReference getTypeReference() {
    return typeReference;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTypeReference(BlueprintResolvedTypeReference typeReference) {
    this.typeReference = typeReference;
  }


  public BlueprintFieldInfo condition(BlueprintFieldCondition condition) {
    this.condition = condition;
    return this;
  }

   /**
   * Get condition
   * @return condition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BlueprintFieldCondition getCondition() {
    return condition;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCondition(BlueprintFieldCondition condition) {
    this.condition = condition;
  }


  public BlueprintFieldInfo transience(BlueprintFieldTransience transience) {
    this.transience = transience;
    return this;
  }

   /**
   * Get transience
   * @return transience
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSIENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BlueprintFieldTransience getTransience() {
    return transience;
  }


  @JsonProperty(JSON_PROPERTY_TRANSIENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransience(BlueprintFieldTransience transience) {
    this.transience = transience;
  }


  /**
   * Return true if this BlueprintFieldInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintFieldInfo blueprintFieldInfo = (BlueprintFieldInfo) o;
    return Objects.equals(this.index, blueprintFieldInfo.index) &&
        Objects.equals(this.name, blueprintFieldInfo.name) &&
        Objects.equals(this.typeReference, blueprintFieldInfo.typeReference) &&
        Objects.equals(this.condition, blueprintFieldInfo.condition) &&
        Objects.equals(this.transience, blueprintFieldInfo.transience);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, name, typeReference, condition, transience);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintFieldInfo {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typeReference: ").append(toIndentedString(typeReference)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    transience: ").append(toIndentedString(transience)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

