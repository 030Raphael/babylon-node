/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.FunctionDefinition;
import com.radixdlt.api.core.generated.models.LocalTypeIndex;
import com.radixdlt.api.core.generated.models.SborData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BlueprintSchema
 */
@JsonPropertyOrder({
  BlueprintSchema.JSON_PROPERTY_SCHEMA,
  BlueprintSchema.JSON_PROPERTY_SUBSTATES,
  BlueprintSchema.JSON_PROPERTY_FUNCTION_DEFINITIONS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BlueprintSchema {
  public static final String JSON_PROPERTY_SCHEMA = "schema";
  private SborData schema;

  public static final String JSON_PROPERTY_SUBSTATES = "substates";
  private List<LocalTypeIndex> substates = new ArrayList<>();

  public static final String JSON_PROPERTY_FUNCTION_DEFINITIONS = "function_definitions";
  private Map<String, FunctionDefinition> functionDefinitions = new HashMap<>();

  public BlueprintSchema() { 
  }

  public BlueprintSchema schema(SborData schema) {
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SborData getSchema() {
    return schema;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchema(SborData schema) {
    this.schema = schema;
  }


  public BlueprintSchema substates(List<LocalTypeIndex> substates) {
    this.substates = substates;
    return this;
  }

  public BlueprintSchema addSubstatesItem(LocalTypeIndex substatesItem) {
    this.substates.add(substatesItem);
    return this;
  }

   /**
   * The type index of the substates under the SELF module - in the context of the blueprint&#39;s SBOR schema. 
   * @return substates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type index of the substates under the SELF module - in the context of the blueprint's SBOR schema. ")
  @JsonProperty(JSON_PROPERTY_SUBSTATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LocalTypeIndex> getSubstates() {
    return substates;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstates(List<LocalTypeIndex> substates) {
    this.substates = substates;
  }


  public BlueprintSchema functionDefinitions(Map<String, FunctionDefinition> functionDefinitions) {
    this.functionDefinitions = functionDefinitions;
    return this;
  }

  public BlueprintSchema putFunctionDefinitionsItem(String key, FunctionDefinition functionDefinitionsItem) {
    this.functionDefinitions.put(key, functionDefinitionsItem);
    return this;
  }

   /**
   * A map from the function name to the FunctionDefinition
   * @return functionDefinitions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A map from the function name to the FunctionDefinition")
  @JsonProperty(JSON_PROPERTY_FUNCTION_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, FunctionDefinition> getFunctionDefinitions() {
    return functionDefinitions;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFunctionDefinitions(Map<String, FunctionDefinition> functionDefinitions) {
    this.functionDefinitions = functionDefinitions;
  }


  /**
   * Return true if this BlueprintSchema object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintSchema blueprintSchema = (BlueprintSchema) o;
    return Objects.equals(this.schema, blueprintSchema.schema) &&
        Objects.equals(this.substates, blueprintSchema.substates) &&
        Objects.equals(this.functionDefinitions, blueprintSchema.functionDefinitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schema, substates, functionDefinitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintSchema {\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    substates: ").append(toIndentedString(substates)).append("\n");
    sb.append("    functionDefinitions: ").append(toIndentedString(functionDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

