/*
 * Babylon Core API - RCnet V2
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the first release candidate of the Radix Babylon network (\"RCnet-V1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.FunctionSchema;
import com.radixdlt.api.core.generated.models.LocalTypeIndex;
import com.radixdlt.api.core.generated.models.SborData;
import com.radixdlt.api.core.generated.models.VirtualLazyLoadSchema;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BlueprintSchema
 */
@JsonPropertyOrder({
  BlueprintSchema.JSON_PROPERTY_SCHEMA,
  BlueprintSchema.JSON_PROPERTY_SUBSTATES,
  BlueprintSchema.JSON_PROPERTY_FUNCTION_SCHEMAS,
  BlueprintSchema.JSON_PROPERTY_VIRTUAL_LAZY_LOAD_FUNCTION_SCHEMAS,
  BlueprintSchema.JSON_PROPERTY_EVENT_SCHEMAS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BlueprintSchema {
  public static final String JSON_PROPERTY_SCHEMA = "schema";
  private SborData schema;

  public static final String JSON_PROPERTY_SUBSTATES = "substates";
  private List<LocalTypeIndex> substates = new ArrayList<>();

  public static final String JSON_PROPERTY_FUNCTION_SCHEMAS = "function_schemas";
  private Map<String, FunctionSchema> functionSchemas = new HashMap<>();

  public static final String JSON_PROPERTY_VIRTUAL_LAZY_LOAD_FUNCTION_SCHEMAS = "virtual_lazy_load_function_schemas";
  private Map<String, VirtualLazyLoadSchema> virtualLazyLoadFunctionSchemas = new HashMap<>();

  public static final String JSON_PROPERTY_EVENT_SCHEMAS = "event_schemas";
  private Map<String, LocalTypeIndex> eventSchemas = new HashMap<>();

  public BlueprintSchema() { 
  }

  public BlueprintSchema schema(SborData schema) {
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SborData getSchema() {
    return schema;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchema(SborData schema) {
    this.schema = schema;
  }


  public BlueprintSchema substates(List<LocalTypeIndex> substates) {
    this.substates = substates;
    return this;
  }

  public BlueprintSchema addSubstatesItem(LocalTypeIndex substatesItem) {
    this.substates.add(substatesItem);
    return this;
  }

   /**
   * The type index of the substates under the SELF module - in the context of the blueprint&#39;s SBOR schema. 
   * @return substates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type index of the substates under the SELF module - in the context of the blueprint's SBOR schema. ")
  @JsonProperty(JSON_PROPERTY_SUBSTATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LocalTypeIndex> getSubstates() {
    return substates;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstates(List<LocalTypeIndex> substates) {
    this.substates = substates;
  }


  public BlueprintSchema functionSchemas(Map<String, FunctionSchema> functionSchemas) {
    this.functionSchemas = functionSchemas;
    return this;
  }

  public BlueprintSchema putFunctionSchemasItem(String key, FunctionSchema functionSchemasItem) {
    this.functionSchemas.put(key, functionSchemasItem);
    return this;
  }

   /**
   * A map from the function name to the FunctionSchema
   * @return functionSchemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A map from the function name to the FunctionSchema")
  @JsonProperty(JSON_PROPERTY_FUNCTION_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, FunctionSchema> getFunctionSchemas() {
    return functionSchemas;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFunctionSchemas(Map<String, FunctionSchema> functionSchemas) {
    this.functionSchemas = functionSchemas;
  }


  public BlueprintSchema virtualLazyLoadFunctionSchemas(Map<String, VirtualLazyLoadSchema> virtualLazyLoadFunctionSchemas) {
    this.virtualLazyLoadFunctionSchemas = virtualLazyLoadFunctionSchemas;
    return this;
  }

  public BlueprintSchema putVirtualLazyLoadFunctionSchemasItem(String key, VirtualLazyLoadSchema virtualLazyLoadFunctionSchemasItem) {
    this.virtualLazyLoadFunctionSchemas.put(key, virtualLazyLoadFunctionSchemasItem);
    return this;
  }

   /**
   * A map from the system function ID to the VirtualLazyLoadSchema
   * @return virtualLazyLoadFunctionSchemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A map from the system function ID to the VirtualLazyLoadSchema")
  @JsonProperty(JSON_PROPERTY_VIRTUAL_LAZY_LOAD_FUNCTION_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, VirtualLazyLoadSchema> getVirtualLazyLoadFunctionSchemas() {
    return virtualLazyLoadFunctionSchemas;
  }


  @JsonProperty(JSON_PROPERTY_VIRTUAL_LAZY_LOAD_FUNCTION_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVirtualLazyLoadFunctionSchemas(Map<String, VirtualLazyLoadSchema> virtualLazyLoadFunctionSchemas) {
    this.virtualLazyLoadFunctionSchemas = virtualLazyLoadFunctionSchemas;
  }


  public BlueprintSchema eventSchemas(Map<String, LocalTypeIndex> eventSchemas) {
    this.eventSchemas = eventSchemas;
    return this;
  }

  public BlueprintSchema putEventSchemasItem(String key, LocalTypeIndex eventSchemasItem) {
    this.eventSchemas.put(key, eventSchemasItem);
    return this;
  }

   /**
   * A map from the event name to the local type index for the event payload under the blueprint schema.
   * @return eventSchemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A map from the event name to the local type index for the event payload under the blueprint schema.")
  @JsonProperty(JSON_PROPERTY_EVENT_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, LocalTypeIndex> getEventSchemas() {
    return eventSchemas;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_SCHEMAS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventSchemas(Map<String, LocalTypeIndex> eventSchemas) {
    this.eventSchemas = eventSchemas;
  }


  /**
   * Return true if this BlueprintSchema object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintSchema blueprintSchema = (BlueprintSchema) o;
    return Objects.equals(this.schema, blueprintSchema.schema) &&
        Objects.equals(this.substates, blueprintSchema.substates) &&
        Objects.equals(this.functionSchemas, blueprintSchema.functionSchemas) &&
        Objects.equals(this.virtualLazyLoadFunctionSchemas, blueprintSchema.virtualLazyLoadFunctionSchemas) &&
        Objects.equals(this.eventSchemas, blueprintSchema.eventSchemas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schema, substates, functionSchemas, virtualLazyLoadFunctionSchemas, eventSchemas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintSchema {\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    substates: ").append(toIndentedString(substates)).append("\n");
    sb.append("    functionSchemas: ").append(toIndentedString(functionSchemas)).append("\n");
    sb.append("    virtualLazyLoadFunctionSchemas: ").append(toIndentedString(virtualLazyLoadFunctionSchemas)).append("\n");
    sb.append("    eventSchemas: ").append(toIndentedString(eventSchemas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

