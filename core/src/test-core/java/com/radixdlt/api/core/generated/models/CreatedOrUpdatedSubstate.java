/*
 * Babylon Core API - RCnet V2
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the first release candidate of the Radix Babylon network (\"RCnet-V1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.Substate;
import com.radixdlt.api.core.generated.models.SubstateId;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CreatedOrUpdatedSubstate
 */
@JsonPropertyOrder({
  CreatedOrUpdatedSubstate.JSON_PROPERTY_SUBSTATE_ID,
  CreatedOrUpdatedSubstate.JSON_PROPERTY_SUBSTATE_HEX,
  CreatedOrUpdatedSubstate.JSON_PROPERTY_SUBSTATE_DATA_HASH,
  CreatedOrUpdatedSubstate.JSON_PROPERTY_SUBSTATE_DATA
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreatedOrUpdatedSubstate {
  public static final String JSON_PROPERTY_SUBSTATE_ID = "substate_id";
  private SubstateId substateId;

  public static final String JSON_PROPERTY_SUBSTATE_HEX = "substate_hex";
  private String substateHex;

  public static final String JSON_PROPERTY_SUBSTATE_DATA_HASH = "substate_data_hash";
  private String substateDataHash;

  public static final String JSON_PROPERTY_SUBSTATE_DATA = "substate_data";
  private Substate substateData;

  public CreatedOrUpdatedSubstate() { 
  }

  public CreatedOrUpdatedSubstate substateId(SubstateId substateId) {
    this.substateId = substateId;
    return this;
  }

   /**
   * Get substateId
   * @return substateId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SubstateId getSubstateId() {
    return substateId;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateId(SubstateId substateId) {
    this.substateId = substateId;
  }


  public CreatedOrUpdatedSubstate substateHex(String substateHex) {
    this.substateHex = substateHex;
    return this;
  }

   /**
   * The hex-encoded, SBOR-encoded substate data bytes
   * @return substateHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded, SBOR-encoded substate data bytes")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubstateHex() {
    return substateHex;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateHex(String substateHex) {
    this.substateHex = substateHex;
  }


  public CreatedOrUpdatedSubstate substateDataHash(String substateDataHash) {
    this.substateDataHash = substateDataHash;
    return this;
  }

   /**
   * The hex-encoded Blake2b-256 hash of the substate data bytes
   * @return substateDataHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded Blake2b-256 hash of the substate data bytes")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_DATA_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubstateDataHash() {
    return substateDataHash;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_DATA_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateDataHash(String substateDataHash) {
    this.substateDataHash = substateDataHash;
  }


  public CreatedOrUpdatedSubstate substateData(Substate substateData) {
    this.substateData = substateData;
    return this;
  }

   /**
   * Get substateData
   * @return substateData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Substate getSubstateData() {
    return substateData;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateData(Substate substateData) {
    this.substateData = substateData;
  }


  /**
   * Return true if this CreatedOrUpdatedSubstate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatedOrUpdatedSubstate createdOrUpdatedSubstate = (CreatedOrUpdatedSubstate) o;
    return Objects.equals(this.substateId, createdOrUpdatedSubstate.substateId) &&
        Objects.equals(this.substateHex, createdOrUpdatedSubstate.substateHex) &&
        Objects.equals(this.substateDataHash, createdOrUpdatedSubstate.substateDataHash) &&
        Objects.equals(this.substateData, createdOrUpdatedSubstate.substateData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(substateId, substateHex, substateDataHash, substateData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatedOrUpdatedSubstate {\n");
    sb.append("    substateId: ").append(toIndentedString(substateId)).append("\n");
    sb.append("    substateHex: ").append(toIndentedString(substateHex)).append("\n");
    sb.append("    substateDataHash: ").append(toIndentedString(substateDataHash)).append("\n");
    sb.append("    substateData: ").append(toIndentedString(substateData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

