/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.EpochUpdateValidatorTransaction;
import com.radixdlt.api.core.generated.models.EpochUpdateValidatorTransactionAllOf;
import com.radixdlt.api.core.generated.models.TimeUpdateValidatorTransaction;
import com.radixdlt.api.core.generated.models.ValidatorTransaction;
import com.radixdlt.api.core.generated.models.ValidatorTransactionType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.radixdlt.api.core.generated.client.JSON;
/**
 * EpochUpdateValidatorTransaction
 */
@JsonPropertyOrder({
  EpochUpdateValidatorTransaction.JSON_PROPERTY_SCRYPTO_EPOCH
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = EpochUpdateValidatorTransaction.class, name = "EpochUpdate"),
  @JsonSubTypes.Type(value = TimeUpdateValidatorTransaction.class, name = "TimeUpdate"),
})

public class EpochUpdateValidatorTransaction extends ValidatorTransaction {
  public static final String JSON_PROPERTY_SCRYPTO_EPOCH = "scrypto_epoch";
  private Long scryptoEpoch;

  public EpochUpdateValidatorTransaction() { 
  }

  public EpochUpdateValidatorTransaction scryptoEpoch(Long scryptoEpoch) {
    this.scryptoEpoch = scryptoEpoch;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the new epoch. Note that currently this is not the same as &#x60;consensus_epoch&#x60;, but eventually will be. 
   * minimum: 0
   * maximum: 10000000000
   * @return scryptoEpoch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `10^10`, marking the new epoch. Note that currently this is not the same as `consensus_epoch`, but eventually will be. ")
  @JsonProperty(JSON_PROPERTY_SCRYPTO_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getScryptoEpoch() {
    return scryptoEpoch;
  }


  @JsonProperty(JSON_PROPERTY_SCRYPTO_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScryptoEpoch(Long scryptoEpoch) {
    this.scryptoEpoch = scryptoEpoch;
  }


  /**
   * Return true if this EpochUpdateValidatorTransaction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EpochUpdateValidatorTransaction epochUpdateValidatorTransaction = (EpochUpdateValidatorTransaction) o;
    return Objects.equals(this.scryptoEpoch, epochUpdateValidatorTransaction.scryptoEpoch) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scryptoEpoch, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EpochUpdateValidatorTransaction {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    scryptoEpoch: ").append(toIndentedString(scryptoEpoch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("EpochUpdate", EpochUpdateValidatorTransaction.class);
  mappings.put("TimeUpdate", TimeUpdateValidatorTransaction.class);
  mappings.put("EpochUpdateValidatorTransaction", EpochUpdateValidatorTransaction.class);
  JSON.registerDiscriminator(EpochUpdateValidatorTransaction.class, "type", mappings);
}
}

