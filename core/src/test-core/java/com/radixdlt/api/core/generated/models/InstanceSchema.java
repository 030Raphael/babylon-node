/*
 * Babylon Core API - RCnet v3
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the second release candidate of the Radix Babylon network (\"RCnet v3\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.LocalTypeIndex;
import com.radixdlt.api.core.generated.models.ScryptoSchema;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * InstanceSchema
 */
@JsonPropertyOrder({
  InstanceSchema.JSON_PROPERTY_SCHEMA,
  InstanceSchema.JSON_PROPERTY_SCHEMA_HASH,
  InstanceSchema.JSON_PROPERTY_INSTANCE_TYPE_LOOKUP
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstanceSchema {
  public static final String JSON_PROPERTY_SCHEMA = "schema";
  private ScryptoSchema schema;

  public static final String JSON_PROPERTY_SCHEMA_HASH = "schema_hash";
  private String schemaHash;

  public static final String JSON_PROPERTY_INSTANCE_TYPE_LOOKUP = "instance_type_lookup";
  private List<LocalTypeIndex> instanceTypeLookup = new ArrayList<>();

  public InstanceSchema() { 
  }

  public InstanceSchema schema(ScryptoSchema schema) {
    this.schema = schema;
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ScryptoSchema getSchema() {
    return schema;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchema(ScryptoSchema schema) {
    this.schema = schema;
  }


  public InstanceSchema schemaHash(String schemaHash) {
    this.schemaHash = schemaHash;
    return this;
  }

   /**
   * The hex-encoded schema hash, capturing the identity of an SBOR schema.
   * @return schemaHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded schema hash, capturing the identity of an SBOR schema.")
  @JsonProperty(JSON_PROPERTY_SCHEMA_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSchemaHash() {
    return schemaHash;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchemaHash(String schemaHash) {
    this.schemaHash = schemaHash;
  }


  public InstanceSchema instanceTypeLookup(List<LocalTypeIndex> instanceTypeLookup) {
    this.instanceTypeLookup = instanceTypeLookup;
    return this;
  }

  public InstanceSchema addInstanceTypeLookupItem(LocalTypeIndex instanceTypeLookupItem) {
    this.instanceTypeLookup.add(instanceTypeLookupItem);
    return this;
  }

   /**
   * This is a vector which is a lookup of the \&quot;instance type index\&quot; to the local type index which can be used to resolve the instance type in the instance schema. 
   * @return instanceTypeLookup
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "This is a vector which is a lookup of the \"instance type index\" to the local type index which can be used to resolve the instance type in the instance schema. ")
  @JsonProperty(JSON_PROPERTY_INSTANCE_TYPE_LOOKUP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LocalTypeIndex> getInstanceTypeLookup() {
    return instanceTypeLookup;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_TYPE_LOOKUP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstanceTypeLookup(List<LocalTypeIndex> instanceTypeLookup) {
    this.instanceTypeLookup = instanceTypeLookup;
  }


  /**
   * Return true if this InstanceSchema object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceSchema instanceSchema = (InstanceSchema) o;
    return Objects.equals(this.schema, instanceSchema.schema) &&
        Objects.equals(this.schemaHash, instanceSchema.schemaHash) &&
        Objects.equals(this.instanceTypeLookup, instanceSchema.instanceTypeLookup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schema, schemaHash, instanceTypeLookup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceSchema {\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    schemaHash: ").append(toIndentedString(schemaHash)).append("\n");
    sb.append("    instanceTypeLookup: ").append(toIndentedString(instanceTypeLookup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

