/*
 * Radix Core API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.BlueprintReference;
import com.radixdlt.api.core.generated.models.EntityAncestryInfo;
import com.radixdlt.api.core.generated.models.EntityInfo;
import com.radixdlt.api.core.generated.models.EntityType;
import com.radixdlt.api.core.generated.models.KeyValueStoreEntityInfo;
import com.radixdlt.api.core.generated.models.ObjectEntityInfo;
import com.radixdlt.api.core.generated.models.ObjectEntityInfoAllOf;
import com.radixdlt.api.core.generated.models.ObjectEntityInfoAllOfAttachedModules;
import com.radixdlt.api.core.generated.models.ObjectInstanceInfo;
import com.radixdlt.api.core.generated.models.ObjectModuleStateInfo;
import com.radixdlt.api.core.generated.models.SystemType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.radixdlt.api.core.generated.client.JSON;
/**
 * ObjectEntityInfo
 */
@JsonPropertyOrder({
  ObjectEntityInfo.JSON_PROPERTY_ENTITY_TYPE,
  ObjectEntityInfo.JSON_PROPERTY_IS_GLOBAL,
  ObjectEntityInfo.JSON_PROPERTY_IS_INSTANTIATED,
  ObjectEntityInfo.JSON_PROPERTY_MAIN_MODULE_STATE,
  ObjectEntityInfo.JSON_PROPERTY_ATTACHED_MODULES,
  ObjectEntityInfo.JSON_PROPERTY_BLUEPRINT_REFERENCE,
  ObjectEntityInfo.JSON_PROPERTY_INSTANCE_INFO
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "system_type", // ignore manually set system_type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the system_type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "system_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = KeyValueStoreEntityInfo.class, name = "KeyValueStore"),
  @JsonSubTypes.Type(value = ObjectEntityInfo.class, name = "Object"),
})

public class ObjectEntityInfo extends EntityInfo {
  public static final String JSON_PROPERTY_ENTITY_TYPE = "entity_type";
  private EntityType entityType;

  public static final String JSON_PROPERTY_IS_GLOBAL = "is_global";
  private Boolean isGlobal;

  public static final String JSON_PROPERTY_IS_INSTANTIATED = "is_instantiated";
  private Boolean isInstantiated;

  public static final String JSON_PROPERTY_MAIN_MODULE_STATE = "main_module_state";
  private ObjectModuleStateInfo mainModuleState;

  public static final String JSON_PROPERTY_ATTACHED_MODULES = "attached_modules";
  private List<ObjectEntityInfoAllOfAttachedModules> attachedModules = new ArrayList<>();

  public static final String JSON_PROPERTY_BLUEPRINT_REFERENCE = "blueprint_reference";
  private BlueprintReference blueprintReference;

  public static final String JSON_PROPERTY_INSTANCE_INFO = "instance_info";
  private ObjectInstanceInfo instanceInfo;

  public ObjectEntityInfo() { 
  }

  public ObjectEntityInfo entityType(EntityType entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityType getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntityType(EntityType entityType) {
    this.entityType = entityType;
  }


  public ObjectEntityInfo isGlobal(Boolean isGlobal) {
    this.isGlobal = isGlobal;
    return this;
  }

   /**
   * Whether the object is a top-level root, or a child of some other entity.
   * @return isGlobal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the object is a top-level root, or a child of some other entity.")
  @JsonProperty(JSON_PROPERTY_IS_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsGlobal() {
    return isGlobal;
  }


  @JsonProperty(JSON_PROPERTY_IS_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsGlobal(Boolean isGlobal) {
    this.isGlobal = isGlobal;
  }


  public ObjectEntityInfo isInstantiated(Boolean isInstantiated) {
    this.isInstantiated = isInstantiated;
    return this;
  }

   /**
   * Whether the object&#39;s state is already physically persisted on ledger.
   * @return isInstantiated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the object's state is already physically persisted on ledger.")
  @JsonProperty(JSON_PROPERTY_IS_INSTANTIATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsInstantiated() {
    return isInstantiated;
  }


  @JsonProperty(JSON_PROPERTY_IS_INSTANTIATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsInstantiated(Boolean isInstantiated) {
    this.isInstantiated = isInstantiated;
  }


  public ObjectEntityInfo mainModuleState(ObjectModuleStateInfo mainModuleState) {
    this.mainModuleState = mainModuleState;
    return this;
  }

   /**
   * Get mainModuleState
   * @return mainModuleState
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MAIN_MODULE_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ObjectModuleStateInfo getMainModuleState() {
    return mainModuleState;
  }


  @JsonProperty(JSON_PROPERTY_MAIN_MODULE_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMainModuleState(ObjectModuleStateInfo mainModuleState) {
    this.mainModuleState = mainModuleState;
  }


  public ObjectEntityInfo attachedModules(List<ObjectEntityInfoAllOfAttachedModules> attachedModules) {
    this.attachedModules = attachedModules;
    return this;
  }

  public ObjectEntityInfo addAttachedModulesItem(ObjectEntityInfoAllOfAttachedModules attachedModulesItem) {
    this.attachedModules.add(attachedModulesItem);
    return this;
  }

   /**
   * Information about the other modules attached to the object (possibly empty, even when &#x60;is_global&#x60;). 
   * @return attachedModules
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Information about the other modules attached to the object (possibly empty, even when `is_global`). ")
  @JsonProperty(JSON_PROPERTY_ATTACHED_MODULES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObjectEntityInfoAllOfAttachedModules> getAttachedModules() {
    return attachedModules;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHED_MODULES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAttachedModules(List<ObjectEntityInfoAllOfAttachedModules> attachedModules) {
    this.attachedModules = attachedModules;
  }


  public ObjectEntityInfo blueprintReference(BlueprintReference blueprintReference) {
    this.blueprintReference = blueprintReference;
    return this;
  }

   /**
   * Get blueprintReference
   * @return blueprintReference
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BLUEPRINT_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BlueprintReference getBlueprintReference() {
    return blueprintReference;
  }


  @JsonProperty(JSON_PROPERTY_BLUEPRINT_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBlueprintReference(BlueprintReference blueprintReference) {
    this.blueprintReference = blueprintReference;
  }


  public ObjectEntityInfo instanceInfo(ObjectInstanceInfo instanceInfo) {
    this.instanceInfo = instanceInfo;
    return this;
  }

   /**
   * Get instanceInfo
   * @return instanceInfo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_INSTANCE_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ObjectInstanceInfo getInstanceInfo() {
    return instanceInfo;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstanceInfo(ObjectInstanceInfo instanceInfo) {
    this.instanceInfo = instanceInfo;
  }


  /**
   * Return true if this ObjectEntityInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectEntityInfo objectEntityInfo = (ObjectEntityInfo) o;
    return Objects.equals(this.entityType, objectEntityInfo.entityType) &&
        Objects.equals(this.isGlobal, objectEntityInfo.isGlobal) &&
        Objects.equals(this.isInstantiated, objectEntityInfo.isInstantiated) &&
        Objects.equals(this.mainModuleState, objectEntityInfo.mainModuleState) &&
        Objects.equals(this.attachedModules, objectEntityInfo.attachedModules) &&
        Objects.equals(this.blueprintReference, objectEntityInfo.blueprintReference) &&
        Objects.equals(this.instanceInfo, objectEntityInfo.instanceInfo) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityType, isGlobal, isInstantiated, mainModuleState, attachedModules, blueprintReference, instanceInfo, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectEntityInfo {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    isGlobal: ").append(toIndentedString(isGlobal)).append("\n");
    sb.append("    isInstantiated: ").append(toIndentedString(isInstantiated)).append("\n");
    sb.append("    mainModuleState: ").append(toIndentedString(mainModuleState)).append("\n");
    sb.append("    attachedModules: ").append(toIndentedString(attachedModules)).append("\n");
    sb.append("    blueprintReference: ").append(toIndentedString(blueprintReference)).append("\n");
    sb.append("    instanceInfo: ").append(toIndentedString(instanceInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("KeyValueStore", KeyValueStoreEntityInfo.class);
  mappings.put("Object", ObjectEntityInfo.class);
  mappings.put("ObjectEntityInfo", ObjectEntityInfo.class);
  JSON.registerDiscriminator(ObjectEntityInfo.class, "system_type", mappings);
}
}

