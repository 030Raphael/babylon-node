/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.AccessRule;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * PackageFunctionAccessRule
 */
@JsonPropertyOrder({
  PackageFunctionAccessRule.JSON_PROPERTY_BLUEPRINT,
  PackageFunctionAccessRule.JSON_PROPERTY_FUNCTION_NAME,
  PackageFunctionAccessRule.JSON_PROPERTY_ACCESS_RULE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PackageFunctionAccessRule {
  public static final String JSON_PROPERTY_BLUEPRINT = "blueprint";
  private String blueprint;

  public static final String JSON_PROPERTY_FUNCTION_NAME = "function_name";
  private String functionName;

  public static final String JSON_PROPERTY_ACCESS_RULE = "access_rule";
  private AccessRule accessRule;

  public PackageFunctionAccessRule() { 
  }

  public PackageFunctionAccessRule blueprint(String blueprint) {
    this.blueprint = blueprint;
    return this;
  }

   /**
   * Get blueprint
   * @return blueprint
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BLUEPRINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBlueprint() {
    return blueprint;
  }


  @JsonProperty(JSON_PROPERTY_BLUEPRINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBlueprint(String blueprint) {
    this.blueprint = blueprint;
  }


  public PackageFunctionAccessRule functionName(String functionName) {
    this.functionName = functionName;
    return this;
  }

   /**
   * Get functionName
   * @return functionName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_FUNCTION_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFunctionName() {
    return functionName;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFunctionName(String functionName) {
    this.functionName = functionName;
  }


  public PackageFunctionAccessRule accessRule(AccessRule accessRule) {
    this.accessRule = accessRule;
    return this;
  }

   /**
   * Get accessRule
   * @return accessRule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ACCESS_RULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AccessRule getAccessRule() {
    return accessRule;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_RULE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccessRule(AccessRule accessRule) {
    this.accessRule = accessRule;
  }


  /**
   * Return true if this PackageFunctionAccessRule object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageFunctionAccessRule packageFunctionAccessRule = (PackageFunctionAccessRule) o;
    return Objects.equals(this.blueprint, packageFunctionAccessRule.blueprint) &&
        Objects.equals(this.functionName, packageFunctionAccessRule.functionName) &&
        Objects.equals(this.accessRule, packageFunctionAccessRule.accessRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueprint, functionName, accessRule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageFunctionAccessRule {\n");
    sb.append("    blueprint: ").append(toIndentedString(blueprint)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    accessRule: ").append(toIndentedString(accessRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

