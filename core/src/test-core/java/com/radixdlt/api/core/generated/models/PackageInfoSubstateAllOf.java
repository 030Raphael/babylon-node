/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.BlueprintData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * PackageInfoSubstateAllOf
 */
@JsonPropertyOrder({
  PackageInfoSubstateAllOf.JSON_PROPERTY_BLUEPRINTS,
  PackageInfoSubstateAllOf.JSON_PROPERTY_DEPENDENT_RESOURCES,
  PackageInfoSubstateAllOf.JSON_PROPERTY_DEPENDENT_COMPONENTS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PackageInfoSubstateAllOf {
  public static final String JSON_PROPERTY_BLUEPRINTS = "blueprints";
  private Map<String, BlueprintData> blueprints = new HashMap<>();

  public static final String JSON_PROPERTY_DEPENDENT_RESOURCES = "dependent_resources";
  private List<String> dependentResources = new ArrayList<>();

  public static final String JSON_PROPERTY_DEPENDENT_COMPONENTS = "dependent_components";
  private List<String> dependentComponents = new ArrayList<>();

  public PackageInfoSubstateAllOf() { 
  }

  public PackageInfoSubstateAllOf blueprints(Map<String, BlueprintData> blueprints) {
    this.blueprints = blueprints;
    return this;
  }

  public PackageInfoSubstateAllOf putBlueprintsItem(String key, BlueprintData blueprintsItem) {
    this.blueprints.put(key, blueprintsItem);
    return this;
  }

   /**
   * A map from the blueprint name to BlueprintData
   * @return blueprints
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A map from the blueprint name to BlueprintData")
  @JsonProperty(JSON_PROPERTY_BLUEPRINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, BlueprintData> getBlueprints() {
    return blueprints;
  }


  @JsonProperty(JSON_PROPERTY_BLUEPRINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBlueprints(Map<String, BlueprintData> blueprints) {
    this.blueprints = blueprints;
  }


  public PackageInfoSubstateAllOf dependentResources(List<String> dependentResources) {
    this.dependentResources = dependentResources;
    return this;
  }

  public PackageInfoSubstateAllOf addDependentResourcesItem(String dependentResourcesItem) {
    this.dependentResources.add(dependentResourcesItem);
    return this;
  }

   /**
   * Get dependentResources
   * @return dependentResources
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DEPENDENT_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getDependentResources() {
    return dependentResources;
  }


  @JsonProperty(JSON_PROPERTY_DEPENDENT_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDependentResources(List<String> dependentResources) {
    this.dependentResources = dependentResources;
  }


  public PackageInfoSubstateAllOf dependentComponents(List<String> dependentComponents) {
    this.dependentComponents = dependentComponents;
    return this;
  }

  public PackageInfoSubstateAllOf addDependentComponentsItem(String dependentComponentsItem) {
    this.dependentComponents.add(dependentComponentsItem);
    return this;
  }

   /**
   * Get dependentComponents
   * @return dependentComponents
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_DEPENDENT_COMPONENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getDependentComponents() {
    return dependentComponents;
  }


  @JsonProperty(JSON_PROPERTY_DEPENDENT_COMPONENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDependentComponents(List<String> dependentComponents) {
    this.dependentComponents = dependentComponents;
  }


  /**
   * Return true if this PackageInfoSubstate_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageInfoSubstateAllOf packageInfoSubstateAllOf = (PackageInfoSubstateAllOf) o;
    return Objects.equals(this.blueprints, packageInfoSubstateAllOf.blueprints) &&
        Objects.equals(this.dependentResources, packageInfoSubstateAllOf.dependentResources) &&
        Objects.equals(this.dependentComponents, packageInfoSubstateAllOf.dependentComponents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueprints, dependentResources, dependentComponents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageInfoSubstateAllOf {\n");
    sb.append("    blueprints: ").append(toIndentedString(blueprints)).append("\n");
    sb.append("    dependentResources: ").append(toIndentedString(dependentResources)).append("\n");
    sb.append("    dependentComponents: ").append(toIndentedString(dependentComponents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

