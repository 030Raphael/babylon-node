/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * RCTransactionSubmitRequest
 */
@JsonPropertyOrder({
  RCTransactionSubmitRequest.JSON_PROPERTY_NETWORK,
  RCTransactionSubmitRequest.JSON_PROPERTY_NOTARIZED_TRANSACTION_HEX
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RCTransactionSubmitRequest {
  public static final String JSON_PROPERTY_NETWORK = "network";
  private String network;

  public static final String JSON_PROPERTY_NOTARIZED_TRANSACTION_HEX = "notarized_transaction_hex";
  private String notarizedTransactionHex;

  public RCTransactionSubmitRequest() { 
  }

  public RCTransactionSubmitRequest network(String network) {
    this.network = network;
    return this;
  }

   /**
   * The logical name of the network
   * @return network
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "{{network}}", required = true, value = "The logical name of the network")
  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNetwork() {
    return network;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNetwork(String network) {
    this.network = network;
  }


  public RCTransactionSubmitRequest notarizedTransactionHex(String notarizedTransactionHex) {
    this.notarizedTransactionHex = notarizedTransactionHex;
    return this;
  }

   /**
   * A hex-encoded, compiled notarized transaction.
   * @return notarizedTransactionHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A hex-encoded, compiled notarized transaction.")
  @JsonProperty(JSON_PROPERTY_NOTARIZED_TRANSACTION_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNotarizedTransactionHex() {
    return notarizedTransactionHex;
  }


  @JsonProperty(JSON_PROPERTY_NOTARIZED_TRANSACTION_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNotarizedTransactionHex(String notarizedTransactionHex) {
    this.notarizedTransactionHex = notarizedTransactionHex;
  }


  /**
   * Return true if this RCTransactionSubmitRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RCTransactionSubmitRequest rcTransactionSubmitRequest = (RCTransactionSubmitRequest) o;
    return Objects.equals(this.network, rcTransactionSubmitRequest.network) &&
        Objects.equals(this.notarizedTransactionHex, rcTransactionSubmitRequest.notarizedTransactionHex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(network, notarizedTransactionHex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RCTransactionSubmitRequest {\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    notarizedTransactionHex: ").append(toIndentedString(notarizedTransactionHex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

