/*
 * Babylon Core API - RCnet v3
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the second release candidate of the Radix Babylon network (\"RCnet v3\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.SignatureWithPublicKey;
import com.radixdlt.api.core.generated.models.TransactionIntent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SignedTransactionIntent
 */
@JsonPropertyOrder({
  SignedTransactionIntent.JSON_PROPERTY_HASH,
  SignedTransactionIntent.JSON_PROPERTY_INTENT,
  SignedTransactionIntent.JSON_PROPERTY_INTENT_SIGNATURES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SignedTransactionIntent {
  public static final String JSON_PROPERTY_HASH = "hash";
  private String hash;

  public static final String JSON_PROPERTY_INTENT = "intent";
  private TransactionIntent intent;

  public static final String JSON_PROPERTY_INTENT_SIGNATURES = "intent_signatures";
  private List<SignatureWithPublicKey> intentSignatures = new ArrayList<>();

  public SignedTransactionIntent() { 
  }

  public SignedTransactionIntent hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * The hex-encoded signed intent hash for a user transaction. This hash identifies the transaction intent, plus additional signatures. This hash is signed by the notary, to create the submittable NotarizedTransaction. 
   * @return hash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded signed intent hash for a user transaction. This hash identifies the transaction intent, plus additional signatures. This hash is signed by the notary, to create the submittable NotarizedTransaction. ")
  @JsonProperty(JSON_PROPERTY_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHash() {
    return hash;
  }


  @JsonProperty(JSON_PROPERTY_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHash(String hash) {
    this.hash = hash;
  }


  public SignedTransactionIntent intent(TransactionIntent intent) {
    this.intent = intent;
    return this;
  }

   /**
   * Get intent
   * @return intent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TransactionIntent getIntent() {
    return intent;
  }


  @JsonProperty(JSON_PROPERTY_INTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIntent(TransactionIntent intent) {
    this.intent = intent;
  }


  public SignedTransactionIntent intentSignatures(List<SignatureWithPublicKey> intentSignatures) {
    this.intentSignatures = intentSignatures;
    return this;
  }

  public SignedTransactionIntent addIntentSignaturesItem(SignatureWithPublicKey intentSignaturesItem) {
    this.intentSignatures.add(intentSignaturesItem);
    return this;
  }

   /**
   * Get intentSignatures
   * @return intentSignatures
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_INTENT_SIGNATURES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SignatureWithPublicKey> getIntentSignatures() {
    return intentSignatures;
  }


  @JsonProperty(JSON_PROPERTY_INTENT_SIGNATURES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIntentSignatures(List<SignatureWithPublicKey> intentSignatures) {
    this.intentSignatures = intentSignatures;
  }


  /**
   * Return true if this SignedTransactionIntent object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignedTransactionIntent signedTransactionIntent = (SignedTransactionIntent) o;
    return Objects.equals(this.hash, signedTransactionIntent.hash) &&
        Objects.equals(this.intent, signedTransactionIntent.intent) &&
        Objects.equals(this.intentSignatures, signedTransactionIntent.intentSignatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, intent, intentSignatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignedTransactionIntent {\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    intentSignatures: ").append(toIndentedString(intentSignatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

