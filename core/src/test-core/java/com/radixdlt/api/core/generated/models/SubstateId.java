/*
 * Babylon Core API - RCnet V2
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the first release candidate of the Radix Babylon network (\"RCnet-V1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  We give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to be minimal. 
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.core.generated.models.EntityType;
import com.radixdlt.api.core.generated.models.SubstateType;
import com.radixdlt.api.core.generated.models.SysModuleType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * SubstateId
 */
@JsonPropertyOrder({
  SubstateId.JSON_PROPERTY_ENTITY_TYPE,
  SubstateId.JSON_PROPERTY_ENTITY_ID_HEX,
  SubstateId.JSON_PROPERTY_MODULE_TYPE,
  SubstateId.JSON_PROPERTY_SUBSTATE_TYPE,
  SubstateId.JSON_PROPERTY_SUBSTATE_KEY_HEX
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubstateId {
  public static final String JSON_PROPERTY_ENTITY_TYPE = "entity_type";
  private EntityType entityType;

  public static final String JSON_PROPERTY_ENTITY_ID_HEX = "entity_id_hex";
  private String entityIdHex;

  public static final String JSON_PROPERTY_MODULE_TYPE = "module_type";
  private SysModuleType moduleType;

  public static final String JSON_PROPERTY_SUBSTATE_TYPE = "substate_type";
  private SubstateType substateType;

  public static final String JSON_PROPERTY_SUBSTATE_KEY_HEX = "substate_key_hex";
  private String substateKeyHex;

  public SubstateId() { 
  }

  public SubstateId entityType(EntityType entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityType getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntityType(EntityType entityType) {
    this.entityType = entityType;
  }


  public SubstateId entityIdHex(String entityIdHex) {
    this.entityIdHex = entityIdHex;
    return this;
  }

   /**
   * The hex-encoded bytes of the entity id.
   * @return entityIdHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded bytes of the entity id.")
  @JsonProperty(JSON_PROPERTY_ENTITY_ID_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEntityIdHex() {
    return entityIdHex;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_ID_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntityIdHex(String entityIdHex) {
    this.entityIdHex = entityIdHex;
  }


  public SubstateId moduleType(SysModuleType moduleType) {
    this.moduleType = moduleType;
    return this;
  }

   /**
   * Get moduleType
   * @return moduleType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MODULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SysModuleType getModuleType() {
    return moduleType;
  }


  @JsonProperty(JSON_PROPERTY_MODULE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModuleType(SysModuleType moduleType) {
    this.moduleType = moduleType;
  }


  public SubstateId substateType(SubstateType substateType) {
    this.substateType = substateType;
    return this;
  }

   /**
   * Get substateType
   * @return substateType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SubstateType getSubstateType() {
    return substateType;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateType(SubstateType substateType) {
    this.substateType = substateType;
  }


  public SubstateId substateKeyHex(String substateKeyHex) {
    this.substateKeyHex = substateKeyHex;
    return this;
  }

   /**
   * The hex-encoded bytes of the substate key, under the entity
   * @return substateKeyHex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The hex-encoded bytes of the substate key, under the entity")
  @JsonProperty(JSON_PROPERTY_SUBSTATE_KEY_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubstateKeyHex() {
    return substateKeyHex;
  }


  @JsonProperty(JSON_PROPERTY_SUBSTATE_KEY_HEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubstateKeyHex(String substateKeyHex) {
    this.substateKeyHex = substateKeyHex;
  }


  /**
   * Return true if this SubstateId object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubstateId substateId = (SubstateId) o;
    return Objects.equals(this.entityType, substateId.entityType) &&
        Objects.equals(this.entityIdHex, substateId.entityIdHex) &&
        Objects.equals(this.moduleType, substateId.moduleType) &&
        Objects.equals(this.substateType, substateId.substateType) &&
        Objects.equals(this.substateKeyHex, substateId.substateKeyHex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityType, entityIdHex, moduleType, substateType, substateKeyHex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubstateId {\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityIdHex: ").append(toIndentedString(entityIdHex)).append("\n");
    sb.append("    moduleType: ").append(toIndentedString(moduleType)).append("\n");
    sb.append("    substateType: ").append(toIndentedString(substateType)).append("\n");
    sb.append("    substateKeyHex: ").append(toIndentedString(substateKeyHex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

