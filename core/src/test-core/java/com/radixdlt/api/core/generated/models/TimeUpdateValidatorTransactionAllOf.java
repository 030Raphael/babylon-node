/*
 * Babylon Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node. It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Heavy load may impact the node's function.  If you require queries against historical ledger state, you may also wish to consider using the [Gateway API](https://betanet-gateway.redoc.ly/). 
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.core.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TimeUpdateValidatorTransactionAllOf
 */
@JsonPropertyOrder({
  TimeUpdateValidatorTransactionAllOf.JSON_PROPERTY_PROPOSER_TIMESTAMP_MS,
  TimeUpdateValidatorTransactionAllOf.JSON_PROPERTY_CONSENSUS_EPOCH,
  TimeUpdateValidatorTransactionAllOf.JSON_PROPERTY_ROUND_IN_EPOCH
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TimeUpdateValidatorTransactionAllOf {
  public static final String JSON_PROPERTY_PROPOSER_TIMESTAMP_MS = "proposer_timestamp_ms";
  private Long proposerTimestampMs;

  public static final String JSON_PROPERTY_CONSENSUS_EPOCH = "consensus_epoch";
  private Long consensusEpoch;

  public static final String JSON_PROPERTY_ROUND_IN_EPOCH = "round_in_epoch";
  private Long roundInEpoch;

  public TimeUpdateValidatorTransactionAllOf() { 
  }

  public TimeUpdateValidatorTransactionAllOf proposerTimestampMs(Long proposerTimestampMs) {
    this.proposerTimestampMs = proposerTimestampMs;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^14&#x60;, marking the round proposer&#39;s unix timestamp in ms
   * minimum: 0
   * maximum: 100000000000000
   * @return proposerTimestampMs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `10^14`, marking the round proposer's unix timestamp in ms")
  @JsonProperty(JSON_PROPERTY_PROPOSER_TIMESTAMP_MS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getProposerTimestampMs() {
    return proposerTimestampMs;
  }


  @JsonProperty(JSON_PROPERTY_PROPOSER_TIMESTAMP_MS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProposerTimestampMs(Long proposerTimestampMs) {
    this.proposerTimestampMs = proposerTimestampMs;
  }


  public TimeUpdateValidatorTransactionAllOf consensusEpoch(Long consensusEpoch) {
    this.consensusEpoch = consensusEpoch;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the consensus epoch. Note that currently this is not the same as &#x60;scrypto_epoch&#x60;, but eventually will be. 
   * minimum: 0
   * maximum: 10000000000
   * @return consensusEpoch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `10^10`, marking the consensus epoch. Note that currently this is not the same as `scrypto_epoch`, but eventually will be. ")
  @JsonProperty(JSON_PROPERTY_CONSENSUS_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getConsensusEpoch() {
    return consensusEpoch;
  }


  @JsonProperty(JSON_PROPERTY_CONSENSUS_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConsensusEpoch(Long consensusEpoch) {
    this.consensusEpoch = consensusEpoch;
  }


  public TimeUpdateValidatorTransactionAllOf roundInEpoch(Long roundInEpoch) {
    this.roundInEpoch = roundInEpoch;
    return this;
  }

   /**
   * An integer between &#x60;0&#x60; and &#x60;10^10&#x60;, marking the consensus round in the epoch
   * minimum: 0
   * maximum: 10000000000
   * @return roundInEpoch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An integer between `0` and `10^10`, marking the consensus round in the epoch")
  @JsonProperty(JSON_PROPERTY_ROUND_IN_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getRoundInEpoch() {
    return roundInEpoch;
  }


  @JsonProperty(JSON_PROPERTY_ROUND_IN_EPOCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRoundInEpoch(Long roundInEpoch) {
    this.roundInEpoch = roundInEpoch;
  }


  /**
   * Return true if this TimeUpdateValidatorTransaction_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeUpdateValidatorTransactionAllOf timeUpdateValidatorTransactionAllOf = (TimeUpdateValidatorTransactionAllOf) o;
    return Objects.equals(this.proposerTimestampMs, timeUpdateValidatorTransactionAllOf.proposerTimestampMs) &&
        Objects.equals(this.consensusEpoch, timeUpdateValidatorTransactionAllOf.consensusEpoch) &&
        Objects.equals(this.roundInEpoch, timeUpdateValidatorTransactionAllOf.roundInEpoch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(proposerTimestampMs, consensusEpoch, roundInEpoch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeUpdateValidatorTransactionAllOf {\n");
    sb.append("    proposerTimestampMs: ").append(toIndentedString(proposerTimestampMs)).append("\n");
    sb.append("    consensusEpoch: ").append(toIndentedString(consensusEpoch)).append("\n");
    sb.append("    roundInEpoch: ").append(toIndentedString(roundInEpoch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

