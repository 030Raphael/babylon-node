/*
 * Engine State API - Babylon (Anemone)
 * **This API is currently in Beta**  This specification may experience breaking changes as part of Babylon Node releases. Such changes will be clearly mentioned in the [babylon-node release notes](https://github.com/radixdlt/babylon-node/releases). We advise against using this API for business-critical integrations before the `version` indicated above becomes stable, which is expected in Q4 of 2024.  This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.1-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.radixdlt.api.engine_state.generated.api;

import com.radixdlt.api.engine_state.generated.client.ApiClient;
import com.radixdlt.api.engine_state.generated.client.ApiException;
import com.radixdlt.api.engine_state.generated.client.ApiResponse;
import com.radixdlt.api.engine_state.generated.client.Pair;

import com.radixdlt.api.engine_state.generated.models.ErrorResponse;
import com.radixdlt.api.engine_state.generated.models.KeyValueStoreEntryRequest;
import com.radixdlt.api.engine_state.generated.models.KeyValueStoreEntryResponse;
import com.radixdlt.api.engine_state.generated.models.KeyValueStoreIteratorRequest;
import com.radixdlt.api.engine_state.generated.models.KeyValueStoreIteratorResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class KvStoresApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public KvStoresApi() {
    this(new ApiClient());
  }

  public KvStoresApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get Key-Value Store Entry
   * Reads the current value of a specific entry from a Key-Value Store. 
   * @param keyValueStoreEntryRequest  (required)
   * @return KeyValueStoreEntryResponse
   * @throws ApiException if fails to make API call
   */
  public KeyValueStoreEntryResponse kvStoreEntryPost(KeyValueStoreEntryRequest keyValueStoreEntryRequest) throws ApiException {
    ApiResponse<KeyValueStoreEntryResponse> localVarResponse = kvStoreEntryPostWithHttpInfo(keyValueStoreEntryRequest);
    return localVarResponse.getData();
  }

  /**
   * Get Key-Value Store Entry
   * Reads the current value of a specific entry from a Key-Value Store. 
   * @param keyValueStoreEntryRequest  (required)
   * @return ApiResponse&lt;KeyValueStoreEntryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<KeyValueStoreEntryResponse> kvStoreEntryPostWithHttpInfo(KeyValueStoreEntryRequest keyValueStoreEntryRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = kvStoreEntryPostRequestBuilder(keyValueStoreEntryRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("kvStoreEntryPost", localVarResponse);
        }
        return new ApiResponse<KeyValueStoreEntryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<KeyValueStoreEntryResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder kvStoreEntryPostRequestBuilder(KeyValueStoreEntryRequest keyValueStoreEntryRequest) throws ApiException {
    // verify the required parameter 'keyValueStoreEntryRequest' is set
    if (keyValueStoreEntryRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'keyValueStoreEntryRequest' when calling kvStoreEntryPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/kv-store/entry";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(keyValueStoreEntryRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List Key-Value Store
   * Lists keys of all entries from a particular Key-Value Store, in an iterator-like paged fashion
   * @param keyValueStoreIteratorRequest  (required)
   * @return KeyValueStoreIteratorResponse
   * @throws ApiException if fails to make API call
   */
  public KeyValueStoreIteratorResponse kvStoreIteratorPost(KeyValueStoreIteratorRequest keyValueStoreIteratorRequest) throws ApiException {
    ApiResponse<KeyValueStoreIteratorResponse> localVarResponse = kvStoreIteratorPostWithHttpInfo(keyValueStoreIteratorRequest);
    return localVarResponse.getData();
  }

  /**
   * List Key-Value Store
   * Lists keys of all entries from a particular Key-Value Store, in an iterator-like paged fashion
   * @param keyValueStoreIteratorRequest  (required)
   * @return ApiResponse&lt;KeyValueStoreIteratorResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<KeyValueStoreIteratorResponse> kvStoreIteratorPostWithHttpInfo(KeyValueStoreIteratorRequest keyValueStoreIteratorRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = kvStoreIteratorPostRequestBuilder(keyValueStoreIteratorRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("kvStoreIteratorPost", localVarResponse);
        }
        return new ApiResponse<KeyValueStoreIteratorResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<KeyValueStoreIteratorResponse>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder kvStoreIteratorPostRequestBuilder(KeyValueStoreIteratorRequest keyValueStoreIteratorRequest) throws ApiException {
    // verify the required parameter 'keyValueStoreIteratorRequest' is set
    if (keyValueStoreIteratorRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'keyValueStoreIteratorRequest' when calling kvStoreIteratorPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/kv-store/iterator";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(keyValueStoreIteratorRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
