/*
 * Engine State API - Babylon (Anemone)
 * **This API is currently in Beta**  This specification may experience breaking changes as part of Babylon Node releases. Such changes will be clearly mentioned in the [babylon-node release notes](https://github.com/radixdlt/babylon-node/releases). We advise against using this API for business-critical integrations before the `version` indicated above becomes stable, which is expected in Q4 of 2024.  This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v1.2.1-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.engine_state.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.engine_state.generated.models.LedgerStateSelector;
import com.radixdlt.api.engine_state.generated.models.SborFormatOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * BlueprintInfoRequest
 */
@JsonPropertyOrder({
  BlueprintInfoRequest.JSON_PROPERTY_PACKAGE_ADDRESS,
  BlueprintInfoRequest.JSON_PROPERTY_BLUEPRINT_NAME,
  BlueprintInfoRequest.JSON_PROPERTY_BLUEPRINT_VERSION,
  BlueprintInfoRequest.JSON_PROPERTY_SBOR_FORMAT_OPTIONS,
  BlueprintInfoRequest.JSON_PROPERTY_AT_LEDGER_STATE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BlueprintInfoRequest {
  public static final String JSON_PROPERTY_PACKAGE_ADDRESS = "package_address";
  private String packageAddress;

  public static final String JSON_PROPERTY_BLUEPRINT_NAME = "blueprint_name";
  private String blueprintName;

  public static final String JSON_PROPERTY_BLUEPRINT_VERSION = "blueprint_version";
  private String blueprintVersion;

  public static final String JSON_PROPERTY_SBOR_FORMAT_OPTIONS = "sbor_format_options";
  private SborFormatOptions sborFormatOptions;

  public static final String JSON_PROPERTY_AT_LEDGER_STATE = "at_ledger_state";
  private LedgerStateSelector atLedgerState;

  public BlueprintInfoRequest() { 
  }

  public BlueprintInfoRequest packageAddress(String packageAddress) {
    this.packageAddress = packageAddress;
    return this;
  }

   /**
   * A Bech32m-encoded, human readable rendering of a Package address.
   * @return packageAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A Bech32m-encoded, human readable rendering of a Package address.")
  @JsonProperty(JSON_PROPERTY_PACKAGE_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPackageAddress() {
    return packageAddress;
  }


  @JsonProperty(JSON_PROPERTY_PACKAGE_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPackageAddress(String packageAddress) {
    this.packageAddress = packageAddress;
  }


  public BlueprintInfoRequest blueprintName(String blueprintName) {
    this.blueprintName = blueprintName;
    return this;
  }

   /**
   * Get blueprintName
   * @return blueprintName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BLUEPRINT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBlueprintName() {
    return blueprintName;
  }


  @JsonProperty(JSON_PROPERTY_BLUEPRINT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBlueprintName(String blueprintName) {
    this.blueprintName = blueprintName;
  }


  public BlueprintInfoRequest blueprintVersion(String blueprintVersion) {
    this.blueprintVersion = blueprintVersion;
    return this;
  }

   /**
   * A string of format &#x60;Major.Minor.Patch&#x60; (all parts being &#x60;u32&#x60;). Defaults to &#x60;1.0.0&#x60;. 
   * @return blueprintVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string of format `Major.Minor.Patch` (all parts being `u32`). Defaults to `1.0.0`. ")
  @JsonProperty(JSON_PROPERTY_BLUEPRINT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBlueprintVersion() {
    return blueprintVersion;
  }


  @JsonProperty(JSON_PROPERTY_BLUEPRINT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlueprintVersion(String blueprintVersion) {
    this.blueprintVersion = blueprintVersion;
  }


  public BlueprintInfoRequest sborFormatOptions(SborFormatOptions sborFormatOptions) {
    this.sborFormatOptions = sborFormatOptions;
    return this;
  }

   /**
   * Get sborFormatOptions
   * @return sborFormatOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SBOR_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SborFormatOptions getSborFormatOptions() {
    return sborFormatOptions;
  }


  @JsonProperty(JSON_PROPERTY_SBOR_FORMAT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSborFormatOptions(SborFormatOptions sborFormatOptions) {
    this.sborFormatOptions = sborFormatOptions;
  }


  public BlueprintInfoRequest atLedgerState(LedgerStateSelector atLedgerState) {
    this.atLedgerState = atLedgerState;
    return this;
  }

   /**
   * Get atLedgerState
   * @return atLedgerState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_AT_LEDGER_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LedgerStateSelector getAtLedgerState() {
    return atLedgerState;
  }


  @JsonProperty(JSON_PROPERTY_AT_LEDGER_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAtLedgerState(LedgerStateSelector atLedgerState) {
    this.atLedgerState = atLedgerState;
  }


  /**
   * Return true if this BlueprintInfoRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintInfoRequest blueprintInfoRequest = (BlueprintInfoRequest) o;
    return Objects.equals(this.packageAddress, blueprintInfoRequest.packageAddress) &&
        Objects.equals(this.blueprintName, blueprintInfoRequest.blueprintName) &&
        Objects.equals(this.blueprintVersion, blueprintInfoRequest.blueprintVersion) &&
        Objects.equals(this.sborFormatOptions, blueprintInfoRequest.sborFormatOptions) &&
        Objects.equals(this.atLedgerState, blueprintInfoRequest.atLedgerState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packageAddress, blueprintName, blueprintVersion, sborFormatOptions, atLedgerState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintInfoRequest {\n");
    sb.append("    packageAddress: ").append(toIndentedString(packageAddress)).append("\n");
    sb.append("    blueprintName: ").append(toIndentedString(blueprintName)).append("\n");
    sb.append("    blueprintVersion: ").append(toIndentedString(blueprintVersion)).append("\n");
    sb.append("    sborFormatOptions: ").append(toIndentedString(sborFormatOptions)).append("\n");
    sb.append("    atLedgerState: ").append(toIndentedString(atLedgerState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

