/*
 * Engine State API - Babylon (Anemone)
 * **This API is currently in Beta**  This specification may experience breaking changes as part of Babylon Node releases. Such changes will be clearly mentioned in the [babylon-node release notes](https://github.com/radixdlt/babylon-node/releases). We advise against using this API for business-critical integrations before the `version` indicated above becomes stable, which is expected in Q4 of 2024.  This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.1-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.engine_state.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.radixdlt.api.engine_state.generated.models.BlueprintReference;
import com.radixdlt.api.engine_state.generated.models.EntityType;
import com.radixdlt.api.engine_state.generated.models.ObjectEntityInfoAllOfAttachedModules;
import com.radixdlt.api.engine_state.generated.models.ObjectInstanceInfo;
import com.radixdlt.api.engine_state.generated.models.ObjectModuleStateInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Information available when the entity is an Object.
 */
@ApiModel(description = "Information available when the entity is an Object.")
@JsonPropertyOrder({
  ObjectEntityInfoAllOf.JSON_PROPERTY_ENTITY_TYPE,
  ObjectEntityInfoAllOf.JSON_PROPERTY_IS_GLOBAL,
  ObjectEntityInfoAllOf.JSON_PROPERTY_IS_INSTANTIATED,
  ObjectEntityInfoAllOf.JSON_PROPERTY_MAIN_MODULE_STATE,
  ObjectEntityInfoAllOf.JSON_PROPERTY_ATTACHED_MODULES,
  ObjectEntityInfoAllOf.JSON_PROPERTY_BLUEPRINT_REFERENCE,
  ObjectEntityInfoAllOf.JSON_PROPERTY_INSTANCE_INFO
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ObjectEntityInfoAllOf {
  public static final String JSON_PROPERTY_ENTITY_TYPE = "entity_type";
  private EntityType entityType;

  public static final String JSON_PROPERTY_IS_GLOBAL = "is_global";
  private Boolean isGlobal;

  public static final String JSON_PROPERTY_IS_INSTANTIATED = "is_instantiated";
  private Boolean isInstantiated;

  public static final String JSON_PROPERTY_MAIN_MODULE_STATE = "main_module_state";
  private ObjectModuleStateInfo mainModuleState;

  public static final String JSON_PROPERTY_ATTACHED_MODULES = "attached_modules";
  private List<ObjectEntityInfoAllOfAttachedModules> attachedModules = new ArrayList<>();

  public static final String JSON_PROPERTY_BLUEPRINT_REFERENCE = "blueprint_reference";
  private BlueprintReference blueprintReference;

  public static final String JSON_PROPERTY_INSTANCE_INFO = "instance_info";
  private ObjectInstanceInfo instanceInfo;

  public ObjectEntityInfoAllOf() { 
  }

  public ObjectEntityInfoAllOf entityType(EntityType entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EntityType getEntityType() {
    return entityType;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntityType(EntityType entityType) {
    this.entityType = entityType;
  }


  public ObjectEntityInfoAllOf isGlobal(Boolean isGlobal) {
    this.isGlobal = isGlobal;
    return this;
  }

   /**
   * Whether the object is a top-level root, or a child of some other entity.
   * @return isGlobal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the object is a top-level root, or a child of some other entity.")
  @JsonProperty(JSON_PROPERTY_IS_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsGlobal() {
    return isGlobal;
  }


  @JsonProperty(JSON_PROPERTY_IS_GLOBAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsGlobal(Boolean isGlobal) {
    this.isGlobal = isGlobal;
  }


  public ObjectEntityInfoAllOf isInstantiated(Boolean isInstantiated) {
    this.isInstantiated = isInstantiated;
    return this;
  }

   /**
   * Whether the object&#39;s state is already physically persisted on ledger.
   * @return isInstantiated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether the object's state is already physically persisted on ledger.")
  @JsonProperty(JSON_PROPERTY_IS_INSTANTIATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsInstantiated() {
    return isInstantiated;
  }


  @JsonProperty(JSON_PROPERTY_IS_INSTANTIATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsInstantiated(Boolean isInstantiated) {
    this.isInstantiated = isInstantiated;
  }


  public ObjectEntityInfoAllOf mainModuleState(ObjectModuleStateInfo mainModuleState) {
    this.mainModuleState = mainModuleState;
    return this;
  }

   /**
   * Get mainModuleState
   * @return mainModuleState
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MAIN_MODULE_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ObjectModuleStateInfo getMainModuleState() {
    return mainModuleState;
  }


  @JsonProperty(JSON_PROPERTY_MAIN_MODULE_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMainModuleState(ObjectModuleStateInfo mainModuleState) {
    this.mainModuleState = mainModuleState;
  }


  public ObjectEntityInfoAllOf attachedModules(List<ObjectEntityInfoAllOfAttachedModules> attachedModules) {
    this.attachedModules = attachedModules;
    return this;
  }

  public ObjectEntityInfoAllOf addAttachedModulesItem(ObjectEntityInfoAllOfAttachedModules attachedModulesItem) {
    this.attachedModules.add(attachedModulesItem);
    return this;
  }

   /**
   * Information about the other modules attached to the object (possibly empty, even when &#x60;is_global&#x60;). 
   * @return attachedModules
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Information about the other modules attached to the object (possibly empty, even when `is_global`). ")
  @JsonProperty(JSON_PROPERTY_ATTACHED_MODULES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObjectEntityInfoAllOfAttachedModules> getAttachedModules() {
    return attachedModules;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHED_MODULES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAttachedModules(List<ObjectEntityInfoAllOfAttachedModules> attachedModules) {
    this.attachedModules = attachedModules;
  }


  public ObjectEntityInfoAllOf blueprintReference(BlueprintReference blueprintReference) {
    this.blueprintReference = blueprintReference;
    return this;
  }

   /**
   * Get blueprintReference
   * @return blueprintReference
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BLUEPRINT_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BlueprintReference getBlueprintReference() {
    return blueprintReference;
  }


  @JsonProperty(JSON_PROPERTY_BLUEPRINT_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBlueprintReference(BlueprintReference blueprintReference) {
    this.blueprintReference = blueprintReference;
  }


  public ObjectEntityInfoAllOf instanceInfo(ObjectInstanceInfo instanceInfo) {
    this.instanceInfo = instanceInfo;
    return this;
  }

   /**
   * Get instanceInfo
   * @return instanceInfo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_INSTANCE_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ObjectInstanceInfo getInstanceInfo() {
    return instanceInfo;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstanceInfo(ObjectInstanceInfo instanceInfo) {
    this.instanceInfo = instanceInfo;
  }


  /**
   * Return true if this ObjectEntityInfo_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectEntityInfoAllOf objectEntityInfoAllOf = (ObjectEntityInfoAllOf) o;
    return Objects.equals(this.entityType, objectEntityInfoAllOf.entityType) &&
        Objects.equals(this.isGlobal, objectEntityInfoAllOf.isGlobal) &&
        Objects.equals(this.isInstantiated, objectEntityInfoAllOf.isInstantiated) &&
        Objects.equals(this.mainModuleState, objectEntityInfoAllOf.mainModuleState) &&
        Objects.equals(this.attachedModules, objectEntityInfoAllOf.attachedModules) &&
        Objects.equals(this.blueprintReference, objectEntityInfoAllOf.blueprintReference) &&
        Objects.equals(this.instanceInfo, objectEntityInfoAllOf.instanceInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityType, isGlobal, isInstantiated, mainModuleState, attachedModules, blueprintReference, instanceInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectEntityInfoAllOf {\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    isGlobal: ").append(toIndentedString(isGlobal)).append("\n");
    sb.append("    isInstantiated: ").append(toIndentedString(isInstantiated)).append("\n");
    sb.append("    mainModuleState: ").append(toIndentedString(mainModuleState)).append("\n");
    sb.append("    attachedModules: ").append(toIndentedString(attachedModules)).append("\n");
    sb.append("    blueprintReference: ").append(toIndentedString(blueprintReference)).append("\n");
    sb.append("    instanceInfo: ").append(toIndentedString(instanceInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

