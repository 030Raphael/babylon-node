/*
 * Engine State API
 * This API provides a complete view of the current ledger state, operating at a relatively low level (i.e. returning Entities' data and type information in a generic way, without interpreting specifics of different native or custom components).  It mirrors how the Radix Engine views the ledger state in its \"System\" layer, and thus can be useful for Scrypto developers, who need to inspect how the Engine models and stores their application's state, or how an interface / authentication scheme of another component looks like. 
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.engine_state.generated.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Requested SBOR formats to include in the response.
 */
@ApiModel(description = "Requested SBOR formats to include in the response.")
@JsonPropertyOrder({
  SborFormatOptions.JSON_PROPERTY_RAW,
  SborFormatOptions.JSON_PROPERTY_PROGRAMMATIC_JSON
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SborFormatOptions {
  public static final String JSON_PROPERTY_RAW = "raw";
  private Boolean raw;

  public static final String JSON_PROPERTY_PROGRAMMATIC_JSON = "programmatic_json";
  private Boolean programmaticJson;

  public SborFormatOptions() { 
  }

  public SborFormatOptions raw(Boolean raw) {
    this.raw = raw;
    return this;
  }

   /**
   * Whether to return the raw hex-encoded bytes (default false).
   * @return raw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to return the raw hex-encoded bytes (default false).")
  @JsonProperty(JSON_PROPERTY_RAW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRaw() {
    return raw;
  }


  @JsonProperty(JSON_PROPERTY_RAW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRaw(Boolean raw) {
    this.raw = raw;
  }


  public SborFormatOptions programmaticJson(Boolean programmaticJson) {
    this.programmaticJson = programmaticJson;
    return this;
  }

   /**
   * Whether to return the Programmatic JSON (default true).
   * @return programmaticJson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to return the Programmatic JSON (default true).")
  @JsonProperty(JSON_PROPERTY_PROGRAMMATIC_JSON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getProgrammaticJson() {
    return programmaticJson;
  }


  @JsonProperty(JSON_PROPERTY_PROGRAMMATIC_JSON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProgrammaticJson(Boolean programmaticJson) {
    this.programmaticJson = programmaticJson;
  }


  /**
   * Return true if this SborFormatOptions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SborFormatOptions sborFormatOptions = (SborFormatOptions) o;
    return Objects.equals(this.raw, sborFormatOptions.raw) &&
        Objects.equals(this.programmaticJson, sborFormatOptions.programmaticJson);
  }

  @Override
  public int hashCode() {
    return Objects.hash(raw, programmaticJson);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SborFormatOptions {\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    programmaticJson: ").append(toIndentedString(programmaticJson)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

