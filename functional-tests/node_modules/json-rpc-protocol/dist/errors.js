'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidParameters = exports.MethodNotFound = exports.InvalidRequest = exports.InvalidJson = exports.JsonRpcError = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _makeError = require('make-error');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// ===================================================================

var JsonRpcError = exports.JsonRpcError = function (_BaseError) {
  _inherits(JsonRpcError, _BaseError);

  function JsonRpcError() {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unknown error from the peer';
    var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -32000;
    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    _classCallCheck(this, JsonRpcError);

    var _this = _possibleConstructorReturn(this, (JsonRpcError.__proto__ || Object.getPrototypeOf(JsonRpcError)).call(this, message));

    _this.code = code;
    _this.data = data;
    return _this;
  }

  // Each error that should be sent to the front-end through JSON-RPC protocol
  // must implement this method. JsonRpcError is one of them.


  _createClass(JsonRpcError, [{
    key: 'toJsonRpcError',
    value: function toJsonRpcError() {
      return {
        code: this.code,
        data: this.data,
        message: this.message
      };
    }
  }]);

  return JsonRpcError;
}(_makeError.BaseError);

// -------------------------------------------------------------------

var InvalidJson = exports.InvalidJson = function (_JsonRpcError) {
  _inherits(InvalidJson, _JsonRpcError);

  function InvalidJson() {
    _classCallCheck(this, InvalidJson);

    return _possibleConstructorReturn(this, (InvalidJson.__proto__ || Object.getPrototypeOf(InvalidJson)).call(this, 'invalid JSON', -32700));
  }

  return InvalidJson;
}(JsonRpcError);

var InvalidRequest = exports.InvalidRequest = function (_JsonRpcError2) {
  _inherits(InvalidRequest, _JsonRpcError2);

  function InvalidRequest() {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'invalid JSON-RPC request';

    _classCallCheck(this, InvalidRequest);

    return _possibleConstructorReturn(this, (InvalidRequest.__proto__ || Object.getPrototypeOf(InvalidRequest)).call(this, message, -32600));
  }

  return InvalidRequest;
}(JsonRpcError);

var MethodNotFound = exports.MethodNotFound = function (_JsonRpcError3) {
  _inherits(MethodNotFound, _JsonRpcError3);

  function MethodNotFound(method) {
    _classCallCheck(this, MethodNotFound);

    var message = method ? `method not found: ${method}` : 'method not found';

    return _possibleConstructorReturn(this, (MethodNotFound.__proto__ || Object.getPrototypeOf(MethodNotFound)).call(this, message, -32601, method));
  }

  return MethodNotFound;
}(JsonRpcError);

var InvalidParameters = exports.InvalidParameters = function (_JsonRpcError4) {
  _inherits(InvalidParameters, _JsonRpcError4);

  function InvalidParameters(data) {
    _classCallCheck(this, InvalidParameters);

    return _possibleConstructorReturn(this, (InvalidParameters.__proto__ || Object.getPrototypeOf(InvalidParameters)).call(this, 'invalid parameter(s)', -32602, data));
  }

  return InvalidParameters;
}(JsonRpcError);
//# sourceMappingURL=errors.js.map