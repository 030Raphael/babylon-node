{"version":3,"sources":["../src/errors.js"],"names":["JsonRpcError","message","code","data","undefined","InvalidJson","InvalidRequest","MethodNotFound","method","InvalidParameters"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAEA;;IAEaA,Y,WAAAA,Y;;;AACX,0BAIE;AAAA,QAHAC,OAGA,uEAHU,6BAGV;AAAA,QAFAC,IAEA,uEAFO,CAAC,KAER;AAAA,QADAC,IACA,uEADOC,SACP;;AAAA;;AAAA,4HACMH,OADN;;AAGA,UAAKC,IAAL,GAAYA,IAAZ;AACA,UAAKC,IAAL,GAAYA,IAAZ;AAJA;AAKD;;AAED;AACA;;;;;qCACkB;AAChB,aAAO;AACLD,cAAM,KAAKA,IADN;AAELC,cAAM,KAAKA,IAFN;AAGLF,iBAAS,KAAKA;AAHT,OAAP;AAKD;;;;;;AAGH;;IAEaI,W,WAAAA,W;;;AACX,yBAAe;AAAA;;AAAA,qHACP,cADO,EACS,CAAC,KADV;AAEd;;;EAH8BL,Y;;IAMpBM,c,WAAAA,c;;;AACX,4BAAmD;AAAA,QAAtCL,OAAsC,uEAA5B,0BAA4B;;AAAA;;AAAA,2HAC3CA,OAD2C,EAClC,CAAC,KADiC;AAElD;;;EAHiCD,Y;;IAMvBO,c,WAAAA,c;;;AACX,0BAAaC,MAAb,EAAqB;AAAA;;AACnB,QAAMP,UAAUO,SACX,qBAAoBA,MAAO,EADhB,GAEZ,kBAFJ;;AADmB,2HAKbP,OALa,EAKJ,CAAC,KALG,EAKIO,MALJ;AAMpB;;;EAPiCR,Y;;IAUvBS,iB,WAAAA,iB;;;AACX,6BAAaN,IAAb,EAAmB;AAAA;;AAAA,iIACX,sBADW,EACa,CAAC,KADd,EACqBA,IADrB;AAElB;;;EAHoCH,Y","file":"errors.js","sourcesContent":["import { BaseError } from 'make-error'\n\n// ===================================================================\n\nexport class JsonRpcError extends BaseError {\n  constructor (\n    message = 'unknown error from the peer',\n    code = -32000,\n    data = undefined\n  ) {\n    super(message)\n\n    this.code = code\n    this.data = data\n  }\n\n  // Each error that should be sent to the front-end through JSON-RPC protocol\n  // must implement this method. JsonRpcError is one of them.\n  toJsonRpcError () {\n    return {\n      code: this.code,\n      data: this.data,\n      message: this.message\n    }\n  }\n}\n\n// -------------------------------------------------------------------\n\nexport class InvalidJson extends JsonRpcError {\n  constructor () {\n    super('invalid JSON', -32700)\n  }\n}\n\nexport class InvalidRequest extends JsonRpcError {\n  constructor (message = 'invalid JSON-RPC request') {\n    super(message, -32600)\n  }\n}\n\nexport class MethodNotFound extends JsonRpcError {\n  constructor (method) {\n    const message = method\n      ? `method not found: ${method}`\n      : 'method not found'\n\n    super(message, -32601, method)\n  }\n}\n\nexport class InvalidParameters extends JsonRpcError {\n  constructor (data) {\n    super('invalid parameter(s)', -32602, data)\n  }\n}\n"]}