'use strict';

// ===================================================================

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parse;

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _isNumber = require('lodash/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

var _isObject = require('lodash/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _errors = require('./errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// ===================================================================

var isInteger = function isInteger(value) {
  return (0, _isNumber2.default)(value) && value % 1 === 0;
};

var defineProperty = Object.defineProperty;


var setMessageType = function setMessageType(message, type) {
  return defineProperty(message, 'type', {
    configurable: true,
    value: type,
    writable: true
  });
};

var getType = function getType(value) {
  return value === null ? 'null' : typeof value;
};

// ===================================================================

var checkError = function checkError(error, version) {
  if (version === '1.0') {
    if (error == null) {
      throw new _errors.InvalidRequest(`invalid error ${getType(error)}`);
    }
  } else if (error == null || !isInteger(error.code) || !(0, _isString2.default)(error.message)) {
    throw new _errors.InvalidRequest(`invalid error: ${getType(error)} instead of {code, message}`);
  }
};

var checkId = function checkId(id) {
  if (!(0, _isNumber2.default)(id) && !(0, _isString2.default)(id)) {
    throw new _errors.InvalidRequest(`invalid identifier: ${getType(id)} instead of number or string`);
  }
};

var checkParams = function checkParams(params, version) {
  if (version === '2.0') {
    if (params !== undefined && !(0, _isArray2.default)(params) && !(0, _isObject2.default)(params)) {
      throw new _errors.InvalidRequest(`invalid params: ${getType(params)} instead of undefined, array or object`);
    }
  } else {
    if (!(0, _isArray2.default)(params)) {
      throw new _errors.InvalidRequest(`invalid params: ${getType(params)} instead of array`);
    }
  }
};

var detectJsonRpcVersion = function detectJsonRpcVersion(_ref) {
  var jsonrpc = _ref.jsonrpc;

  if (jsonrpc === undefined) {
    return '1.0';
  }

  if (jsonrpc === '2.0') {
    return '2.0';
  }

  throw new _errors.InvalidRequest(`invalid version: ${getType(jsonrpc)} instead of undefined or '2.0'`);
};

var isNotificationId = function isNotificationId(id, version) {
  return id === (version === '2.0' ? undefined : null);
};

var isErrorResponse = function isErrorResponse(_ref2, version) {
  var error = _ref2.error;
  return error !== (version === '2.0' ? undefined : null);
};

// ===================================================================

// Parses, normalizes and validates a JSON-RPC message.
//
// The returns value is an object containing the normalized fields of
// the JSON-RPC message and an additional `type` field which contains
// one of the following: `notification`, request`, `response` or
// `error`.
function parse(message) {
  if ((0, _isString2.default)(message)) {
    try {
      message = JSON.parse(message);
    } catch (error) {
      if (error instanceof SyntaxError) {
        throw new _errors.InvalidJson();
      }

      throw error;
    }
  }

  // Properly handle array of requests.
  if ((0, _isArray2.default)(message)) {
    return (0, _map2.default)(message, function (message) {
      return parse(message);
    });
  }

  var version = detectJsonRpcVersion(message);

  if ((0, _isString2.default)(message.method)) {
    var _message = message,
        id = _message.id;

    if (isNotificationId(id, version)) {
      setMessageType(message, 'notification');
    } else {
      checkId(id);
      setMessageType(message, 'request');
    }

    checkParams(message.params, version);
  } else if (isErrorResponse(message, version)) {
    // The identifier of an error message can also be null.
    var _message2 = message,
        _id = _message2.id;

    _id !== null && checkId(_id);

    checkError(message.error, version);
    setMessageType(message, 'error');
  } else {
    checkId(message.id);
    setMessageType(message, 'response');
  }

  return message;
}
//# sourceMappingURL=parse.js.map