{"version":3,"sources":["../src/parse.js"],"names":["parse","isInteger","value","defineProperty","Object","setMessageType","message","type","configurable","writable","getType","checkError","error","version","code","checkId","id","checkParams","params","undefined","detectJsonRpcVersion","jsonrpc","isNotificationId","isErrorResponse","JSON","SyntaxError","method"],"mappings":"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","file":"parse.js","sourcesContent":["'use strict'\n\n// ===================================================================\n\nimport isArray from 'lodash/isArray'\nimport isNumber from 'lodash/isNumber'\nimport isObject from 'lodash/isObject'\nimport isString from 'lodash/isString'\nimport map from 'lodash/map'\n\nimport {\n  InvalidJson,\n  InvalidRequest\n} from './errors'\n\n// ===================================================================\n\nconst isInteger = value => isNumber(value) && (value % 1 === 0)\n\nconst { defineProperty } = Object\n\nconst setMessageType = (message, type) => defineProperty(message, 'type', {\n  configurable: true,\n  value: type,\n  writable: true\n})\n\nconst getType = value => value === null ? 'null' : typeof value\n\n// ===================================================================\n\nconst checkError = (error, version) => {\n  if (version === '1.0') {\n    if (error == null) {\n      throw new InvalidRequest(\n        `invalid error ${getType(error)}`\n      )\n    }\n  } else if (\n    error == null ||\n    !isInteger(error.code) ||\n    !isString(error.message)\n  ) {\n    throw new InvalidRequest(`invalid error: ${getType(error)} instead of {code, message}`)\n  }\n}\n\nconst checkId = id => {\n  if (\n    !isNumber(id) &&\n    !isString(id)\n  ) {\n    throw new InvalidRequest(\n      `invalid identifier: ${getType(id)} instead of number or string`\n    )\n  }\n}\n\nconst checkParams = (params, version) => {\n  if (version === '2.0') {\n    if (\n      params !== undefined &&\n      !isArray(params) &&\n      !isObject(params)\n    ) {\n      throw new InvalidRequest(\n        `invalid params: ${getType(params)} instead of undefined, array or object`\n      )\n    }\n  } else {\n    if (!isArray(params)) {\n      throw new InvalidRequest(\n        `invalid params: ${getType(params)} instead of array`\n      )\n    }\n  }\n}\n\nconst detectJsonRpcVersion = ({ jsonrpc }) => {\n  if (jsonrpc === undefined) {\n    return '1.0'\n  }\n\n  if (jsonrpc === '2.0') {\n    return '2.0'\n  }\n\n  throw new InvalidRequest(\n    `invalid version: ${getType(jsonrpc)} instead of undefined or '2.0'`\n  )\n}\n\nconst isNotificationId = (id, version) => (\n  id === (version === '2.0' ? undefined : null)\n)\n\nconst isErrorResponse = ({ error }, version) => (\n  error !== (version === '2.0' ? undefined : null)\n)\n\n// ===================================================================\n\n// Parses, normalizes and validates a JSON-RPC message.\n//\n// The returns value is an object containing the normalized fields of\n// the JSON-RPC message and an additional `type` field which contains\n// one of the following: `notification`, request`, `response` or\n// `error`.\nexport default function parse (message) {\n  if (isString(message)) {\n    try {\n      message = JSON.parse(message)\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        throw new InvalidJson()\n      }\n\n      throw error\n    }\n  }\n\n  // Properly handle array of requests.\n  if (isArray(message)) {\n    return map(message, message => parse(message))\n  }\n\n  const version = detectJsonRpcVersion(message)\n\n  if (isString(message.method)) {\n    const {id} = message\n    if (isNotificationId(id, version)) {\n      setMessageType(message, 'notification')\n    } else {\n      checkId(id)\n      setMessageType(message, 'request')\n    }\n\n    checkParams(message.params, version)\n  } else if (isErrorResponse(message, version)) {\n    // The identifier of an error message can also be null.\n    const {id} = message\n    id !== null && checkId(id)\n\n    checkError(message.error, version)\n    setMessageType(message, 'error')\n  } else {\n    checkId(message.id)\n    setMessageType(message, 'response')\n  }\n\n  return message\n}\n"]}