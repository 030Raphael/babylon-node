'use strict';

var main = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var client;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            client = new _2.default('ws://localhost:1025/');

            client.on('closed', function () {
              client.open((0, _.createBackoff)());
            });
            spyEvents(client);

            _context.next = 5;
            return client.open((0, _.createBackoff)());

          case 5:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function main() {
    return _ref.apply(this, arguments);
  };
}();

// Run the main function and prints any errors.


var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function defaultOnEvent(name) {
  console.log('Event: %s()', name);
}

function spyEvents(emitter, onEvent) {
  onEvent || (onEvent = defaultOnEvent);

  var originalEmit = emitter.emit;
  Object.getPrototypeOf(emitter).emit = function () {
    onEvent.apply(null, arguments);

    return originalEmit.apply(emitter, arguments);
  };
}

main().then(function () {
  setTimeout(function () {
    console.log('forcing exit');
    process.exit(0);
  }, 1e3).unref();
}, function (error) {
  console.error(error && error.stack || error);
  process.exit(1);
});
//# sourceMappingURL=example.js.map