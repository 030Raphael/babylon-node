{"version":3,"sources":["../src/index.js"],"names":["createBackoff","tries","addNoise","toMs","take","ConnectionError","AbortedConnection","CLOSED","CONNECTING","OPEN","JsonRpcWebSocketClient","opts","url","protocols","peer","_peer","message","type","emit","on","send","failPendingRequests","write","method","params","request","notify"],"mappings":";;;;;;;;;AAAA;;;;AACA;;AAEA;;;;AACA;;;;;;;;;;;;;;AASA;;AAEO,IAAMA,wCAAgB,SAAhBA,aAAgB;AAAA,MAACC,KAAD,uEAAS,EAAT;AAAA,SAC3B,kCAAYC,QAAZ,GAAuBC,IAAvB,GAA8BC,IAA9B,CAAmCH,KAAnC,CAD2B;AAAA,CAAtB;;QAILI,e;QACAC,iB;QACAC,M;QACAC,U;QACAC,I;;AAGF;;IAEqBC,sB;;;AACnB,kCAAaC,IAAb,EAAmB;AAAA;;AACjB;AACE,UAAIC,YAAJ;AAAA,UAASC,kBAAT;AACA,UAAI,CAACF,IAAL,EAAW;AACTA,eAAO,EAAP;AACD,OAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AACnCC,cAAMD,IAAN;AACAA,eAAO,EAAP;AACD,OAHM,MAGA;AAAA,oBAC+BA,IAD/B;AACFC,WADE,SACFA,GADE;AAAA,oCACGC,SADH;AACGA,iBADH,mCACe,EADf;AACsBF,YADtB;AAEN;;AATH,kJAWQ,wBAASC,GAAT,CAXR,EAWuBC,SAXvB,EAWkCF,IAXlC;AAYC;;AAED,QAAMG,OAAO,MAAKC,KAAL,GAAa,0BAAS,mBAAW;AAC5C;AACA,UAAIC,QAAQC,IAAR,KAAiB,cAArB,EAAqC;AACnC,cAAM,iCAAN;AACD;;AAED,YAAKC,IAAL,CAAU,cAAV,EAA0BF,OAA1B;AACD,KAPyB,EAOvBG,EAPuB,CAOpB,MAPoB,EAOZ,mBAAW;AACvB,YAAKC,IAAL,CAAUJ,OAAV;AACD,KATyB,CAA1B;;AAWA,UAAKG,EAAL,0BAAgB,YAAM;AACpBL,WAAKO,mBAAL,CACE,qCAAoB,4BAApB,CADF;AAGD,KAJD;;AAMA,UAAKF,EAAL,2BAAiB,mBAAW;AAC1BL,WAAKQ,KAAL,CAAWN,OAAX;AACD,KAFD;AAhCiB;AAmClB;;AAED;;;;;yBACMO,M,EAAQC,M,EAAQ;AACpB,aAAO,KAAKT,KAAL,CAAWU,OAAX,CAAmBF,MAAnB,EAA2BC,MAA3B,CAAP;AACD;;;2BAEOD,M,EAAQC,M,EAAQ;AACtB,aAAO,KAAKT,KAAL,CAAWW,MAAX,CAAkBH,MAAlB,EAA0BC,MAA1B,CAAP;AACD;;;;;;kBA7CkBd,sB","file":"index.js","sourcesContent":["import Peer, { MethodNotFound } from 'json-rpc-peer'\nimport { fibonacci } from 'iterable-backoff'\n\nimport parseUrl from './parse-url'\nimport WebSocketClient, {\n  ConnectionError,\n  AbortedConnection,\n  CLOSED,\n  CONNECTING,\n  MESSAGE,\n  OPEN,\n} from './websocket-client'\n\n// ===================================================================\n\nexport const createBackoff = (tries = 10) =>\n  fibonacci().addNoise().toMs().take(tries)\n\nexport {\n  ConnectionError,\n  AbortedConnection,\n  CLOSED,\n  CONNECTING,\n  OPEN,\n}\n\n// -------------------------------------------------------------------\n\nexport default class JsonRpcWebSocketClient extends WebSocketClient {\n  constructor (opts) {\n    {\n      let url, protocols\n      if (!opts) {\n        opts = {}\n      } else if (typeof opts === 'string') {\n        url = opts\n        opts = {}\n      } else {\n        ({ url, protocols = '', ...opts } = opts)\n      }\n\n      super(parseUrl(url), protocols, opts)\n    }\n\n    const peer = this._peer = new Peer(message => {\n      // This peer is only a client and does not support requests.\n      if (message.type !== 'notification') {\n        throw new MethodNotFound()\n      }\n\n      this.emit('notification', message)\n    }).on('data', message => {\n      this.send(message)\n    })\n\n    this.on(CLOSED, () => {\n      peer.failPendingRequests(\n        new ConnectionError('connection has been closed')\n      )\n    })\n\n    this.on(MESSAGE, message => {\n      peer.write(message)\n    })\n  }\n\n  // TODO: call() because RPC or request() because JSON-RPC?\n  call (method, params) {\n    return this._peer.request(method, params)\n  }\n\n  notify (method, params) {\n    return this._peer.notify(method, params)\n  }\n}\n"]}