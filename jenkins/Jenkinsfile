#!/usr/bin/env groovy

/*
 * (C) Copyright 2020 Radix DLT Ltd
 *
 * Radix DLT Ltd licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the
 * License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the License.
 */

@Library(value = 'jenkins-lib@test-build-radix-core', changelog = false) _

pipeline {
    tools {
        jdk 'open-jdk-11'
    }
    options {
        timeout(time: 20, unit: 'MINUTES')
    }
    agent {
        label 'master'
    }
    stages {

        stage('Checkout RadixCore') {
            steps {
//               sendNotifications "STARTED"
                script {
                    dir('RadixCore') {
                        deleteDir()
                    }
                    checkoutHelpers.doCheckout("RadixCore")
                }
            }
        }
        stage('Check tag and branch have same commit') {
            steps {
                script {
                    dir('RadixCore') {
                        env.check = sh(
                                script: '''
                                    tag_commit=`git show-ref $(git describe --abbrev=0 --tags) | cut -d" " -f1`
                                    branch_commit=`git show-ref refs/remotes/origin/task/RPNV1-262-release-branch-job | cut -d" " -f1`
                                    if [ $tag_commit == $branch_commit ] 
                                    then 
                                        echo "passed"
                                    else 
                                        echo "failed"
                                ''', returnStdout: true
                        ).trim()
                        echo env.check

                    }
                }
            }
        }

        stage('Build and push core image') {
            when {
                expression {
                    env.check == "passed"
                }
            }
            steps {
                dir('RadixCore') {
                    script {
                        tag = sh(
                                script: '''
                                    git describe --abbrev=0 --tags
                                ''', returnStdout: true
                        ).trim()
                        dockerHelpers.manualPushToDockerHub("radixdlt-core", tag)
                    }
                }
            }

        }
        stage('Downstream jobs') {
            parallel {
                stage('deploy-release'){
                    steps{
                        build job: 'Release-Branch/deploy-release'
                    }
                }
                stage('docker-continuous-tests'){
                    steps {
                        build job: 'Release-Branch/docker-continuous-tests'
                    }
                }
                stage('regression-acceptance-tests'){
                    steps{
                        build job: 'Release-Branch/regression-acceptance-tests'
                    }
                }
                stage('deterministic-simulation-tests'){
                    steps{
                        build job: 'Release-Branch/deterministic-simulation-tests'
                    }
                }
            }
        }
    }
//    post {
//        always {
////            sendNotifications currentBuild.result
//        }
//    }
}
