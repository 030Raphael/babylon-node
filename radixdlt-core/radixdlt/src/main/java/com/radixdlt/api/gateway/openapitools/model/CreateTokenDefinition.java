/*
 * Radix Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.gateway.openapitools.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.radixdlt.api.gateway.openapitools.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * CreateTokenDefinition
 */
@JsonPropertyOrder({
  CreateTokenDefinition.JSON_PROPERTY_TOKEN_PROPERTIES,
  CreateTokenDefinition.JSON_PROPERTY_TOKEN_SUPPLY,
  CreateTokenDefinition.JSON_PROPERTY_TO
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-27T11:34:49.994520-06:00[America/Chicago]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = BurnTokens.class, name = "BurnTokens"),
  @JsonSubTypes.Type(value = MintTokens.class, name = "MintTokens"),
  @JsonSubTypes.Type(value = StakeTokens.class, name = "StakeTokens"),
  @JsonSubTypes.Type(value = TransferTokens.class, name = "TransferTokens"),
  @JsonSubTypes.Type(value = UnstakeTokens.class, name = "UnstakeTokens"),
})

public class CreateTokenDefinition extends Action {
  public static final String JSON_PROPERTY_TOKEN_PROPERTIES = "token_properties";
  private TokenProperties tokenProperties;

  public static final String JSON_PROPERTY_TOKEN_SUPPLY = "token_supply";
  private TokenAmount tokenSupply;

  public static final String JSON_PROPERTY_TO = "to";
  private AccountIdentifier to;


  public CreateTokenDefinition tokenProperties(TokenProperties tokenProperties) {
    this.tokenProperties = tokenProperties;
    return this;
  }

   /**
   * Get tokenProperties
   * @return tokenProperties
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TOKEN_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TokenProperties getTokenProperties() {
    return tokenProperties;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokenProperties(TokenProperties tokenProperties) {
    this.tokenProperties = tokenProperties;
  }


  public CreateTokenDefinition tokenSupply(TokenAmount tokenSupply) {
    this.tokenSupply = tokenSupply;
    return this;
  }

   /**
   * Get tokenSupply
   * @return tokenSupply
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TOKEN_SUPPLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TokenAmount getTokenSupply() {
    return tokenSupply;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_SUPPLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokenSupply(TokenAmount tokenSupply) {
    this.tokenSupply = tokenSupply;
  }


  public CreateTokenDefinition to(AccountIdentifier to) {
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AccountIdentifier getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTo(AccountIdentifier to) {
    this.to = to;
  }


  /**
   * Return true if this CreateTokenDefinition object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTokenDefinition createTokenDefinition = (CreateTokenDefinition) o;
    return Objects.equals(this.tokenProperties, createTokenDefinition.tokenProperties) &&
        Objects.equals(this.tokenSupply, createTokenDefinition.tokenSupply) &&
        Objects.equals(this.to, createTokenDefinition.to) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenProperties, tokenSupply, to, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTokenDefinition {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    tokenProperties: ").append(toIndentedString(tokenProperties)).append("\n");
    sb.append("    tokenSupply: ").append(toIndentedString(tokenSupply)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("BurnTokens", BurnTokens.class);
  mappings.put("MintTokens", MintTokens.class);
  mappings.put("StakeTokens", StakeTokens.class);
  mappings.put("TransferTokens", TransferTokens.class);
  mappings.put("UnstakeTokens", UnstakeTokens.class);
  mappings.put("CreateTokenDefinition", CreateTokenDefinition.class);
  JSON.registerDiscriminator(CreateTokenDefinition.class, "type", mappings);
}
}

