/*
 * Radix Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.gateway.openapitools.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.radixdlt.api.gateway.openapitools.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * TokenDeriveResponseSuccess
 */
@JsonPropertyOrder({
  TokenDeriveResponseSuccess.JSON_PROPERTY_TOKEN_IDENTIFIER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-01T17:41:28.920972-06:00[America/Chicago]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = TokenDeriveResponseError.class, name = "TokenResponseError"),
  @JsonSubTypes.Type(value = TokenDeriveResponseSuccess.class, name = "TokenResponseSuccess"),
})

public class TokenDeriveResponseSuccess extends TokenDeriveResponse {
  public static final String JSON_PROPERTY_TOKEN_IDENTIFIER = "token_identifier";
  private TokenIdentifier tokenIdentifier;


  public TokenDeriveResponseSuccess tokenIdentifier(TokenIdentifier tokenIdentifier) {
    this.tokenIdentifier = tokenIdentifier;
    return this;
  }

   /**
   * Get tokenIdentifier
   * @return tokenIdentifier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TOKEN_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TokenIdentifier getTokenIdentifier() {
    return tokenIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTokenIdentifier(TokenIdentifier tokenIdentifier) {
    this.tokenIdentifier = tokenIdentifier;
  }


  /**
   * Return true if this TokenDeriveResponseSuccess object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenDeriveResponseSuccess tokenDeriveResponseSuccess = (TokenDeriveResponseSuccess) o;
    return Objects.equals(this.tokenIdentifier, tokenDeriveResponseSuccess.tokenIdentifier) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenIdentifier, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenDeriveResponseSuccess {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    tokenIdentifier: ").append(toIndentedString(tokenIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("TokenResponseError", TokenDeriveResponseError.class);
  mappings.put("TokenResponseSuccess", TokenDeriveResponseSuccess.class);
  mappings.put("TokenDeriveResponseSuccess", TokenDeriveResponseSuccess.class);
  JSON.registerDiscriminator(TokenDeriveResponseSuccess.class, "type", mappings);
}
}

