/*
 * Radix Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.gateway.openapitools.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * TransactionBuild
 */
@JsonPropertyOrder({
  TransactionBuild.JSON_PROPERTY_FEE,
  TransactionBuild.JSON_PROPERTY_UNSIGNED_TRANSACTION,
  TransactionBuild.JSON_PROPERTY_PAYLOAD_TO_SIGN
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-27T11:34:49.994520-06:00[America/Chicago]")
public class TransactionBuild {
  public static final String JSON_PROPERTY_FEE = "fee";
  private TokenAmount fee;

  public static final String JSON_PROPERTY_UNSIGNED_TRANSACTION = "unsigned_transaction";
  private String unsignedTransaction;

  public static final String JSON_PROPERTY_PAYLOAD_TO_SIGN = "payload_to_sign";
  private String payloadToSign;


  public TransactionBuild fee(TokenAmount fee) {
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_FEE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TokenAmount getFee() {
    return fee;
  }


  @JsonProperty(JSON_PROPERTY_FEE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFee(TokenAmount fee) {
    this.fee = fee;
  }


  public TransactionBuild unsignedTransaction(String unsignedTransaction) {
    this.unsignedTransaction = unsignedTransaction;
    return this;
  }

   /**
   * Get unsignedTransaction
   * @return unsignedTransaction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UNSIGNED_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUnsignedTransaction() {
    return unsignedTransaction;
  }


  @JsonProperty(JSON_PROPERTY_UNSIGNED_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnsignedTransaction(String unsignedTransaction) {
    this.unsignedTransaction = unsignedTransaction;
  }


  public TransactionBuild payloadToSign(String payloadToSign) {
    this.payloadToSign = payloadToSign;
    return this;
  }

   /**
   * Get payloadToSign
   * @return payloadToSign
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PAYLOAD_TO_SIGN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPayloadToSign() {
    return payloadToSign;
  }


  @JsonProperty(JSON_PROPERTY_PAYLOAD_TO_SIGN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayloadToSign(String payloadToSign) {
    this.payloadToSign = payloadToSign;
  }


  /**
   * Return true if this TransactionBuild object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionBuild transactionBuild = (TransactionBuild) o;
    return Objects.equals(this.fee, transactionBuild.fee) &&
        Objects.equals(this.unsignedTransaction, transactionBuild.unsignedTransaction) &&
        Objects.equals(this.payloadToSign, transactionBuild.payloadToSign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fee, unsignedTransaction, payloadToSign);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionBuild {\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    unsignedTransaction: ").append(toIndentedString(unsignedTransaction)).append("\n");
    sb.append("    payloadToSign: ").append(toIndentedString(payloadToSign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

