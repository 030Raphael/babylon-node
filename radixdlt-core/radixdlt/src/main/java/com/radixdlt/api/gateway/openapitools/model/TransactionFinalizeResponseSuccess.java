/*
 * Radix Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radixdlt.api.gateway.openapitools.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.radixdlt.api.gateway.openapitools.JSON;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * TransactionFinalizeResponseSuccess
 */
@JsonPropertyOrder({
  TransactionFinalizeResponseSuccess.JSON_PROPERTY_SIGNED_TRANSACTION,
  TransactionFinalizeResponseSuccess.JSON_PROPERTY_TRANSACTION_IDENTIFIER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-01T19:04:44.841200-06:00[America/Chicago]")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = TransactionFinalizeResponseError.class, name = "TransactionFinalizeResponseError"),
  @JsonSubTypes.Type(value = TransactionFinalizeResponseSuccess.class, name = "TransactionFinalizeResponseSuccess"),
})

public class TransactionFinalizeResponseSuccess extends TransactionFinalizeResponse {
  public static final String JSON_PROPERTY_SIGNED_TRANSACTION = "signed_transaction";
  private String signedTransaction;

  public static final String JSON_PROPERTY_TRANSACTION_IDENTIFIER = "transaction_identifier";
  private TransactionIdentifier transactionIdentifier;


  public TransactionFinalizeResponseSuccess signedTransaction(String signedTransaction) {
    this.signedTransaction = signedTransaction;
    return this;
  }

   /**
   * Get signedTransaction
   * @return signedTransaction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SIGNED_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSignedTransaction() {
    return signedTransaction;
  }


  @JsonProperty(JSON_PROPERTY_SIGNED_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSignedTransaction(String signedTransaction) {
    this.signedTransaction = signedTransaction;
  }


  public TransactionFinalizeResponseSuccess transactionIdentifier(TransactionIdentifier transactionIdentifier) {
    this.transactionIdentifier = transactionIdentifier;
    return this;
  }

   /**
   * Get transactionIdentifier
   * @return transactionIdentifier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TransactionIdentifier getTransactionIdentifier() {
    return transactionIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionIdentifier(TransactionIdentifier transactionIdentifier) {
    this.transactionIdentifier = transactionIdentifier;
  }


  /**
   * Return true if this TransactionFinalizeResponseSuccess object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionFinalizeResponseSuccess transactionFinalizeResponseSuccess = (TransactionFinalizeResponseSuccess) o;
    return Objects.equals(this.signedTransaction, transactionFinalizeResponseSuccess.signedTransaction) &&
        Objects.equals(this.transactionIdentifier, transactionFinalizeResponseSuccess.transactionIdentifier) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signedTransaction, transactionIdentifier, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionFinalizeResponseSuccess {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    signedTransaction: ").append(toIndentedString(signedTransaction)).append("\n");
    sb.append("    transactionIdentifier: ").append(toIndentedString(transactionIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("TransactionFinalizeResponseError", TransactionFinalizeResponseError.class);
  mappings.put("TransactionFinalizeResponseSuccess", TransactionFinalizeResponseSuccess.class);
  mappings.put("TransactionFinalizeResponseSuccess", TransactionFinalizeResponseSuccess.class);
  JSON.registerDiscriminator(TransactionFinalizeResponseSuccess.class, "type", mappings);
}
}

