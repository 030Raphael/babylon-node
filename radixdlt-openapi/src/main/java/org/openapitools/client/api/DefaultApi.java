/*
 * Wallet/Explorer Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountBalancesRequest;
import org.openapitools.client.model.AccountBalancesResponse;
import org.openapitools.client.model.AccountStakesRequest;
import org.openapitools.client.model.AccountStakesResponse;
import org.openapitools.client.model.AccountTransactionsRequest;
import org.openapitools.client.model.AccountTransactionsResponse;
import org.openapitools.client.model.AccountUnstakesRequest;
import org.openapitools.client.model.AccountUnstakesResponse;
import org.openapitools.client.model.ConstructionBuildRequest;
import org.openapitools.client.model.ConstructionBuildResponse;
import org.openapitools.client.model.ConstructionFinalizeRequest;
import org.openapitools.client.model.ConstructionFinalizeResponse;
import org.openapitools.client.model.ConstructionSubmitRequest;
import org.openapitools.client.model.ConstructionSubmitResponse;
import org.openapitools.client.model.ConstructionSubmitUnexpectedError;
import org.openapitools.client.model.NetworkResponse;
import org.openapitools.client.model.TokenInfoRequest;
import org.openapitools.client.model.TokenInfoResponse;
import org.openapitools.client.model.TransactionInfoRequest;
import org.openapitools.client.model.TransactionInfoResponse;
import org.openapitools.client.model.TransactionStatusRequest;
import org.openapitools.client.model.TransactionStatusResponse;
import org.openapitools.client.model.UnexpectedError;
import org.openapitools.client.model.ValidatorInfoRequest;
import org.openapitools.client.model.ValidatorInfoResponse;
import org.openapitools.client.model.ValidatorsRequest;
import org.openapitools.client.model.ValidatorsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for accountBalancesPost
     * @param accountBalancesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of token balances </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountBalancesPostCall(AccountBalancesRequest accountBalancesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountBalancesRequest;

        // create path and map variables
        String localVarPath = "/account/balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountBalancesPostValidateBeforeCall(AccountBalancesRequest accountBalancesRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountBalancesRequest' is set
        if (accountBalancesRequest == null) {
            throw new ApiException("Missing the required parameter 'accountBalancesRequest' when calling accountBalancesPost(Async)");
        }
        

        okhttp3.Call localVarCall = accountBalancesPostCall(accountBalancesRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Token Balances
     * 
     * @param accountBalancesRequest  (required)
     * @return AccountBalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of token balances </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AccountBalancesResponse accountBalancesPost(AccountBalancesRequest accountBalancesRequest) throws ApiException {
        ApiResponse<AccountBalancesResponse> localVarResp = accountBalancesPostWithHttpInfo(accountBalancesRequest);
        return localVarResp.getData();
    }

    /**
     * Get Token Balances
     * 
     * @param accountBalancesRequest  (required)
     * @return ApiResponse&lt;AccountBalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of token balances </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountBalancesResponse> accountBalancesPostWithHttpInfo(AccountBalancesRequest accountBalancesRequest) throws ApiException {
        okhttp3.Call localVarCall = accountBalancesPostValidateBeforeCall(accountBalancesRequest, null);
        Type localVarReturnType = new TypeToken<AccountBalancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Token Balances (asynchronously)
     * 
     * @param accountBalancesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of token balances </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountBalancesPostAsync(AccountBalancesRequest accountBalancesRequest, final ApiCallback<AccountBalancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountBalancesPostValidateBeforeCall(accountBalancesRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountBalancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountStakesPost
     * @param accountStakesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Stake Positions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountStakesPostCall(AccountStakesRequest accountStakesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountStakesRequest;

        // create path and map variables
        String localVarPath = "/account/stakes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountStakesPostValidateBeforeCall(AccountStakesRequest accountStakesRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountStakesRequest' is set
        if (accountStakesRequest == null) {
            throw new ApiException("Missing the required parameter 'accountStakesRequest' when calling accountStakesPost(Async)");
        }
        

        okhttp3.Call localVarCall = accountStakesPostCall(accountStakesRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Stake Positions
     * 
     * @param accountStakesRequest  (required)
     * @return AccountStakesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Stake Positions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AccountStakesResponse accountStakesPost(AccountStakesRequest accountStakesRequest) throws ApiException {
        ApiResponse<AccountStakesResponse> localVarResp = accountStakesPostWithHttpInfo(accountStakesRequest);
        return localVarResp.getData();
    }

    /**
     * Get Stake Positions
     * 
     * @param accountStakesRequest  (required)
     * @return ApiResponse&lt;AccountStakesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Stake Positions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountStakesResponse> accountStakesPostWithHttpInfo(AccountStakesRequest accountStakesRequest) throws ApiException {
        okhttp3.Call localVarCall = accountStakesPostValidateBeforeCall(accountStakesRequest, null);
        Type localVarReturnType = new TypeToken<AccountStakesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Stake Positions (asynchronously)
     * 
     * @param accountStakesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Stake Positions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountStakesPostAsync(AccountStakesRequest accountStakesRequest, final ApiCallback<AccountStakesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountStakesPostValidateBeforeCall(accountStakesRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountStakesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountTransactionsPost
     * @param accountTransactionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountTransactionsPostCall(AccountTransactionsRequest accountTransactionsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountTransactionsRequest;

        // create path and map variables
        String localVarPath = "/account/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountTransactionsPostValidateBeforeCall(AccountTransactionsRequest accountTransactionsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountTransactionsRequest' is set
        if (accountTransactionsRequest == null) {
            throw new ApiException("Missing the required parameter 'accountTransactionsRequest' when calling accountTransactionsPost(Async)");
        }
        

        okhttp3.Call localVarCall = accountTransactionsPostCall(accountTransactionsRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Account Transactions
     * 
     * @param accountTransactionsRequest  (required)
     * @return AccountTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AccountTransactionsResponse accountTransactionsPost(AccountTransactionsRequest accountTransactionsRequest) throws ApiException {
        ApiResponse<AccountTransactionsResponse> localVarResp = accountTransactionsPostWithHttpInfo(accountTransactionsRequest);
        return localVarResp.getData();
    }

    /**
     * Get Account Transactions
     * 
     * @param accountTransactionsRequest  (required)
     * @return ApiResponse&lt;AccountTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountTransactionsResponse> accountTransactionsPostWithHttpInfo(AccountTransactionsRequest accountTransactionsRequest) throws ApiException {
        okhttp3.Call localVarCall = accountTransactionsPostValidateBeforeCall(accountTransactionsRequest, null);
        Type localVarReturnType = new TypeToken<AccountTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Transactions (asynchronously)
     * 
     * @param accountTransactionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Transactions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountTransactionsPostAsync(AccountTransactionsRequest accountTransactionsRequest, final ApiCallback<AccountTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountTransactionsPostValidateBeforeCall(accountTransactionsRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountUnstakesPost
     * @param accountUnstakesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Unstake Positions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountUnstakesPostCall(AccountUnstakesRequest accountUnstakesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountUnstakesRequest;

        // create path and map variables
        String localVarPath = "/account/unstakes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountUnstakesPostValidateBeforeCall(AccountUnstakesRequest accountUnstakesRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountUnstakesRequest' is set
        if (accountUnstakesRequest == null) {
            throw new ApiException("Missing the required parameter 'accountUnstakesRequest' when calling accountUnstakesPost(Async)");
        }
        

        okhttp3.Call localVarCall = accountUnstakesPostCall(accountUnstakesRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Unstake Positions
     * 
     * @param accountUnstakesRequest  (required)
     * @return AccountUnstakesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Unstake Positions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public AccountUnstakesResponse accountUnstakesPost(AccountUnstakesRequest accountUnstakesRequest) throws ApiException {
        ApiResponse<AccountUnstakesResponse> localVarResp = accountUnstakesPostWithHttpInfo(accountUnstakesRequest);
        return localVarResp.getData();
    }

    /**
     * Get Unstake Positions
     * 
     * @param accountUnstakesRequest  (required)
     * @return ApiResponse&lt;AccountUnstakesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Unstake Positions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountUnstakesResponse> accountUnstakesPostWithHttpInfo(AccountUnstakesRequest accountUnstakesRequest) throws ApiException {
        okhttp3.Call localVarCall = accountUnstakesPostValidateBeforeCall(accountUnstakesRequest, null);
        Type localVarReturnType = new TypeToken<AccountUnstakesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Unstake Positions (asynchronously)
     * 
     * @param accountUnstakesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Unstake Positions </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountUnstakesPostAsync(AccountUnstakesRequest accountUnstakesRequest, final ApiCallback<AccountUnstakesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountUnstakesPostValidateBeforeCall(accountUnstakesRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountUnstakesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionBuildPost
     * @param constructionBuildRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An unsigned transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionBuildPostCall(ConstructionBuildRequest constructionBuildRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionBuildRequest;

        // create path and map variables
        String localVarPath = "/construction/build";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionBuildPostValidateBeforeCall(ConstructionBuildRequest constructionBuildRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionBuildRequest' is set
        if (constructionBuildRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionBuildRequest' when calling constructionBuildPost(Async)");
        }
        

        okhttp3.Call localVarCall = constructionBuildPostCall(constructionBuildRequest, _callback);
        return localVarCall;

    }

    /**
     * Build Transaction
     * 
     * @param constructionBuildRequest  (required)
     * @return ConstructionBuildResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An unsigned transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionBuildResponse constructionBuildPost(ConstructionBuildRequest constructionBuildRequest) throws ApiException {
        ApiResponse<ConstructionBuildResponse> localVarResp = constructionBuildPostWithHttpInfo(constructionBuildRequest);
        return localVarResp.getData();
    }

    /**
     * Build Transaction
     * 
     * @param constructionBuildRequest  (required)
     * @return ApiResponse&lt;ConstructionBuildResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An unsigned transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionBuildResponse> constructionBuildPostWithHttpInfo(ConstructionBuildRequest constructionBuildRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionBuildPostValidateBeforeCall(constructionBuildRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionBuildResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build Transaction (asynchronously)
     * 
     * @param constructionBuildRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An unsigned transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionBuildPostAsync(ConstructionBuildRequest constructionBuildRequest, final ApiCallback<ConstructionBuildResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionBuildPostValidateBeforeCall(constructionBuildRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionBuildResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionFinalizePost
     * @param constructionFinalizeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Final Signed Transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionFinalizePostCall(ConstructionFinalizeRequest constructionFinalizeRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionFinalizeRequest;

        // create path and map variables
        String localVarPath = "/construction/finalize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionFinalizePostValidateBeforeCall(ConstructionFinalizeRequest constructionFinalizeRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionFinalizeRequest' is set
        if (constructionFinalizeRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionFinalizeRequest' when calling constructionFinalizePost(Async)");
        }
        

        okhttp3.Call localVarCall = constructionFinalizePostCall(constructionFinalizeRequest, _callback);
        return localVarCall;

    }

    /**
     * Finalize Transaction
     * 
     * @param constructionFinalizeRequest  (required)
     * @return ConstructionFinalizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Final Signed Transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionFinalizeResponse constructionFinalizePost(ConstructionFinalizeRequest constructionFinalizeRequest) throws ApiException {
        ApiResponse<ConstructionFinalizeResponse> localVarResp = constructionFinalizePostWithHttpInfo(constructionFinalizeRequest);
        return localVarResp.getData();
    }

    /**
     * Finalize Transaction
     * 
     * @param constructionFinalizeRequest  (required)
     * @return ApiResponse&lt;ConstructionFinalizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Final Signed Transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionFinalizeResponse> constructionFinalizePostWithHttpInfo(ConstructionFinalizeRequest constructionFinalizeRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionFinalizePostValidateBeforeCall(constructionFinalizeRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionFinalizeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finalize Transaction (asynchronously)
     * 
     * @param constructionFinalizeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Final Signed Transaction </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionFinalizePostAsync(ConstructionFinalizeRequest constructionFinalizeRequest, final ApiCallback<ConstructionFinalizeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionFinalizePostValidateBeforeCall(constructionFinalizeRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionFinalizeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for constructionSubmitPost
     * @param constructionSubmitRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Submission </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionSubmitPostCall(ConstructionSubmitRequest constructionSubmitRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = constructionSubmitRequest;

        // create path and map variables
        String localVarPath = "/construction/submit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call constructionSubmitPostValidateBeforeCall(ConstructionSubmitRequest constructionSubmitRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'constructionSubmitRequest' is set
        if (constructionSubmitRequest == null) {
            throw new ApiException("Missing the required parameter 'constructionSubmitRequest' when calling constructionSubmitPost(Async)");
        }
        

        okhttp3.Call localVarCall = constructionSubmitPostCall(constructionSubmitRequest, _callback);
        return localVarCall;

    }

    /**
     * Submit Transaction
     * 
     * @param constructionSubmitRequest  (required)
     * @return ConstructionSubmitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Submission </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ConstructionSubmitResponse constructionSubmitPost(ConstructionSubmitRequest constructionSubmitRequest) throws ApiException {
        ApiResponse<ConstructionSubmitResponse> localVarResp = constructionSubmitPostWithHttpInfo(constructionSubmitRequest);
        return localVarResp.getData();
    }

    /**
     * Submit Transaction
     * 
     * @param constructionSubmitRequest  (required)
     * @return ApiResponse&lt;ConstructionSubmitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Submission </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConstructionSubmitResponse> constructionSubmitPostWithHttpInfo(ConstructionSubmitRequest constructionSubmitRequest) throws ApiException {
        okhttp3.Call localVarCall = constructionSubmitPostValidateBeforeCall(constructionSubmitRequest, null);
        Type localVarReturnType = new TypeToken<ConstructionSubmitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit Transaction (asynchronously)
     * 
     * @param constructionSubmitRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Submission </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call constructionSubmitPostAsync(ConstructionSubmitRequest constructionSubmitRequest, final ApiCallback<ConstructionSubmitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = constructionSubmitPostValidateBeforeCall(constructionSubmitRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructionSubmitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkPost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Network </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkPostCall(Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/network";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkPostValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling networkPost(Async)");
        }
        

        okhttp3.Call localVarCall = networkPostCall(body, _callback);
        return localVarCall;

    }

    /**
     * Get Network
     * 
     * @param body  (required)
     * @return NetworkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Network </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public NetworkResponse networkPost(Object body) throws ApiException {
        ApiResponse<NetworkResponse> localVarResp = networkPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Get Network
     * 
     * @param body  (required)
     * @return ApiResponse&lt;NetworkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Network </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkResponse> networkPostWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = networkPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<NetworkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Network (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Network </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkPostAsync(Object body, final ApiCallback<NetworkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<NetworkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokenPost
     * @param tokenInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenPostCall(TokenInfoRequest tokenInfoRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tokenInfoRequest;

        // create path and map variables
        String localVarPath = "/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenPostValidateBeforeCall(TokenInfoRequest tokenInfoRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenInfoRequest' is set
        if (tokenInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenInfoRequest' when calling tokenPost(Async)");
        }
        

        okhttp3.Call localVarCall = tokenPostCall(tokenInfoRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Token Info
     * 
     * @param tokenInfoRequest  (required)
     * @return TokenInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TokenInfoResponse tokenPost(TokenInfoRequest tokenInfoRequest) throws ApiException {
        ApiResponse<TokenInfoResponse> localVarResp = tokenPostWithHttpInfo(tokenInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Get Token Info
     * 
     * @param tokenInfoRequest  (required)
     * @return ApiResponse&lt;TokenInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenInfoResponse> tokenPostWithHttpInfo(TokenInfoRequest tokenInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = tokenPostValidateBeforeCall(tokenInfoRequest, null);
        Type localVarReturnType = new TypeToken<TokenInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Token Info (asynchronously)
     * 
     * @param tokenInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokenPostAsync(TokenInfoRequest tokenInfoRequest, final ApiCallback<TokenInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenPostValidateBeforeCall(tokenInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<TokenInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionPost
     * @param transactionInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionPostCall(TransactionInfoRequest transactionInfoRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionInfoRequest;

        // create path and map variables
        String localVarPath = "/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionPostValidateBeforeCall(TransactionInfoRequest transactionInfoRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionInfoRequest' is set
        if (transactionInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionInfoRequest' when calling transactionPost(Async)");
        }
        

        okhttp3.Call localVarCall = transactionPostCall(transactionInfoRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction Info
     * 
     * @param transactionInfoRequest  (required)
     * @return TransactionInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TransactionInfoResponse transactionPost(TransactionInfoRequest transactionInfoRequest) throws ApiException {
        ApiResponse<TransactionInfoResponse> localVarResp = transactionPostWithHttpInfo(transactionInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Info
     * 
     * @param transactionInfoRequest  (required)
     * @return ApiResponse&lt;TransactionInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionInfoResponse> transactionPostWithHttpInfo(TransactionInfoRequest transactionInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionPostValidateBeforeCall(transactionInfoRequest, null);
        Type localVarReturnType = new TypeToken<TransactionInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Info (asynchronously)
     * 
     * @param transactionInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionPostAsync(TransactionInfoRequest transactionInfoRequest, final ApiCallback<TransactionInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionPostValidateBeforeCall(transactionInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionStatusPost
     * @param transactionStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionStatusPostCall(TransactionStatusRequest transactionStatusRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionStatusRequest;

        // create path and map variables
        String localVarPath = "/transaction/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionStatusPostValidateBeforeCall(TransactionStatusRequest transactionStatusRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionStatusRequest' is set
        if (transactionStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionStatusRequest' when calling transactionStatusPost(Async)");
        }
        

        okhttp3.Call localVarCall = transactionStatusPostCall(transactionStatusRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction Status
     * 
     * @param transactionStatusRequest  (required)
     * @return TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public TransactionStatusResponse transactionStatusPost(TransactionStatusRequest transactionStatusRequest) throws ApiException {
        ApiResponse<TransactionStatusResponse> localVarResp = transactionStatusPostWithHttpInfo(transactionStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Status
     * 
     * @param transactionStatusRequest  (required)
     * @return ApiResponse&lt;TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionStatusResponse> transactionStatusPostWithHttpInfo(TransactionStatusRequest transactionStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionStatusPostValidateBeforeCall(transactionStatusRequest, null);
        Type localVarReturnType = new TypeToken<TransactionStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Status (asynchronously)
     * 
     * @param transactionStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transaction Status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionStatusPostAsync(TransactionStatusRequest transactionStatusRequest, final ApiCallback<TransactionStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionStatusPostValidateBeforeCall(transactionStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validatorPost
     * @param validatorInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validator Info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorPostCall(ValidatorInfoRequest validatorInfoRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = validatorInfoRequest;

        // create path and map variables
        String localVarPath = "/validator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorPostValidateBeforeCall(ValidatorInfoRequest validatorInfoRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorInfoRequest' is set
        if (validatorInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'validatorInfoRequest' when calling validatorPost(Async)");
        }
        

        okhttp3.Call localVarCall = validatorPostCall(validatorInfoRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Validator Info
     * 
     * @param validatorInfoRequest  (required)
     * @return ValidatorInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validator Info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ValidatorInfoResponse validatorPost(ValidatorInfoRequest validatorInfoRequest) throws ApiException {
        ApiResponse<ValidatorInfoResponse> localVarResp = validatorPostWithHttpInfo(validatorInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Get Validator Info
     * 
     * @param validatorInfoRequest  (required)
     * @return ApiResponse&lt;ValidatorInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validator Info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidatorInfoResponse> validatorPostWithHttpInfo(ValidatorInfoRequest validatorInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = validatorPostValidateBeforeCall(validatorInfoRequest, null);
        Type localVarReturnType = new TypeToken<ValidatorInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Validator Info (asynchronously)
     * 
     * @param validatorInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validator Info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorPostAsync(ValidatorInfoRequest validatorInfoRequest, final ApiCallback<ValidatorInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorPostValidateBeforeCall(validatorInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<ValidatorInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validatorsPost
     * @param validatorsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ordered list of validators </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorsPostCall(ValidatorsRequest validatorsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = validatorsRequest;

        // create path and map variables
        String localVarPath = "/validators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatorsPostValidateBeforeCall(ValidatorsRequest validatorsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'validatorsRequest' is set
        if (validatorsRequest == null) {
            throw new ApiException("Missing the required parameter 'validatorsRequest' when calling validatorsPost(Async)");
        }
        

        okhttp3.Call localVarCall = validatorsPostCall(validatorsRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Validators
     * 
     * @param validatorsRequest  (required)
     * @return ValidatorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ordered list of validators </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ValidatorsResponse validatorsPost(ValidatorsRequest validatorsRequest) throws ApiException {
        ApiResponse<ValidatorsResponse> localVarResp = validatorsPostWithHttpInfo(validatorsRequest);
        return localVarResp.getData();
    }

    /**
     * Get Validators
     * 
     * @param validatorsRequest  (required)
     * @return ApiResponse&lt;ValidatorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ordered list of validators </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidatorsResponse> validatorsPostWithHttpInfo(ValidatorsRequest validatorsRequest) throws ApiException {
        okhttp3.Call localVarCall = validatorsPostValidateBeforeCall(validatorsRequest, null);
        Type localVarReturnType = new TypeToken<ValidatorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Validators (asynchronously)
     * 
     * @param validatorsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ordered list of validators </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validatorsPostAsync(ValidatorsRequest validatorsRequest, final ApiCallback<ValidatorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatorsPostValidateBeforeCall(validatorsRequest, _callback);
        Type localVarReturnType = new TypeToken<ValidatorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
