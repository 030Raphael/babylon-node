apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'project-report'
apply plugin: 'nebula.ospackage'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.moowork.node'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'org.sonarqube'

node {
    download = true
}

// Example: ./gradlew run ... -P overrideMainClassName=org.radix.GenerateUniverses
mainClassName = properties.get('overrideMainClassName', 'org.radix.Radix')

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration/java')
        }
        resources.srcDir file('src/integration/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile project(":radixdlt-engine")
    compile 'commons-cli:commons-cli:1.4'
    compile 'org.bouncycastle:bcprov-jdk15on:1.52'
    compile 'org.json:json:20180813'
    compile 'org.xerial.snappy:snappy-java:1.1.7.3'

    compile('com.github.everit-org.json-schema:org.everit.json.schema:1.9.1') {
        exclude group: 'org.json', module: 'json'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'commons-collections', module: 'commons-collections'
    }

    // TODO: replace BerkleyDB dep with Vamos
    //compile group: 'com.sleepycat', name: 'je', version: '7.4.5'

    compile('org.reflections:reflections:0.9.11') {
        exclude group: 'com.google.guava', module: 'guava'
    }

    // Jackson serializer
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.9'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.9'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.9'
    compile('com.fasterxml.jackson.datatype:jackson-datatype-json-org:2.9.9') {
        // Use our JSON lib
        exclude group: 'org.json', module: 'json'
    }
    compile('com.fasterxml.jackson.datatype:jackson-datatype-guava:2.9.9') {
        // Use our Guava lib
        exclude group: 'com.google.guava', module: 'guava'
    }

    // TODO: Lets port to use NIO/NIO2 instead of naga
    compile fileTree(dir: 'libs', include: '*.jar')

    //compile project(':vamos')

    compile group: 'io.undertow', name: 'undertow-core', version: '2.0.6.Final'
    compile group: 'io.undertow', name: 'undertow-servlet', version: '2.0.6.Final'
    compile group: 'com.stijndewitt.undertow.cors', name: 'undertow-cors-filter', version: '0.4.0'

    compile 'com.google.guava:guava:26.0-jre'

    testCompile('org.objenesis:objenesis:2.4') { force = true } // make powermock 1.7.1 happy
    testCompile('org.javassist:javassist:3.21.0-GA') { force = true } // make powermock 1.7.1 happy
    testCompile 'org.powermock:powermock-module-junit4:1.7.4'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:3.1.5'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.4'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile('com.flipkart.zjsonpatch:zjsonpatch:0.4.5') {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }

    // JMH
    testCompile 'org.openjdk.jmh:jmh-core:1.21'
    testCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
}

jmh {
    duplicateClassesStrategy = 'include'
    fork = 2
    iterations = 3
    warmupIterations = 1
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

// More warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation'
    //options.compilerArgs << '-Xlint:unchecked' // Way too many of these at the moment
    options.deprecation = true
}

// More memory
tasks.withType(JavaExec) {
    jvmArgs = ['-Xmx1024m']
}

// Compress distTar
tasks.withType(Tar) {
    compression = Compression.GZIP
}

task createGenerateUniversesScripts(type: CreateStartScripts) {
  mainClassName = 'org.radix.GenerateUniverses'
  applicationName = 'generate_universes'
}
tasks.getByName("createGenerateUniversesScripts").outputDir = tasks.getByName("startScripts").outputDir
tasks.getByName("createGenerateUniversesScripts").classpath = tasks.getByName("startScripts").classpath
tasks.getByName("createGenerateUniversesScripts").optsEnvironmentVar = tasks.getByName("startScripts").optsEnvironmentVar
tasks.getByName("startScripts").dependsOn createGenerateUniversesScripts

task createGenerateNodeKeyScripts(type: CreateStartScripts) {
  mainClassName = 'org.radix.GenerateNodeKey'
  applicationName = 'generate_node_key'
}
tasks.getByName("createGenerateNodeKeyScripts").outputDir = tasks.getByName("startScripts").outputDir
tasks.getByName("createGenerateNodeKeyScripts").classpath = tasks.getByName("startScripts").classpath
tasks.getByName("createGenerateNodeKeyScripts").optsEnvironmentVar = tasks.getByName("startScripts").optsEnvironmentVar
tasks.getByName("startScripts").dependsOn createGenerateNodeKeyScripts


ospackage {
    release = build
    os = LINUX

    postInstall file('ospackage/postinst.sh')
    preUninstall file('ospackage/prerm.sh')
    postUninstall file('ospackage/postrm.sh')

    from("$buildDir/install/$name") {
        into "/opt/$name"
    }
    from("ospackage/${name}.service") {
        into "/etc/systemd/system"
    }

    buildDeb {
        dependsOn += [installDist]
    }
    buildRpm {
        dependsOn += [installDist]
    }
}

/**
 * Display size of each dependency
 */
task depsize {
    doLast {
        final formatStr = "%,10.2f"
        final conf = configurations.default
        final size = conf.collect { it.length() / (1024 * 1024) }.sum()
        final out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} Mb\n\n"
        conf.sort { -it.length() }
                .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
        }
        println(out)
    }
}

/**
 * Manages the *.deb file in the docker directory 
 */
task deb4docker(type: Copy, dependsOn: buildDeb) {
    from("$buildDir/distributions") {
        include "radixdlt_${version}-*_all.deb"
    }
    into rootProject.file('docker')
    doFirst {
        def names = [] as Set
        destinationDir.eachFileMatch(groovy.io.FileType.FILES, ~/radixdlt_[\d\.]+-\d+_all\.deb/) {
            names << it.name
        }
        names.toSorted().each {
            def rip = new File(destinationDir, it)
            rip.delete()
            println "Deleting conflicting deb package: ${rip.name} ..."
        }
    }
}

/**
 * Creates the JSON RPC documentation
 */
task updatejsonschema2md(type: Copy, dependsOn: npmInstall) {
    from 'header.ejs'
    into 'node_modules/@adobe/jsonschema2md/templates/md'
}

task genmarkdown(type: NodeTask, dependsOn: updatejsonschema2md) {
    script = file('node_modules/@adobe/jsonschema2md/cli.js')
    args = ["-d", "$projectDir/src/main/resources/schemas", "-o", "$projectDir/src/main/resources/markdown"]
}

task gendoc(type: NodeTask, dependsOn: genmarkdown) {
    script = file('create-html.js')
}

/**
 * Run integration tests.
 */
task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

integrationTest.mustRunAfter test

/**
 * Creates the JSON RPC documentation and manages the *.deb file in the docker directory
 */
task gendocanddeb4docker(dependsOn: [gendoc, deb4docker]) {
    deb4docker.mustRunAfter(gendoc);
}

def javaHome = System.getProperty('java.home')
def obfuscatedJarArchivePath = jar.archivePath
def originalJarArchivePath = file(jar.archivePath.path.replace('.jar', '-original.jar'))

/**
 * Generate a random permutation of the strings 'a' through 'z' into the specified file.
 */
def generateRandomDictionary(String where) {
    def names = new ArrayList('a'..'z')
    Collections.shuffle(names)
    // Remove between 20% and 40% (exclusive) of the elements
    int twentyPercentRoundedUp = (names.size + 4) / 5
    int toRemove = twentyPercentRoundedUp + new Random().nextInt(twentyPercentRoundedUp)
    new File(where).withWriter{ out ->
        names.drop(toRemove).each {
            out.println it
        }
    }
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: jar) {

    doFirst {
        // rename jar archive jar.archivePath -> originalJarArchivePath
        jar.archivePath.renameTo(originalJarArchivePath)

        // Generate dictionary files here - see obfuscationdictionary et al below
        mkdir "$buildDir"
        generateRandomDictionary "$buildDir/method-dictionary.txt"
        generateRandomDictionary "$buildDir/class-dictionary.txt"
        generateRandomDictionary "$buildDir/package-dictionary.txt"
    }

    // Specify the input jars, output jars, and library jars.
    injars originalJarArchivePath
    outjars obfuscatedJarArchivePath

    libraryjars "$javaHome/lib/rt.jar"
    libraryjars "$javaHome/lib/jce.jar"
    configurations.runtime.each {
        libraryjars it
    }

    // Use random obfuscation dictionaries
    obfuscationdictionary "$buildDir/method-dictionary.txt"
    classobfuscationdictionary "$buildDir/class-dictionary.txt"
    packageobfuscationdictionary "$buildDir/package-dictionary.txt"

    // Save the obfuscation mapping to a file, so you can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.
    printmapping "$buildDir/proguard.map"
    renamesourcefileattribute 'SourceFile'
    keepattributes 'SourceFile,LineNumberTable,Signature'

    // Preserve all annotations.
    keepattributes '*Annotation*'

    // You can print out the seeds that are matching the keep options below.
    //printseeds 'out.seeds'

    // Preserve all public applications.
    keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'

    // Preserve all native method names and the names of their classes.
    keepclasseswithmembernames includedescriptorclasses:true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration
    // classes.
    keepclassmembers 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    // You can comment this out if your application doesn't use serialization.
    // If your code contains serializable classes that have to be backward
    // compatible, please refer to the manual.
    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    // Preserve the CLASSID() method name because its referenced with reflection.
    keepclassmembers 'class * { \
        public static long CLASSID(); \
    }'

    // need this otherwise berkleydb crash on startup
    keepdirectories '**'

    // java.lang.NoSuchMethodException: Failed to discovery suitable method for 'emit'
    keepclassmembers 'class org.radix.assets.emitters.* { \
        public void emit(org.radix.atoms.Atom); \
    }'

    // Proguard configuration for Jackson 2.x
    keepclassmembers 'class * { \
       @com.fasterxml.jackson.annotation.* *; \
       @com.radixdlt.serialization.* *; \
	}'

    // NOTE: There should be uncommented by default to enable obfuscation
    keep 'class org.radix.api.dto.** { *; }'
    keep 'class com.radixdlt.** { *; }'
    //keep 'class org.radix.api.** { *; }'
    //keep 'class org.radix.atoms.** { *; }'
    //keep 'class org.radix.assets.** { *; }'
    //keep 'class org.radix.collections.** { *; }'
    //keep 'class org.radix.common.** { *; }'
    //keep 'class org.radix.concurrency.** { *; }'
    //keep 'class org.radix.containers.** { *; }'
    //keep 'class org.radix.crypto.** { *; }'
    //keep 'class org.radix.database.** { *; }'
    //keep 'class org.radix.discovery.** { *; }'
    //keep 'class org.radix.errors.** { *; }'
    //keep 'class org.radix.events.** { *; }'
    //keep 'class org.radix.exceptions.** { *; }'
    //keep 'class org.radix.interfaces.** { *; }'
    //keep 'class org.radix.logging.** { *; }'
    //keep 'class org.radix.mass.** { *; }'
    //keep 'class org.radix.modules.** { *; }'
    //keep 'class org.radix.network.** { *; }'
    //keep 'class org.radix.payloads.** { *; }'
    //keep 'class org.radix.pow.** { *; }'
    //keep 'class org.radix.properties.** { *; }'
    //keep 'class org.radix.routing.** { *; }'
    //keep 'class org.radix.scrypto.** { *; }'
    //keep 'class org.radix.security.** { *; }'
    //keep 'class org.radix.serialization.** { *; }'
    //keep 'class org.radix.state.** { *; }'
    //keep 'class org.radix.time.** { *; }'
    //keep 'class org.radix.universe.** { *; }'
    //keep 'class org.radix.utils.** { *; }'
    //keep 'class org.radix.validation.** { *; }'
    //keep 'class org.radix.GenerateUniverses { *; }'
    //keep 'class org.radix.Radix { *; }'
    //keep 'class org.radix.RadixServer { *; }'

    // TODO: enable shrink & optimize for beta
    dontshrink
    dontoptimize
    //dontpreverify
    //dontobfuscate
    //overloadaggressively // See RAMD-123 for why this is commented out
}

// inject the proguard task into the build process if it is not explicitly turned off:
// ./gradlew deb4docker ... -P obfuscation=off
def proguardDependsOn = properties.get('obfuscation') == 'off' ? [] : proguard
tasks.withType(CreateStartScripts) {
    dependsOn proguardDependsOn
}
