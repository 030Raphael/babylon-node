/* tslint:disable */
/* eslint-disable */
/**
 * Radix Core API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node\'s function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node\'s current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BasicErrorResponse,
  BrowseEntityInfoRequest,
  BrowseEntityInfoResponse,
  BrowseEntityIteratorRequest,
  BrowseEntityIteratorResponse,
  BrowseKeyValueStoreIteratorRequest,
  BrowseKeyValueStoreIteratorResponse,
  BrowseObjectCollectionIteratorRequest,
  BrowseObjectCollectionIteratorResponse,
  BrowseObjectFieldRequest,
  BrowseObjectFieldResponse,
} from '../models';
import {
    BasicErrorResponseFromJSON,
    BasicErrorResponseToJSON,
    BrowseEntityInfoRequestFromJSON,
    BrowseEntityInfoRequestToJSON,
    BrowseEntityInfoResponseFromJSON,
    BrowseEntityInfoResponseToJSON,
    BrowseEntityIteratorRequestFromJSON,
    BrowseEntityIteratorRequestToJSON,
    BrowseEntityIteratorResponseFromJSON,
    BrowseEntityIteratorResponseToJSON,
    BrowseKeyValueStoreIteratorRequestFromJSON,
    BrowseKeyValueStoreIteratorRequestToJSON,
    BrowseKeyValueStoreIteratorResponseFromJSON,
    BrowseKeyValueStoreIteratorResponseToJSON,
    BrowseObjectCollectionIteratorRequestFromJSON,
    BrowseObjectCollectionIteratorRequestToJSON,
    BrowseObjectCollectionIteratorResponseFromJSON,
    BrowseObjectCollectionIteratorResponseToJSON,
    BrowseObjectFieldRequestFromJSON,
    BrowseObjectFieldRequestToJSON,
    BrowseObjectFieldResponseFromJSON,
    BrowseObjectFieldResponseToJSON,
} from '../models';

export interface BrowseEntityInfoPostRequest {
    browseEntityInfoRequest: BrowseEntityInfoRequest;
}

export interface BrowseEntityIteratorPostRequest {
    browseEntityIteratorRequest: BrowseEntityIteratorRequest;
}

export interface BrowseKvStoreIteratorPostRequest {
    browseKeyValueStoreIteratorRequest: BrowseKeyValueStoreIteratorRequest;
}

export interface BrowseObjectCollectionIteratorPostRequest {
    browseObjectCollectionIteratorRequest: BrowseObjectCollectionIteratorRequest;
}

export interface BrowseObjectFieldPostRequest {
    browseObjectFieldRequest: BrowseObjectFieldRequest;
}

/**
 * 
 */
export class BrowseApi extends runtime.BaseAPI {

    /**
     * Resolves basic information about an entity: its type, attached modules, fields/collections and blueprint. 
     * Get Entity Info
     */
    async browseEntityInfoPostRaw(requestParameters: BrowseEntityInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrowseEntityInfoResponse>> {
        if (requestParameters.browseEntityInfoRequest === null || requestParameters.browseEntityInfoRequest === undefined) {
            throw new runtime.RequiredError('browseEntityInfoRequest','Required parameter requestParameters.browseEntityInfoRequest was null or undefined when calling browseEntityInfoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/browse/entity/info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrowseEntityInfoRequestToJSON(requestParameters.browseEntityInfoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrowseEntityInfoResponseFromJSON(jsonValue));
    }

    /**
     * Resolves basic information about an entity: its type, attached modules, fields/collections and blueprint. 
     * Get Entity Info
     */
    async browseEntityInfoPost(requestParameters: BrowseEntityInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrowseEntityInfoResponse> {
        const response = await this.browseEntityInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists addresses of all entities, in an iterator-like paged fashion
     * List Entities
     */
    async browseEntityIteratorPostRaw(requestParameters: BrowseEntityIteratorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrowseEntityIteratorResponse>> {
        if (requestParameters.browseEntityIteratorRequest === null || requestParameters.browseEntityIteratorRequest === undefined) {
            throw new runtime.RequiredError('browseEntityIteratorRequest','Required parameter requestParameters.browseEntityIteratorRequest was null or undefined when calling browseEntityIteratorPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/browse/entity/iterator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrowseEntityIteratorRequestToJSON(requestParameters.browseEntityIteratorRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrowseEntityIteratorResponseFromJSON(jsonValue));
    }

    /**
     * Lists addresses of all entities, in an iterator-like paged fashion
     * List Entities
     */
    async browseEntityIteratorPost(requestParameters: BrowseEntityIteratorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrowseEntityIteratorResponse> {
        const response = await this.browseEntityIteratorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists keys of all entries from a particular Key-Value Store, in an iterator-like paged fashion
     * List Key-Value Store
     */
    async browseKvStoreIteratorPostRaw(requestParameters: BrowseKvStoreIteratorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrowseKeyValueStoreIteratorResponse>> {
        if (requestParameters.browseKeyValueStoreIteratorRequest === null || requestParameters.browseKeyValueStoreIteratorRequest === undefined) {
            throw new runtime.RequiredError('browseKeyValueStoreIteratorRequest','Required parameter requestParameters.browseKeyValueStoreIteratorRequest was null or undefined when calling browseKvStoreIteratorPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/browse/kv_store/iterator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrowseKeyValueStoreIteratorRequestToJSON(requestParameters.browseKeyValueStoreIteratorRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrowseKeyValueStoreIteratorResponseFromJSON(jsonValue));
    }

    /**
     * Lists keys of all entries from a particular Key-Value Store, in an iterator-like paged fashion
     * List Key-Value Store
     */
    async browseKvStoreIteratorPost(requestParameters: BrowseKvStoreIteratorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrowseKeyValueStoreIteratorResponse> {
        const response = await this.browseKvStoreIteratorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists keys of all entries from a particular object\'s collection, in an iterator-like paged fashion
     * List Object Collection
     */
    async browseObjectCollectionIteratorPostRaw(requestParameters: BrowseObjectCollectionIteratorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrowseObjectCollectionIteratorResponse>> {
        if (requestParameters.browseObjectCollectionIteratorRequest === null || requestParameters.browseObjectCollectionIteratorRequest === undefined) {
            throw new runtime.RequiredError('browseObjectCollectionIteratorRequest','Required parameter requestParameters.browseObjectCollectionIteratorRequest was null or undefined when calling browseObjectCollectionIteratorPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/browse/object/collection/iterator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrowseObjectCollectionIteratorRequestToJSON(requestParameters.browseObjectCollectionIteratorRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrowseObjectCollectionIteratorResponseFromJSON(jsonValue));
    }

    /**
     * Lists keys of all entries from a particular object\'s collection, in an iterator-like paged fashion
     * List Object Collection
     */
    async browseObjectCollectionIteratorPost(requestParameters: BrowseObjectCollectionIteratorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrowseObjectCollectionIteratorResponse> {
        const response = await this.browseObjectCollectionIteratorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reads the current value of an object\'s field, given an entity address, a module (`Main` by default) and either a field index or its human-readable name (if applicable). 
     * Get Object Field
     */
    async browseObjectFieldPostRaw(requestParameters: BrowseObjectFieldPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrowseObjectFieldResponse>> {
        if (requestParameters.browseObjectFieldRequest === null || requestParameters.browseObjectFieldRequest === undefined) {
            throw new runtime.RequiredError('browseObjectFieldRequest','Required parameter requestParameters.browseObjectFieldRequest was null or undefined when calling browseObjectFieldPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/browse/object/field`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrowseObjectFieldRequestToJSON(requestParameters.browseObjectFieldRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrowseObjectFieldResponseFromJSON(jsonValue));
    }

    /**
     * Reads the current value of an object\'s field, given an entity address, a module (`Main` by default) and either a field index or its human-readable name (if applicable). 
     * Get Object Field
     */
    async browseObjectFieldPost(requestParameters: BrowseObjectFieldPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrowseObjectFieldResponse> {
        const response = await this.browseObjectFieldPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
