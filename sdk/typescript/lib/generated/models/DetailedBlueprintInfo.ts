/* tslint:disable */
/* eslint-disable */
/**
 * Radix Core API - Babylon
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node\'s function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node\'s current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlueprintCollectionInfo } from './BlueprintCollectionInfo';
import {
    BlueprintCollectionInfoFromJSON,
    BlueprintCollectionInfoFromJSONTyped,
    BlueprintCollectionInfoToJSON,
} from './BlueprintCollectionInfo';
import type { BlueprintEventInfo } from './BlueprintEventInfo';
import {
    BlueprintEventInfoFromJSON,
    BlueprintEventInfoFromJSONTyped,
    BlueprintEventInfoToJSON,
} from './BlueprintEventInfo';
import type { BlueprintFieldInfo } from './BlueprintFieldInfo';
import {
    BlueprintFieldInfoFromJSON,
    BlueprintFieldInfoFromJSONTyped,
    BlueprintFieldInfoToJSON,
} from './BlueprintFieldInfo';
import type { BlueprintFunctionInfo } from './BlueprintFunctionInfo';
import {
    BlueprintFunctionInfoFromJSON,
    BlueprintFunctionInfoFromJSONTyped,
    BlueprintFunctionInfoToJSON,
} from './BlueprintFunctionInfo';
import type { BlueprintMethodInfo } from './BlueprintMethodInfo';
import {
    BlueprintMethodInfoFromJSON,
    BlueprintMethodInfoFromJSONTyped,
    BlueprintMethodInfoToJSON,
} from './BlueprintMethodInfo';
import type { BlueprintNamedTypeInfo } from './BlueprintNamedTypeInfo';
import {
    BlueprintNamedTypeInfoFromJSON,
    BlueprintNamedTypeInfoFromJSONTyped,
    BlueprintNamedTypeInfoToJSON,
} from './BlueprintNamedTypeInfo';
import type { BlueprintRolesDefinition } from './BlueprintRolesDefinition';
import {
    BlueprintRolesDefinitionFromJSON,
    BlueprintRolesDefinitionFromJSONTyped,
    BlueprintRolesDefinitionToJSON,
} from './BlueprintRolesDefinition';
import type { GenericTypeParameter } from './GenericTypeParameter';
import {
    GenericTypeParameterFromJSON,
    GenericTypeParameterFromJSONTyped,
    GenericTypeParameterToJSON,
} from './GenericTypeParameter';

/**
 * 
 * @export
 * @interface DetailedBlueprintInfo
 */
export interface DetailedBlueprintInfo {
    /**
     * A name of the outer blueprint within the same package.
     * Only present if this one is an inner blueprint.
     * @type {string}
     * @memberof DetailedBlueprintInfo
     */
    outer_blueprint_name?: string;
    /**
     * If true, an instantiation of this blueprint cannot be persisted (e.g. buckets and proofs are transient).
     * @type {boolean}
     * @memberof DetailedBlueprintInfo
     */
    is_transient: boolean;
    /**
     * Generic type parameters which need to be substituted by an object (when instantiating this blueprint).
     * See `ObjectInstanceInfo.substituted_generic_types`.
     * @type {Array<GenericTypeParameter>}
     * @memberof DetailedBlueprintInfo
     */
    generic_type_parameters: Array<GenericTypeParameter>;
    /**
     * Names of the features that can be enabled for an object (when instantiating this blueprint).
     * See `ObjectInstanceInfo.enabled_features`.
     * @type {Array<string>}
     * @memberof DetailedBlueprintInfo
     */
    available_features: Array<string>;
    /**
     * Fields defined by this blueprint.
     * @type {Array<BlueprintFieldInfo>}
     * @memberof DetailedBlueprintInfo
     */
    fields: Array<BlueprintFieldInfo>;
    /**
     * Collections defined by this blueprint.
     * @type {Array<BlueprintCollectionInfo>}
     * @memberof DetailedBlueprintInfo
     */
    collections: Array<BlueprintCollectionInfo>;
    /**
     * Functions defined by this blueprint.
     * @type {Array<BlueprintFunctionInfo>}
     * @memberof DetailedBlueprintInfo
     */
    functions: Array<BlueprintFunctionInfo>;
    /**
     * Methods defined by this blueprint.
     * @type {Array<BlueprintMethodInfo>}
     * @memberof DetailedBlueprintInfo
     */
    methods: Array<BlueprintMethodInfo>;
    /**
     * 
     * @type {BlueprintRolesDefinition}
     * @memberof DetailedBlueprintInfo
     */
    roles: BlueprintRolesDefinition;
    /**
     * Events defined by this blueprint.
     * @type {Array<BlueprintEventInfo>}
     * @memberof DetailedBlueprintInfo
     */
    events: Array<BlueprintEventInfo>;
    /**
     * Named types defined by this blueprint.
     * @type {Array<BlueprintNamedTypeInfo>}
     * @memberof DetailedBlueprintInfo
     */
    named_types: Array<BlueprintNamedTypeInfo>;
}

/**
 * Check if a given object implements the DetailedBlueprintInfo interface.
 */
export function instanceOfDetailedBlueprintInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "is_transient" in value;
    isInstance = isInstance && "generic_type_parameters" in value;
    isInstance = isInstance && "available_features" in value;
    isInstance = isInstance && "fields" in value;
    isInstance = isInstance && "collections" in value;
    isInstance = isInstance && "functions" in value;
    isInstance = isInstance && "methods" in value;
    isInstance = isInstance && "roles" in value;
    isInstance = isInstance && "events" in value;
    isInstance = isInstance && "named_types" in value;

    return isInstance;
}

export function DetailedBlueprintInfoFromJSON(json: any): DetailedBlueprintInfo {
    return DetailedBlueprintInfoFromJSONTyped(json, false);
}

export function DetailedBlueprintInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DetailedBlueprintInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'outer_blueprint_name': !exists(json, 'outer_blueprint_name') ? undefined : json['outer_blueprint_name'],
        'is_transient': json['is_transient'],
        'generic_type_parameters': ((json['generic_type_parameters'] as Array<any>).map(GenericTypeParameterFromJSON)),
        'available_features': json['available_features'],
        'fields': ((json['fields'] as Array<any>).map(BlueprintFieldInfoFromJSON)),
        'collections': ((json['collections'] as Array<any>).map(BlueprintCollectionInfoFromJSON)),
        'functions': ((json['functions'] as Array<any>).map(BlueprintFunctionInfoFromJSON)),
        'methods': ((json['methods'] as Array<any>).map(BlueprintMethodInfoFromJSON)),
        'roles': BlueprintRolesDefinitionFromJSON(json['roles']),
        'events': ((json['events'] as Array<any>).map(BlueprintEventInfoFromJSON)),
        'named_types': ((json['named_types'] as Array<any>).map(BlueprintNamedTypeInfoFromJSON)),
    };
}

export function DetailedBlueprintInfoToJSON(value?: DetailedBlueprintInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'outer_blueprint_name': value.outer_blueprint_name,
        'is_transient': value.is_transient,
        'generic_type_parameters': ((value.generic_type_parameters as Array<any>).map(GenericTypeParameterToJSON)),
        'available_features': value.available_features,
        'fields': ((value.fields as Array<any>).map(BlueprintFieldInfoToJSON)),
        'collections': ((value.collections as Array<any>).map(BlueprintCollectionInfoToJSON)),
        'functions': ((value.functions as Array<any>).map(BlueprintFunctionInfoToJSON)),
        'methods': ((value.methods as Array<any>).map(BlueprintMethodInfoToJSON)),
        'roles': BlueprintRolesDefinitionToJSON(value.roles),
        'events': ((value.events as Array<any>).map(BlueprintEventInfoToJSON)),
        'named_types': ((value.named_types as Array<any>).map(BlueprintNamedTypeInfoToJSON)),
    };
}

