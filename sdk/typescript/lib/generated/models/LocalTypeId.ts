/* tslint:disable */
/* eslint-disable */
/**
 * Babylon Core API - RCnet v3.1
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  It is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node\'s function.  This API exposes queries against the node\'s current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  This version of the Core API belongs to the fourth release candidate of the Radix Babylon network (\"RCnet v3.1\").  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` are guaranteed to be forward compatible to Babylon mainnet launch (and beyond). We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SborData } from './SborData';
import {
    SborDataFromJSON,
    SborDataFromJSONTyped,
    SborDataToJSON,
} from './SborData';

/**
 * 
 * @export
 * @interface LocalTypeId
 */
export interface LocalTypeId {
    /**
     * The location against which to resolve this type reference.
     * @type {string}
     * @memberof LocalTypeId
     */
    kind: LocalTypeIdKindEnum;
    /**
     * A reference to a type, interpreted according to `kind`:
     * - If `WellKnown`, then it is a pointer to a well known scrypto type with that ID,
     * - If `SchemaLocal`, then it is an index into the given schema.
     * @type {number}
     * @memberof LocalTypeId
     */
    id: number;
    /**
     * 
     * @type {SborData}
     * @memberof LocalTypeId
     */
    as_sbor: SborData;
}


/**
 * @export
 */
export const LocalTypeIdKindEnum = {
    WellKnown: 'WellKnown',
    SchemaLocal: 'SchemaLocal'
} as const;
export type LocalTypeIdKindEnum = typeof LocalTypeIdKindEnum[keyof typeof LocalTypeIdKindEnum];


/**
 * Check if a given object implements the LocalTypeId interface.
 */
export function instanceOfLocalTypeId(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "as_sbor" in value;

    return isInstance;
}

export function LocalTypeIdFromJSON(json: any): LocalTypeId {
    return LocalTypeIdFromJSONTyped(json, false);
}

export function LocalTypeIdFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocalTypeId {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'kind': json['kind'],
        'id': json['id'],
        'as_sbor': SborDataFromJSON(json['as_sbor']),
    };
}

export function LocalTypeIdToJSON(value?: LocalTypeId | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'kind': value.kind,
        'id': value.id,
        'as_sbor': SborDataToJSON(value.as_sbor),
    };
}

